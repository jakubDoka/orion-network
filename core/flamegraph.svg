<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="135605"><g><title>&lt;futures_timer::native::timer::Timer as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="0.0044%" y="277" width="0.0125%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="17"/><text x="0.2544%" y="287.50"></text></g><g><title>[libc.so.6] (70 samples, 0.05%)</title><rect x="0.0000%" y="405" width="0.0516%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="70"/><text x="0.2500%" y="415.50"></text></g><g><title>[libc.so.6] (70 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0516%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="70"/><text x="0.2500%" y="399.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (70 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0516%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="70"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0516%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="70"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 0.05%)</title><rect x="0.0000%" y="341" width="0.0516%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="70"/><text x="0.2500%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (70 samples, 0.05%)</title><rect x="0.0000%" y="325" width="0.0516%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="70"/><text x="0.2500%" y="335.50"></text></g><g><title>_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h7227a5d028885381E.llvm.10080133933162240034 (70 samples, 0.05%)</title><rect x="0.0000%" y="309" width="0.0516%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="70"/><text x="0.2500%" y="319.50"></text></g><g><title>futures_timer::native::global::run (70 samples, 0.05%)</title><rect x="0.0000%" y="293" width="0.0516%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="70"/><text x="0.2500%" y="303.50"></text></g><g><title>std::thread::park_timeout (45 samples, 0.03%)</title><rect x="0.0184%" y="277" width="0.0332%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="45"/><text x="0.2684%" y="287.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park_timeout (42 samples, 0.03%)</title><rect x="0.0206%" y="261" width="0.0310%" height="15" fill="rgb(250,228,42)" fg:x="28" fg:w="42"/><text x="0.2706%" y="271.50"></text></g><g><title>std::sys::unix::futex::futex_wait (19 samples, 0.01%)</title><rect x="0.0376%" y="245" width="0.0140%" height="15" fill="rgb(240,193,28)" fg:x="51" fg:w="19"/><text x="0.2876%" y="255.50"></text></g><g><title>futures-timer (87 samples, 0.06%)</title><rect x="0.0000%" y="421" width="0.0642%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="87"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="0.0516%" y="405" width="0.0125%" height="15" fill="rgb(206,188,39)" fg:x="70" fg:w="17"/><text x="0.3016%" y="415.50"></text></g><g><title>[libc.so.6] (42 samples, 0.03%)</title><rect x="0.0723%" y="405" width="0.0310%" height="15" fill="rgb(217,207,13)" fg:x="98" fg:w="42"/><text x="0.3223%" y="415.50"></text></g><g><title>[libc.so.6] (28 samples, 0.02%)</title><rect x="0.0826%" y="389" width="0.0206%" height="15" fill="rgb(231,73,38)" fg:x="112" fg:w="28"/><text x="0.3326%" y="399.50"></text></g><g><title>tests::settle_d (61 samples, 0.04%)</title><rect x="0.0715%" y="421" width="0.0450%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="61"/><text x="0.3215%" y="431.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="0.1032%" y="405" width="0.0133%" height="15" fill="rgb(210,31,41)" fg:x="140" fg:w="18"/><text x="0.3532%" y="415.50"></text></g><g><title>[onion-b4211ae5006b9063] (35 samples, 0.03%)</title><rect x="0.1165%" y="389" width="0.0258%" height="15" fill="rgb(221,200,47)" fg:x="158" fg:w="35"/><text x="0.3665%" y="399.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (35 samples, 0.03%)</title><rect x="0.1165%" y="373" width="0.0258%" height="15" fill="rgb(226,26,5)" fg:x="158" fg:w="35"/><text x="0.3665%" y="383.50"></text></g><g><title>.LCPI273_0 (36 samples, 0.03%)</title><rect x="0.1165%" y="405" width="0.0265%" height="15" fill="rgb(249,33,26)" fg:x="158" fg:w="36"/><text x="0.3665%" y="415.50"></text></g><g><title>.LCPI2_3 (14 samples, 0.01%)</title><rect x="0.1431%" y="405" width="0.0103%" height="15" fill="rgb(235,183,28)" fg:x="194" fg:w="14"/><text x="0.3931%" y="415.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (43 samples, 0.03%)</title><rect x="0.1608%" y="405" width="0.0317%" height="15" fill="rgb(221,5,38)" fg:x="218" fg:w="43"/><text x="0.4108%" y="415.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="0.1925%" y="405" width="0.0206%" height="15" fill="rgb(247,18,42)" fg:x="261" fg:w="28"/><text x="0.4425%" y="415.50"></text></g><g><title>&lt;libp2p_identify::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (31 samples, 0.02%)</title><rect x="0.2153%" y="405" width="0.0229%" height="15" fill="rgb(241,131,45)" fg:x="292" fg:w="31"/><text x="0.4653%" y="415.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (31 samples, 0.02%)</title><rect x="0.2382%" y="405" width="0.0229%" height="15" fill="rgb(249,31,29)" fg:x="323" fg:w="31"/><text x="0.4882%" y="415.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (23 samples, 0.02%)</title><rect x="0.2662%" y="405" width="0.0170%" height="15" fill="rgb(225,111,53)" fg:x="361" fg:w="23"/><text x="0.5162%" y="415.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (170 samples, 0.13%)</title><rect x="0.3031%" y="389" width="0.1254%" height="15" fill="rgb(238,160,17)" fg:x="411" fg:w="170"/><text x="0.5531%" y="399.50"></text></g><g><title>std::sys_common::net::TcpStream::read (38 samples, 0.03%)</title><rect x="0.4004%" y="373" width="0.0280%" height="15" fill="rgb(214,148,48)" fg:x="543" fg:w="38"/><text x="0.6504%" y="383.50"></text></g><g><title>std::sys::unix::net::Socket::read (38 samples, 0.03%)</title><rect x="0.4004%" y="357" width="0.0280%" height="15" fill="rgb(232,36,49)" fg:x="543" fg:w="38"/><text x="0.6504%" y="367.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (38 samples, 0.03%)</title><rect x="0.4004%" y="341" width="0.0280%" height="15" fill="rgb(209,103,24)" fg:x="543" fg:w="38"/><text x="0.6504%" y="351.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (210 samples, 0.15%)</title><rect x="0.4285%" y="389" width="0.1549%" height="15" fill="rgb(229,88,8)" fg:x="581" fg:w="210"/><text x="0.6785%" y="399.50"></text></g><g><title>std::sys_common::net::TcpStream::write (50 samples, 0.04%)</title><rect x="0.5464%" y="373" width="0.0369%" height="15" fill="rgb(213,181,19)" fg:x="741" fg:w="50"/><text x="0.7964%" y="383.50"></text></g><g><title>&lt;T as libp2p_core::transport::boxed::Abstract&lt;O&gt;&gt;::poll (173 samples, 0.13%)</title><rect x="0.5833%" y="389" width="0.1276%" height="15" fill="rgb(254,191,54)" fg:x="791" fg:w="173"/><text x="0.8333%" y="399.50"></text></g><g><title>&lt;aes::ni::Aes256Enc as crypto_common::KeyInit&gt;::new (65 samples, 0.05%)</title><rect x="0.7116%" y="389" width="0.0479%" height="15" fill="rgb(241,83,37)" fg:x="965" fg:w="65"/><text x="0.9616%" y="399.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (55 samples, 0.04%)</title><rect x="0.7596%" y="389" width="0.0406%" height="15" fill="rgb(233,36,39)" fg:x="1030" fg:w="55"/><text x="1.0096%" y="399.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as core::convert::From&lt;Aes&gt;&gt;::from (14 samples, 0.01%)</title><rect x="0.8016%" y="389" width="0.0103%" height="15" fill="rgb(226,3,54)" fg:x="1087" fg:w="14"/><text x="1.0516%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="0.8171%" y="389" width="0.0199%" height="15" fill="rgb(245,192,40)" fg:x="1108" fg:w="27"/><text x="1.0671%" y="399.50"></text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (155 samples, 0.11%)</title><rect x="0.8370%" y="389" width="0.1143%" height="15" fill="rgb(238,167,29)" fg:x="1135" fg:w="155"/><text x="1.0870%" y="399.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (78 samples, 0.06%)</title><rect x="0.9513%" y="389" width="0.0575%" height="15" fill="rgb(232,182,51)" fg:x="1290" fg:w="78"/><text x="1.2013%" y="399.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_ready (28 samples, 0.02%)</title><rect x="1.0088%" y="389" width="0.0206%" height="15" fill="rgb(231,60,39)" fg:x="1368" fg:w="28"/><text x="1.2588%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.03%)</title><rect x="1.0383%" y="389" width="0.0251%" height="15" fill="rgb(208,69,12)" fg:x="1408" fg:w="34"/><text x="1.2883%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.02%)</title><rect x="1.0634%" y="389" width="0.0236%" height="15" fill="rgb(235,93,37)" fg:x="1442" fg:w="32"/><text x="1.3134%" y="399.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 0.03%)</title><rect x="1.0877%" y="389" width="0.0310%" height="15" fill="rgb(213,116,39)" fg:x="1475" fg:w="42"/><text x="1.3377%" y="399.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (200 samples, 0.15%)</title><rect x="1.1187%" y="389" width="0.1475%" height="15" fill="rgb(222,207,29)" fg:x="1517" fg:w="200"/><text x="1.3687%" y="399.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.2669%" y="389" width="0.0265%" height="15" fill="rgb(206,96,30)" fg:x="1718" fg:w="36"/><text x="1.5169%" y="399.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (303 samples, 0.22%)</title><rect x="1.2935%" y="389" width="0.2234%" height="15" fill="rgb(218,138,4)" fg:x="1754" fg:w="303"/><text x="1.5435%" y="399.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (67 samples, 0.05%)</title><rect x="1.5169%" y="389" width="0.0494%" height="15" fill="rgb(250,191,14)" fg:x="2057" fg:w="67"/><text x="1.7669%" y="399.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (147 samples, 0.11%)</title><rect x="1.5663%" y="389" width="0.1084%" height="15" fill="rgb(239,60,40)" fg:x="2124" fg:w="147"/><text x="1.8163%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (15 samples, 0.01%)</title><rect x="1.6843%" y="389" width="0.0111%" height="15" fill="rgb(206,27,48)" fg:x="2284" fg:w="15"/><text x="1.9343%" y="399.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (383 samples, 0.28%)</title><rect x="1.6954%" y="389" width="0.2824%" height="15" fill="rgb(225,35,8)" fg:x="2299" fg:w="383"/><text x="1.9454%" y="399.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (97 samples, 0.07%)</title><rect x="1.9778%" y="389" width="0.0715%" height="15" fill="rgb(250,213,24)" fg:x="2682" fg:w="97"/><text x="2.2278%" y="399.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (22 samples, 0.02%)</title><rect x="2.0493%" y="389" width="0.0162%" height="15" fill="rgb(247,123,22)" fg:x="2779" fg:w="22"/><text x="2.2993%" y="399.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (219 samples, 0.16%)</title><rect x="2.0656%" y="389" width="0.1615%" height="15" fill="rgb(231,138,38)" fg:x="2801" fg:w="219"/><text x="2.3156%" y="399.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (62 samples, 0.05%)</title><rect x="2.2271%" y="389" width="0.0457%" height="15" fill="rgb(231,145,46)" fg:x="3020" fg:w="62"/><text x="2.4771%" y="399.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThen&lt;T,C&gt; as libp2p_core::transport::Transport&gt;::poll (72 samples, 0.05%)</title><rect x="2.2728%" y="389" width="0.0531%" height="15" fill="rgb(251,118,11)" fg:x="3082" fg:w="72"/><text x="2.5228%" y="399.50"></text></g><g><title>&lt;libp2p_identify::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (212 samples, 0.16%)</title><rect x="2.3259%" y="389" width="0.1563%" height="15" fill="rgb(217,147,25)" fg:x="3154" fg:w="212"/><text x="2.5759%" y="399.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (344 samples, 0.25%)</title><rect x="2.4911%" y="389" width="0.2537%" height="15" fill="rgb(247,81,37)" fg:x="3378" fg:w="344"/><text x="2.7411%" y="399.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (233 samples, 0.17%)</title><rect x="2.7447%" y="389" width="0.1718%" height="15" fill="rgb(209,12,38)" fg:x="3722" fg:w="233"/><text x="2.9947%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (129 samples, 0.10%)</title><rect x="2.9173%" y="389" width="0.0951%" height="15" fill="rgb(227,1,9)" fg:x="3956" fg:w="129"/><text x="3.1673%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (68 samples, 0.05%)</title><rect x="3.0124%" y="389" width="0.0501%" height="15" fill="rgb(248,47,43)" fg:x="4085" fg:w="68"/><text x="3.2624%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (35 samples, 0.03%)</title><rect x="3.0626%" y="389" width="0.0258%" height="15" fill="rgb(221,10,30)" fg:x="4153" fg:w="35"/><text x="3.3126%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (243 samples, 0.18%)</title><rect x="3.0884%" y="389" width="0.1792%" height="15" fill="rgb(210,229,1)" fg:x="4188" fg:w="243"/><text x="3.3384%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (255 samples, 0.19%)</title><rect x="3.2676%" y="389" width="0.1880%" height="15" fill="rgb(222,148,37)" fg:x="4431" fg:w="255"/><text x="3.5176%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (41 samples, 0.03%)</title><rect x="3.4556%" y="389" width="0.0302%" height="15" fill="rgb(234,67,33)" fg:x="4686" fg:w="41"/><text x="3.7056%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::poll (14 samples, 0.01%)</title><rect x="3.4859%" y="389" width="0.0103%" height="15" fill="rgb(247,98,35)" fg:x="4727" fg:w="14"/><text x="3.7359%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (51 samples, 0.04%)</title><rect x="3.4962%" y="389" width="0.0376%" height="15" fill="rgb(247,138,52)" fg:x="4741" fg:w="51"/><text x="3.7462%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (31 samples, 0.02%)</title><rect x="3.5338%" y="389" width="0.0229%" height="15" fill="rgb(213,79,30)" fg:x="4792" fg:w="31"/><text x="3.7838%" y="399.50"></text></g><g><title>&lt;libp2p_tcp::Transport&lt;T&gt; as libp2p_core::transport::Transport&gt;::poll (57 samples, 0.04%)</title><rect x="3.5603%" y="389" width="0.0420%" height="15" fill="rgb(246,177,23)" fg:x="4828" fg:w="57"/><text x="3.8103%" y="399.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (256 samples, 0.19%)</title><rect x="3.6024%" y="389" width="0.1888%" height="15" fill="rgb(230,62,27)" fg:x="4885" fg:w="256"/><text x="3.8524%" y="399.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (203 samples, 0.15%)</title><rect x="3.7912%" y="389" width="0.1497%" height="15" fill="rgb(216,154,8)" fg:x="5141" fg:w="203"/><text x="4.0412%" y="399.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (162 samples, 0.12%)</title><rect x="3.9409%" y="389" width="0.1195%" height="15" fill="rgb(244,35,45)" fg:x="5344" fg:w="162"/><text x="4.1909%" y="399.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (30 samples, 0.02%)</title><rect x="4.0603%" y="389" width="0.0221%" height="15" fill="rgb(251,115,12)" fg:x="5506" fg:w="30"/><text x="4.3103%" y="399.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (166 samples, 0.12%)</title><rect x="4.0824%" y="389" width="0.1224%" height="15" fill="rgb(240,54,50)" fg:x="5536" fg:w="166"/><text x="4.3324%" y="399.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (36 samples, 0.03%)</title><rect x="4.2049%" y="389" width="0.0265%" height="15" fill="rgb(233,84,52)" fg:x="5702" fg:w="36"/><text x="4.4549%" y="399.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (182 samples, 0.13%)</title><rect x="4.2329%" y="389" width="0.1342%" height="15" fill="rgb(207,117,47)" fg:x="5740" fg:w="182"/><text x="4.4829%" y="399.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (68 samples, 0.05%)</title><rect x="4.3671%" y="389" width="0.0501%" height="15" fill="rgb(249,43,39)" fg:x="5922" fg:w="68"/><text x="4.6171%" y="399.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as crypto_common::KeyInit&gt;::new (53 samples, 0.04%)</title><rect x="4.4180%" y="389" width="0.0391%" height="15" fill="rgb(209,38,44)" fg:x="5991" fg:w="53"/><text x="4.6680%" y="399.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::fill_bytes (19 samples, 0.01%)</title><rect x="4.4630%" y="389" width="0.0140%" height="15" fill="rgb(236,212,23)" fg:x="6052" fg:w="19"/><text x="4.7130%" y="399.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (178 samples, 0.13%)</title><rect x="4.4784%" y="389" width="0.1313%" height="15" fill="rgb(242,79,21)" fg:x="6073" fg:w="178"/><text x="4.7284%" y="399.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (165 samples, 0.12%)</title><rect x="4.6171%" y="389" width="0.1217%" height="15" fill="rgb(211,96,35)" fg:x="6261" fg:w="165"/><text x="4.8671%" y="399.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (355 samples, 0.26%)</title><rect x="4.7388%" y="389" width="0.2618%" height="15" fill="rgb(253,215,40)" fg:x="6426" fg:w="355"/><text x="4.9888%" y="399.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (60 samples, 0.04%)</title><rect x="5.0006%" y="389" width="0.0442%" height="15" fill="rgb(211,81,21)" fg:x="6781" fg:w="60"/><text x="5.2506%" y="399.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (152 samples, 0.11%)</title><rect x="5.0455%" y="389" width="0.1121%" height="15" fill="rgb(208,190,38)" fg:x="6842" fg:w="152"/><text x="5.2955%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (182 samples, 0.13%)</title><rect x="5.1576%" y="389" width="0.1342%" height="15" fill="rgb(235,213,38)" fg:x="6994" fg:w="182"/><text x="5.4076%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_flush (23 samples, 0.02%)</title><rect x="5.2918%" y="389" width="0.0170%" height="15" fill="rgb(237,122,38)" fg:x="7176" fg:w="23"/><text x="5.5418%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (132 samples, 0.10%)</title><rect x="5.3088%" y="389" width="0.0973%" height="15" fill="rgb(244,218,35)" fg:x="7199" fg:w="132"/><text x="5.5588%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::start_send (15 samples, 0.01%)</title><rect x="5.4061%" y="389" width="0.0111%" height="15" fill="rgb(240,68,47)" fg:x="7331" fg:w="15"/><text x="5.6561%" y="399.50"></text></g><g><title>[libc.so.6] (159 samples, 0.12%)</title><rect x="5.4172%" y="389" width="0.1173%" height="15" fill="rgb(210,16,53)" fg:x="7346" fg:w="159"/><text x="5.6672%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h19f6222be6e571f9E.llvm.5862359684729327525 (14 samples, 0.01%)</title><rect x="5.5507%" y="389" width="0.0103%" height="15" fill="rgb(235,124,12)" fg:x="7527" fg:w="14"/><text x="5.8007%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h2c3342478a7ab161E.llvm.5862359684729327525 (35 samples, 0.03%)</title><rect x="5.5610%" y="389" width="0.0258%" height="15" fill="rgb(224,169,11)" fg:x="7541" fg:w="35"/><text x="5.8110%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h6a47d2474e678731E.llvm.5862359684729327525 (29 samples, 0.02%)</title><rect x="5.5868%" y="389" width="0.0214%" height="15" fill="rgb(250,166,2)" fg:x="7576" fg:w="29"/><text x="5.8368%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h2848526d34941c86E.llvm.7000205107543422316 (22 samples, 0.02%)</title><rect x="5.6082%" y="389" width="0.0162%" height="15" fill="rgb(242,216,29)" fg:x="7605" fg:w="22"/><text x="5.8582%" y="399.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (90 samples, 0.07%)</title><rect x="5.6296%" y="389" width="0.0664%" height="15" fill="rgb(230,116,27)" fg:x="7634" fg:w="90"/><text x="5.8796%" y="399.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h901eede2de5bd06dE.llvm.3258444953314870767 (25 samples, 0.02%)</title><rect x="5.6960%" y="389" width="0.0184%" height="15" fill="rgb(228,99,48)" fg:x="7724" fg:w="25"/><text x="5.9460%" y="399.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17haa52716930c8922eE.llvm.10503928954504469153 (100 samples, 0.07%)</title><rect x="5.7144%" y="389" width="0.0737%" height="15" fill="rgb(253,11,6)" fg:x="7749" fg:w="100"/><text x="5.9644%" y="399.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef0c12bb09c77e1fE.llvm.10503928954504469153 (104 samples, 0.08%)</title><rect x="5.7881%" y="389" width="0.0767%" height="15" fill="rgb(247,143,39)" fg:x="7849" fg:w="104"/><text x="6.0381%" y="399.50"></text></g><g><title>_ZN5onion9behaviour6Stream12forward_from17h2e4ab06dee66838fE.llvm.5862359684729327525 (46 samples, 0.03%)</title><rect x="5.8648%" y="389" width="0.0339%" height="15" fill="rgb(236,97,10)" fg:x="7953" fg:w="46"/><text x="6.1148%" y="399.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h40007bbf6e9cbb6fE.llvm.7163819848405301694 (42 samples, 0.03%)</title><rect x="5.9039%" y="389" width="0.0310%" height="15" fill="rgb(233,208,19)" fg:x="8006" fg:w="42"/><text x="6.1539%" y="399.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (57 samples, 0.04%)</title><rect x="5.9349%" y="389" width="0.0420%" height="15" fill="rgb(216,164,2)" fg:x="8048" fg:w="57"/><text x="6.1849%" y="399.50"></text></g><g><title>__libc_calloc (36 samples, 0.03%)</title><rect x="5.9806%" y="389" width="0.0265%" height="15" fill="rgb(220,129,5)" fg:x="8110" fg:w="36"/><text x="6.2306%" y="399.50"></text></g><g><title>__rdl_alloc_zeroed (47 samples, 0.03%)</title><rect x="6.0072%" y="389" width="0.0347%" height="15" fill="rgb(242,17,10)" fg:x="8146" fg:w="47"/><text x="6.2572%" y="399.50"></text></g><g><title>__vdso_clock_gettime (35 samples, 0.03%)</title><rect x="6.0440%" y="389" width="0.0258%" height="15" fill="rgb(242,107,0)" fg:x="8196" fg:w="35"/><text x="6.2940%" y="399.50"></text></g><g><title>bytes::bytes::static_drop (172 samples, 0.13%)</title><rect x="6.0897%" y="389" width="0.1268%" height="15" fill="rgb(251,28,31)" fg:x="8258" fg:w="172"/><text x="6.3397%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (165 samples, 0.12%)</title><rect x="6.2173%" y="389" width="0.1217%" height="15" fill="rgb(233,223,10)" fg:x="8431" fg:w="165"/><text x="6.4673%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (84 samples, 0.06%)</title><rect x="6.3390%" y="389" width="0.0619%" height="15" fill="rgb(215,21,27)" fg:x="8596" fg:w="84"/><text x="6.5890%" y="399.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (114 samples, 0.08%)</title><rect x="6.4054%" y="389" width="0.0841%" height="15" fill="rgb(232,23,21)" fg:x="8686" fg:w="114"/><text x="6.6554%" y="399.50"></text></g><g><title>cfree (122 samples, 0.09%)</title><rect x="6.4894%" y="389" width="0.0900%" height="15" fill="rgb(244,5,23)" fg:x="8800" fg:w="122"/><text x="6.7394%" y="399.50"></text></g><g><title>component_utils::set_waker (70 samples, 0.05%)</title><rect x="6.5860%" y="389" width="0.0516%" height="15" fill="rgb(226,81,46)" fg:x="8931" fg:w="70"/><text x="6.8360%" y="399.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (15 samples, 0.01%)</title><rect x="6.6391%" y="389" width="0.0111%" height="15" fill="rgb(247,70,30)" fg:x="9003" fg:w="15"/><text x="6.8891%" y="399.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (52 samples, 0.04%)</title><rect x="6.6502%" y="389" width="0.0383%" height="15" fill="rgb(212,68,19)" fg:x="9018" fg:w="52"/><text x="6.9002%" y="399.50"></text></g><g><title>component_utils::stream::PacketWriter::write (22 samples, 0.02%)</title><rect x="6.6885%" y="389" width="0.0162%" height="15" fill="rgb(240,187,13)" fg:x="9070" fg:w="22"/><text x="6.9385%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (51 samples, 0.04%)</title><rect x="6.7048%" y="389" width="0.0376%" height="15" fill="rgb(223,113,26)" fg:x="9092" fg:w="51"/><text x="6.9548%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (20 samples, 0.01%)</title><rect x="6.7424%" y="389" width="0.0147%" height="15" fill="rgb(206,192,2)" fg:x="9143" fg:w="20"/><text x="6.9924%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::option::Option&lt;libp2p_swarm::handler::ConnectionHandlerEvent&lt;libp2p_kad::protocol::ProtocolConfig,(),libp2p_kad::handler::HandlerEvent&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="6.7719%" y="389" width="0.0391%" height="15" fill="rgb(241,108,4)" fg:x="9183" fg:w="53"/><text x="7.0219%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;onion::handler::IUpgrade&gt;,libp2p_swarm::upgrade::SendWrapper&lt;either::Either&lt;libp2p_kad::protocol::ProtocolConfig,libp2p_core::upgrade::denied::DeniedUpgrade&gt;&gt;&gt;&gt;,libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_core::upgrade::ready::ReadyUpgrade&lt;libp2p_swarm::stream_protocol::StreamProtocol&gt;,libp2p_core::upgrade::ready::ReadyUpgrade&lt;libp2p_swarm::stream_protocol::StreamProtocol&gt;&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="6.8117%" y="389" width="0.0391%" height="15" fill="rgb(247,173,49)" fg:x="9237" fg:w="53"/><text x="7.0617%" y="399.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (17 samples, 0.01%)</title><rect x="6.8582%" y="389" width="0.0125%" height="15" fill="rgb(224,114,35)" fg:x="9300" fg:w="17"/><text x="7.1082%" y="399.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (279 samples, 0.21%)</title><rect x="6.8707%" y="389" width="0.2057%" height="15" fill="rgb(245,159,27)" fg:x="9317" fg:w="279"/><text x="7.1207%" y="399.50"></text></g><g><title>futures_task::waker::wake_arc_raw (57 samples, 0.04%)</title><rect x="7.0816%" y="389" width="0.0420%" height="15" fill="rgb(245,172,44)" fg:x="9603" fg:w="57"/><text x="7.3316%" y="399.50"></text></g><g><title>futures_util::async_await::random::gen_index (173 samples, 0.13%)</title><rect x="7.1236%" y="389" width="0.1276%" height="15" fill="rgb(236,23,11)" fg:x="9660" fg:w="173"/><text x="7.3736%" y="399.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (30 samples, 0.02%)</title><rect x="7.2512%" y="389" width="0.0221%" height="15" fill="rgb(205,117,38)" fg:x="9833" fg:w="30"/><text x="7.5012%" y="399.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (31 samples, 0.02%)</title><rect x="7.2733%" y="389" width="0.0229%" height="15" fill="rgb(237,72,25)" fg:x="9863" fg:w="31"/><text x="7.5233%" y="399.50"></text></g><g><title>getrandom::imp::getrandom_inner (80 samples, 0.06%)</title><rect x="7.2962%" y="389" width="0.0590%" height="15" fill="rgb(244,70,9)" fg:x="9894" fg:w="80"/><text x="7.5462%" y="399.50"></text></g><g><title>libp2p_kad::jobs::PutRecordJob::poll (15 samples, 0.01%)</title><rect x="7.3567%" y="389" width="0.0111%" height="15" fill="rgb(217,125,39)" fg:x="9976" fg:w="15"/><text x="7.6067%" y="399.50"></text></g><g><title>libp2p_kad::query::peers::closest::ClosestPeersIter::next (26 samples, 0.02%)</title><rect x="7.3744%" y="389" width="0.0192%" height="15" fill="rgb(235,36,10)" fg:x="10000" fg:w="26"/><text x="7.6244%" y="399.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (58 samples, 0.04%)</title><rect x="7.3935%" y="389" width="0.0428%" height="15" fill="rgb(251,123,47)" fg:x="10026" fg:w="58"/><text x="7.6435%" y="399.50"></text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (30 samples, 0.02%)</title><rect x="7.4437%" y="389" width="0.0221%" height="15" fill="rgb(221,13,13)" fg:x="10094" fg:w="30"/><text x="7.6937%" y="399.50"></text></g><g><title>libp2p_swarm::connection::pool::Pool&lt;THandler&gt;::poll (66 samples, 0.05%)</title><rect x="7.4658%" y="389" width="0.0487%" height="15" fill="rgb(238,131,9)" fg:x="10124" fg:w="66"/><text x="7.7158%" y="399.50"></text></g><g><title>libp2p_swarm::handler::ProtocolsChange::from_full_sets (193 samples, 0.14%)</title><rect x="7.5145%" y="389" width="0.1423%" height="15" fill="rgb(211,50,8)" fg:x="10190" fg:w="193"/><text x="7.7645%" y="399.50"></text></g><g><title>malloc (70 samples, 0.05%)</title><rect x="7.6568%" y="389" width="0.0516%" height="15" fill="rgb(245,182,24)" fg:x="10383" fg:w="70"/><text x="7.9068%" y="399.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (167 samples, 0.12%)</title><rect x="7.7173%" y="389" width="0.1232%" height="15" fill="rgb(242,14,37)" fg:x="10465" fg:w="167"/><text x="7.9673%" y="399.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_open (129 samples, 0.10%)</title><rect x="7.8412%" y="389" width="0.0951%" height="15" fill="rgb(246,228,12)" fg:x="10633" fg:w="129"/><text x="8.0912%" y="399.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (182 samples, 0.13%)</title><rect x="7.9363%" y="389" width="0.1342%" height="15" fill="rgb(213,55,15)" fg:x="10762" fg:w="182"/><text x="8.1863%" y="399.50"></text></g><g><title>snow::transportstate::TransportState::write_message (235 samples, 0.17%)</title><rect x="8.0712%" y="389" width="0.1733%" height="15" fill="rgb(209,9,3)" fg:x="10945" fg:w="235"/><text x="8.3212%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::now (34 samples, 0.03%)</title><rect x="8.2482%" y="389" width="0.0251%" height="15" fill="rgb(230,59,30)" fg:x="11185" fg:w="34"/><text x="8.4982%" y="399.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (225 samples, 0.17%)</title><rect x="8.2807%" y="389" width="0.1659%" height="15" fill="rgb(209,121,21)" fg:x="11229" fg:w="225"/><text x="8.5307%" y="399.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (115 samples, 0.08%)</title><rect x="8.4466%" y="389" width="0.0848%" height="15" fill="rgb(220,109,13)" fg:x="11454" fg:w="115"/><text x="8.6966%" y="399.50"></text></g><g><title>tokio::runtime::context::with_scheduler (57 samples, 0.04%)</title><rect x="8.5314%" y="389" width="0.0420%" height="15" fill="rgb(232,18,1)" fg:x="11569" fg:w="57"/><text x="8.7814%" y="399.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (140 samples, 0.10%)</title><rect x="8.5734%" y="389" width="0.1032%" height="15" fill="rgb(215,41,42)" fg:x="11626" fg:w="140"/><text x="8.8234%" y="399.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (27 samples, 0.02%)</title><rect x="8.6767%" y="389" width="0.0199%" height="15" fill="rgb(224,123,36)" fg:x="11766" fg:w="27"/><text x="8.9267%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (40 samples, 0.03%)</title><rect x="8.6988%" y="389" width="0.0295%" height="15" fill="rgb(240,125,3)" fg:x="11796" fg:w="40"/><text x="8.9488%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (30 samples, 0.02%)</title><rect x="8.7327%" y="389" width="0.0221%" height="15" fill="rgb(205,98,50)" fg:x="11842" fg:w="30"/><text x="8.9827%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (125 samples, 0.09%)</title><rect x="8.7548%" y="389" width="0.0922%" height="15" fill="rgb(205,185,37)" fg:x="11872" fg:w="125"/><text x="9.0048%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (39 samples, 0.03%)</title><rect x="8.8470%" y="389" width="0.0288%" height="15" fill="rgb(238,207,15)" fg:x="11997" fg:w="39"/><text x="9.0970%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (151 samples, 0.11%)</title><rect x="8.8758%" y="389" width="0.1114%" height="15" fill="rgb(213,199,42)" fg:x="12036" fg:w="151"/><text x="9.1258%" y="399.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (72 samples, 0.05%)</title><rect x="8.9879%" y="389" width="0.0531%" height="15" fill="rgb(235,201,11)" fg:x="12188" fg:w="72"/><text x="9.2379%" y="399.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (20 samples, 0.01%)</title><rect x="9.0410%" y="389" width="0.0147%" height="15" fill="rgb(207,46,11)" fg:x="12260" fg:w="20"/><text x="9.2910%" y="399.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (134 samples, 0.10%)</title><rect x="9.0557%" y="389" width="0.0988%" height="15" fill="rgb(241,35,35)" fg:x="12280" fg:w="134"/><text x="9.3057%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (38 samples, 0.03%)</title><rect x="9.1545%" y="389" width="0.0280%" height="15" fill="rgb(243,32,47)" fg:x="12414" fg:w="38"/><text x="9.4045%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (14 samples, 0.01%)</title><rect x="9.1826%" y="389" width="0.0103%" height="15" fill="rgb(247,202,23)" fg:x="12452" fg:w="14"/><text x="9.4326%" y="399.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (19 samples, 0.01%)</title><rect x="9.2202%" y="389" width="0.0140%" height="15" fill="rgb(219,102,11)" fg:x="12503" fg:w="19"/><text x="9.4702%" y="399.50"></text></g><g><title>[anon] (12,133 samples, 8.95%)</title><rect x="0.2891%" y="405" width="8.9473%" height="15" fill="rgb(243,110,44)" fg:x="392" fg:w="12133"/><text x="0.5391%" y="415.50">[anon]</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.02%)</title><rect x="9.2489%" y="389" width="0.0155%" height="15" fill="rgb(222,74,54)" fg:x="12542" fg:w="21"/><text x="9.4989%" y="399.50"></text></g><g><title>&lt;libp2p_kad::protocol::ProtocolConfig as libp2p_core::upgrade::UpgradeInfo&gt;::protocol_info (281 samples, 0.21%)</title><rect x="9.2644%" y="389" width="0.2072%" height="15" fill="rgb(216,99,12)" fg:x="12563" fg:w="281"/><text x="9.5144%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::upgrade::SendWrapper&lt;T&gt; as libp2p_core::upgrade::UpgradeInfo&gt;::protocol_info (21 samples, 0.02%)</title><rect x="9.4716%" y="389" width="0.0155%" height="15" fill="rgb(226,22,26)" fg:x="12844" fg:w="21"/><text x="9.7216%" y="399.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (50 samples, 0.04%)</title><rect x="10.5321%" y="165" width="0.0369%" height="15" fill="rgb(217,163,10)" fg:x="14282" fg:w="50"/><text x="10.7821%" y="175.50"></text></g><g><title>std::time::Instant::duration_since (44 samples, 0.03%)</title><rect x="10.5365%" y="149" width="0.0324%" height="15" fill="rgb(213,25,53)" fg:x="14288" fg:w="44"/><text x="10.7865%" y="159.50"></text></g><g><title>std::time::Instant::checked_duration_since (42 samples, 0.03%)</title><rect x="10.5380%" y="133" width="0.0310%" height="15" fill="rgb(252,105,26)" fg:x="14290" fg:w="42"/><text x="10.7880%" y="143.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (42 samples, 0.03%)</title><rect x="10.5380%" y="117" width="0.0310%" height="15" fill="rgb(220,39,43)" fg:x="14290" fg:w="42"/><text x="10.7880%" y="127.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (33 samples, 0.02%)</title><rect x="10.5446%" y="101" width="0.0243%" height="15" fill="rgb(229,68,48)" fg:x="14299" fg:w="33"/><text x="10.7946%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (17 samples, 0.01%)</title><rect x="10.6102%" y="117" width="0.0125%" height="15" fill="rgb(252,8,32)" fg:x="14388" fg:w="17"/><text x="10.8602%" y="127.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (99 samples, 0.07%)</title><rect x="10.5719%" y="133" width="0.0730%" height="15" fill="rgb(223,20,43)" fg:x="14336" fg:w="99"/><text x="10.8219%" y="143.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (30 samples, 0.02%)</title><rect x="10.6228%" y="117" width="0.0221%" height="15" fill="rgb(229,81,49)" fg:x="14405" fg:w="30"/><text x="10.8728%" y="127.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (30 samples, 0.02%)</title><rect x="10.6228%" y="101" width="0.0221%" height="15" fill="rgb(236,28,36)" fg:x="14405" fg:w="30"/><text x="10.8728%" y="111.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (24 samples, 0.02%)</title><rect x="10.6449%" y="133" width="0.0177%" height="15" fill="rgb(249,185,26)" fg:x="14435" fg:w="24"/><text x="10.8949%" y="143.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits::rt_u64_to_f64 (24 samples, 0.02%)</title><rect x="10.6449%" y="117" width="0.0177%" height="15" fill="rgb(249,174,33)" fg:x="14435" fg:w="24"/><text x="10.8949%" y="127.50"></text></g><g><title>__floattidf (289 samples, 0.21%)</title><rect x="10.5689%" y="165" width="0.2131%" height="15" fill="rgb(233,201,37)" fg:x="14332" fg:w="289"/><text x="10.8189%" y="175.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (289 samples, 0.21%)</title><rect x="10.5689%" y="149" width="0.2131%" height="15" fill="rgb(221,78,26)" fg:x="14332" fg:w="289"/><text x="10.8189%" y="159.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (162 samples, 0.12%)</title><rect x="10.6626%" y="133" width="0.1195%" height="15" fill="rgb(250,127,30)" fg:x="14459" fg:w="162"/><text x="10.9126%" y="143.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (162 samples, 0.12%)</title><rect x="10.6626%" y="117" width="0.1195%" height="15" fill="rgb(230,49,44)" fg:x="14459" fg:w="162"/><text x="10.9126%" y="127.50"></text></g><g><title>pow (919 samples, 0.68%)</title><rect x="10.7821%" y="165" width="0.6777%" height="15" fill="rgb(229,67,23)" fg:x="14621" fg:w="919"/><text x="11.0321%" y="175.50"></text></g><g><title>[libm.so.6] (756 samples, 0.56%)</title><rect x="10.9023%" y="149" width="0.5575%" height="15" fill="rgb(249,83,47)" fg:x="14784" fg:w="756"/><text x="11.1523%" y="159.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (35 samples, 0.03%)</title><rect x="11.4598%" y="165" width="0.0258%" height="15" fill="rgb(215,43,3)" fg:x="15540" fg:w="35"/><text x="11.7098%" y="175.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (24 samples, 0.02%)</title><rect x="11.4679%" y="149" width="0.0177%" height="15" fill="rgb(238,154,13)" fg:x="15551" fg:w="24"/><text x="11.7179%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (19 samples, 0.01%)</title><rect x="11.4716%" y="133" width="0.0140%" height="15" fill="rgb(219,56,2)" fg:x="15556" fg:w="19"/><text x="11.7216%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.01%)</title><rect x="11.4716%" y="117" width="0.0140%" height="15" fill="rgb(233,0,4)" fg:x="15556" fg:w="19"/><text x="11.7216%" y="127.50"></text></g><g><title>clock_gettime (828 samples, 0.61%)</title><rect x="11.4929%" y="149" width="0.6106%" height="15" fill="rgb(235,30,7)" fg:x="15585" fg:w="828"/><text x="11.7429%" y="159.50"></text></g><g><title>__vdso_clock_gettime (549 samples, 0.40%)</title><rect x="11.6987%" y="133" width="0.4049%" height="15" fill="rgb(250,79,13)" fg:x="15864" fg:w="549"/><text x="11.9487%" y="143.50"></text></g><g><title>std::sys::unix::time::Timespec::now (840 samples, 0.62%)</title><rect x="11.4856%" y="165" width="0.6194%" height="15" fill="rgb(211,146,34)" fg:x="15575" fg:w="840"/><text x="11.7356%" y="175.50"></text></g><g><title>std::time::Instant::now (141 samples, 0.10%)</title><rect x="12.1050%" y="165" width="0.1040%" height="15" fill="rgb(228,22,38)" fg:x="16415" fg:w="141"/><text x="12.3550%" y="175.50"></text></g><g><title>std::sys::unix::time::Instant::now (141 samples, 0.10%)</title><rect x="12.1050%" y="149" width="0.1040%" height="15" fill="rgb(235,168,5)" fg:x="16415" fg:w="141"/><text x="12.3550%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1,055 samples, 0.78%)</title><rect x="12.2105%" y="165" width="0.7780%" height="15" fill="rgb(221,155,16)" fg:x="16558" fg:w="1055"/><text x="12.4605%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (40 samples, 0.03%)</title><rect x="12.9885%" y="165" width="0.0295%" height="15" fill="rgb(215,215,53)" fg:x="17613" fg:w="40"/><text x="13.2385%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (15 samples, 0.01%)</title><rect x="13.0180%" y="165" width="0.0111%" height="15" fill="rgb(223,4,10)" fg:x="17653" fg:w="15"/><text x="13.2680%" y="175.50"></text></g><g><title>[libc.so.6] (24 samples, 0.02%)</title><rect x="13.3078%" y="69" width="0.0177%" height="15" fill="rgb(234,103,6)" fg:x="18046" fg:w="24"/><text x="13.5578%" y="79.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (50 samples, 0.04%)</title><rect x="13.2901%" y="101" width="0.0369%" height="15" fill="rgb(227,97,0)" fg:x="18022" fg:w="50"/><text x="13.5401%" y="111.50"></text></g><g><title>epoll_wait (40 samples, 0.03%)</title><rect x="13.2974%" y="85" width="0.0295%" height="15" fill="rgb(234,150,53)" fg:x="18032" fg:w="40"/><text x="13.5474%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (49 samples, 0.04%)</title><rect x="13.4361%" y="69" width="0.0361%" height="15" fill="rgb(228,201,54)" fg:x="18220" fg:w="49"/><text x="13.6861%" y="79.50"></text></g><g><title>tokio::runtime::context::with_scheduler (48 samples, 0.04%)</title><rect x="13.4368%" y="53" width="0.0354%" height="15" fill="rgb(222,22,37)" fg:x="18221" fg:w="48"/><text x="13.6868%" y="63.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (30 samples, 0.02%)</title><rect x="13.4501%" y="37" width="0.0221%" height="15" fill="rgb(237,53,32)" fg:x="18239" fg:w="30"/><text x="13.7001%" y="47.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h9c7f8a2cd61440f7E.llvm.1871064024184203469 (404 samples, 0.30%)</title><rect x="13.2274%" y="117" width="0.2979%" height="15" fill="rgb(233,25,53)" fg:x="17937" fg:w="404"/><text x="13.4774%" y="127.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (269 samples, 0.20%)</title><rect x="13.3269%" y="101" width="0.1984%" height="15" fill="rgb(210,40,34)" fg:x="18072" fg:w="269"/><text x="13.5769%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (159 samples, 0.12%)</title><rect x="13.4081%" y="85" width="0.1173%" height="15" fill="rgb(241,220,44)" fg:x="18182" fg:w="159"/><text x="13.6581%" y="95.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (69 samples, 0.05%)</title><rect x="13.4744%" y="69" width="0.0509%" height="15" fill="rgb(235,28,35)" fg:x="18272" fg:w="69"/><text x="13.7244%" y="79.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hbbf06b9f73b6cd1bE.llvm.17073567277356765837 (445 samples, 0.33%)</title><rect x="13.2200%" y="133" width="0.3282%" height="15" fill="rgb(210,56,17)" fg:x="17927" fg:w="445"/><text x="13.4700%" y="143.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (22 samples, 0.02%)</title><rect x="13.5319%" y="117" width="0.0162%" height="15" fill="rgb(224,130,29)" fg:x="18350" fg:w="22"/><text x="13.7819%" y="127.50"></text></g><g><title>std::sys::unix::futex::futex_wait (136 samples, 0.10%)</title><rect x="13.5541%" y="101" width="0.1003%" height="15" fill="rgb(235,212,8)" fg:x="18380" fg:w="136"/><text x="13.8041%" y="111.50"></text></g><g><title>syscall (74 samples, 0.05%)</title><rect x="13.5998%" y="85" width="0.0546%" height="15" fill="rgb(223,33,50)" fg:x="18442" fg:w="74"/><text x="13.8498%" y="95.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="13.6433%" y="69" width="0.0111%" height="15" fill="rgb(219,149,13)" fg:x="18501" fg:w="15"/><text x="13.8933%" y="79.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (104 samples, 0.08%)</title><rect x="13.6544%" y="101" width="0.0767%" height="15" fill="rgb(250,156,29)" fg:x="18516" fg:w="104"/><text x="13.9044%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (104 samples, 0.08%)</title><rect x="13.6544%" y="85" width="0.0767%" height="15" fill="rgb(216,193,19)" fg:x="18516" fg:w="104"/><text x="13.9044%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (104 samples, 0.08%)</title><rect x="13.6544%" y="69" width="0.0767%" height="15" fill="rgb(216,135,14)" fg:x="18516" fg:w="104"/><text x="13.9044%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (895 samples, 0.66%)</title><rect x="13.0777%" y="149" width="0.6600%" height="15" fill="rgb(241,47,5)" fg:x="17734" fg:w="895"/><text x="13.3277%" y="159.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (257 samples, 0.19%)</title><rect x="13.5482%" y="133" width="0.1895%" height="15" fill="rgb(233,42,35)" fg:x="18372" fg:w="257"/><text x="13.7982%" y="143.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (257 samples, 0.19%)</title><rect x="13.5482%" y="117" width="0.1895%" height="15" fill="rgb(231,13,6)" fg:x="18372" fg:w="257"/><text x="13.7982%" y="127.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (27 samples, 0.02%)</title><rect x="13.8247%" y="101" width="0.0199%" height="15" fill="rgb(207,181,40)" fg:x="18747" fg:w="27"/><text x="14.0747%" y="111.50"></text></g><g><title>epoll_wait (25 samples, 0.02%)</title><rect x="13.8262%" y="85" width="0.0184%" height="15" fill="rgb(254,173,49)" fg:x="18749" fg:w="25"/><text x="14.0762%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (26 samples, 0.02%)</title><rect x="13.9243%" y="69" width="0.0192%" height="15" fill="rgb(221,1,38)" fg:x="18882" fg:w="26"/><text x="14.1743%" y="79.50"></text></g><g><title>tokio::runtime::context::with_scheduler (23 samples, 0.02%)</title><rect x="13.9265%" y="53" width="0.0170%" height="15" fill="rgb(206,124,46)" fg:x="18885" fg:w="23"/><text x="14.1765%" y="63.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h9c7f8a2cd61440f7E.llvm.1871064024184203469 (310 samples, 0.23%)</title><rect x="13.7628%" y="117" width="0.2286%" height="15" fill="rgb(249,21,11)" fg:x="18663" fg:w="310"/><text x="14.0128%" y="127.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (199 samples, 0.15%)</title><rect x="13.8446%" y="101" width="0.1467%" height="15" fill="rgb(222,201,40)" fg:x="18774" fg:w="199"/><text x="14.0946%" y="111.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (121 samples, 0.09%)</title><rect x="13.9021%" y="85" width="0.0892%" height="15" fill="rgb(235,61,29)" fg:x="18852" fg:w="121"/><text x="14.1521%" y="95.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (61 samples, 0.04%)</title><rect x="13.9464%" y="69" width="0.0450%" height="15" fill="rgb(219,207,3)" fg:x="18912" fg:w="61"/><text x="14.1964%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,351 samples, 1.00%)</title><rect x="13.0290%" y="165" width="0.9963%" height="15" fill="rgb(222,56,46)" fg:x="17668" fg:w="1351"/><text x="13.2790%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (390 samples, 0.29%)</title><rect x="13.7377%" y="149" width="0.2876%" height="15" fill="rgb(239,76,54)" fg:x="18629" fg:w="390"/><text x="13.9877%" y="159.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hbbf06b9f73b6cd1bE.llvm.17073567277356765837 (371 samples, 0.27%)</title><rect x="13.7517%" y="133" width="0.2736%" height="15" fill="rgb(231,124,27)" fg:x="18648" fg:w="371"/><text x="14.0017%" y="143.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (37 samples, 0.03%)</title><rect x="13.9980%" y="117" width="0.0273%" height="15" fill="rgb(249,195,6)" fg:x="18982" fg:w="37"/><text x="14.2480%" y="127.50"></text></g><g><title>_ZN5tokio7runtime9scheduler12multi_thread4park8Unparker6unpark17h2dbacfbe16905bbdE.llvm.17757036233579673584 (46 samples, 0.03%)</title><rect x="14.9419%" y="149" width="0.0339%" height="15" fill="rgb(237,174,47)" fg:x="20262" fg:w="46"/><text x="15.1919%" y="159.50"></text></g><g><title>syscall (19 samples, 0.01%)</title><rect x="14.9825%" y="149" width="0.0140%" height="15" fill="rgb(206,201,31)" fg:x="20317" fg:w="19"/><text x="15.2325%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (141 samples, 0.10%)</title><rect x="14.9965%" y="149" width="0.1040%" height="15" fill="rgb(231,57,52)" fg:x="20336" fg:w="141"/><text x="15.2465%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (335 samples, 0.25%)</title><rect x="15.1772%" y="133" width="0.2470%" height="15" fill="rgb(248,177,22)" fg:x="20581" fg:w="335"/><text x="15.4272%" y="143.50"></text></g><g><title>tokio::runtime::context::with_scheduler (322 samples, 0.24%)</title><rect x="15.1868%" y="117" width="0.2375%" height="15" fill="rgb(215,211,37)" fg:x="20594" fg:w="322"/><text x="15.4368%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (257 samples, 0.19%)</title><rect x="15.2347%" y="101" width="0.1895%" height="15" fill="rgb(241,128,51)" fg:x="20659" fg:w="257"/><text x="15.4847%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (195 samples, 0.14%)</title><rect x="15.2804%" y="85" width="0.1438%" height="15" fill="rgb(227,165,31)" fg:x="20721" fg:w="195"/><text x="15.5304%" y="95.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (174 samples, 0.13%)</title><rect x="15.4567%" y="117" width="0.1283%" height="15" fill="rgb(228,167,24)" fg:x="20960" fg:w="174"/><text x="15.7067%" y="127.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (58 samples, 0.04%)</title><rect x="15.5894%" y="117" width="0.0428%" height="15" fill="rgb(228,143,12)" fg:x="21140" fg:w="58"/><text x="15.8394%" y="127.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (313 samples, 0.23%)</title><rect x="15.4242%" y="133" width="0.2308%" height="15" fill="rgb(249,149,8)" fg:x="20916" fg:w="313"/><text x="15.6742%" y="143.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (28 samples, 0.02%)</title><rect x="15.6344%" y="117" width="0.0206%" height="15" fill="rgb(243,35,44)" fg:x="21201" fg:w="28"/><text x="15.8844%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (72 samples, 0.05%)</title><rect x="15.6550%" y="133" width="0.0531%" height="15" fill="rgb(246,89,9)" fg:x="21229" fg:w="72"/><text x="15.9050%" y="143.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (232 samples, 0.17%)</title><rect x="15.7081%" y="133" width="0.1711%" height="15" fill="rgb(233,213,13)" fg:x="21301" fg:w="232"/><text x="15.9581%" y="143.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,206 samples, 0.89%)</title><rect x="15.1005%" y="149" width="0.8893%" height="15" fill="rgb(233,141,41)" fg:x="20477" fg:w="1206"/><text x="15.3505%" y="159.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (150 samples, 0.11%)</title><rect x="15.8792%" y="133" width="0.1106%" height="15" fill="rgb(239,167,4)" fg:x="21533" fg:w="150"/><text x="16.1292%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (2,862 samples, 2.11%)</title><rect x="14.0253%" y="165" width="2.1105%" height="15" fill="rgb(209,217,16)" fg:x="19019" fg:w="2862"/><text x="14.2753%" y="175.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (198 samples, 0.15%)</title><rect x="15.9898%" y="149" width="0.1460%" height="15" fill="rgb(219,88,35)" fg:x="21683" fg:w="198"/><text x="16.2398%" y="159.50"></text></g><g><title>[libc.so.6] (9,148 samples, 6.75%)</title><rect x="9.4871%" y="389" width="6.7461%" height="15" fill="rgb(220,193,23)" fg:x="12865" fg:w="9148"/><text x="9.7371%" y="399.50">[libc.so...</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9,148 samples, 6.75%)</title><rect x="9.4871%" y="373" width="6.7461%" height="15" fill="rgb(230,90,52)" fg:x="12865" fg:w="9148"/><text x="9.7371%" y="383.50">std::sys:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,148 samples, 6.75%)</title><rect x="9.4871%" y="357" width="6.7461%" height="15" fill="rgb(252,106,19)" fg:x="12865" fg:w="9148"/><text x="9.7371%" y="367.50">&lt;alloc::b..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,148 samples, 6.75%)</title><rect x="9.4871%" y="341" width="6.7461%" height="15" fill="rgb(206,74,20)" fg:x="12865" fg:w="9148"/><text x="9.7371%" y="351.50">&lt;alloc::b..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (9,148 samples, 6.75%)</title><rect x="9.4871%" y="325" width="6.7461%" height="15" fill="rgb(230,138,44)" fg:x="12865" fg:w="9148"/><text x="9.7371%" y="335.50">core::ops..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,144 samples, 6.74%)</title><rect x="9.4901%" y="309" width="6.7431%" height="15" fill="rgb(235,182,43)" fg:x="12869" fg:w="9144"/><text x="9.7401%" y="319.50">std::sys_..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (9,144 samples, 6.74%)</title><rect x="9.4901%" y="293" width="6.7431%" height="15" fill="rgb(242,16,51)" fg:x="12869" fg:w="9144"/><text x="9.7401%" y="303.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9,136 samples, 6.74%)</title><rect x="9.4960%" y="277" width="6.7372%" height="15" fill="rgb(248,9,4)" fg:x="12877" fg:w="9136"/><text x="9.7460%" y="287.50">tokio::ru..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9,136 samples, 6.74%)</title><rect x="9.4960%" y="261" width="6.7372%" height="15" fill="rgb(210,31,22)" fg:x="12877" fg:w="9136"/><text x="9.7460%" y="271.50">tokio::ru..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (9,136 samples, 6.74%)</title><rect x="9.4960%" y="245" width="6.7372%" height="15" fill="rgb(239,54,39)" fg:x="12877" fg:w="9136"/><text x="9.7460%" y="255.50">&lt;tokio::r..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (9,136 samples, 6.74%)</title><rect x="9.4960%" y="229" width="6.7372%" height="15" fill="rgb(230,99,41)" fg:x="12877" fg:w="9136"/><text x="9.7460%" y="239.50">tokio::ru..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (9,136 samples, 6.74%)</title><rect x="9.4960%" y="213" width="6.7372%" height="15" fill="rgb(253,106,12)" fg:x="12877" fg:w="9136"/><text x="9.7460%" y="223.50">tokio::ru..</text></g><g><title>tokio::runtime::context::set_scheduler (9,135 samples, 6.74%)</title><rect x="9.4967%" y="197" width="6.7365%" height="15" fill="rgb(213,46,41)" fg:x="12878" fg:w="9135"/><text x="9.7467%" y="207.50">tokio::ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (9,135 samples, 6.74%)</title><rect x="9.4967%" y="181" width="6.7365%" height="15" fill="rgb(215,133,35)" fg:x="12878" fg:w="9135"/><text x="9.7467%" y="191.50">tokio::ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (132 samples, 0.10%)</title><rect x="16.1358%" y="165" width="0.0973%" height="15" fill="rgb(213,28,5)" fg:x="21881" fg:w="132"/><text x="16.3858%" y="175.50"></text></g><g><title>[libc.so.6] (9,698 samples, 7.15%)</title><rect x="9.2364%" y="405" width="7.1517%" height="15" fill="rgb(215,77,49)" fg:x="12525" fg:w="9698"/><text x="9.4864%" y="415.50">[libc.so.6]</text></g><g><title>core::ptr::drop_in_place&lt;libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;onion::handler::IUpgrade&gt;,libp2p_swarm::upgrade::SendWrapper&lt;either::Either&lt;libp2p_kad::protocol::ProtocolConfig,libp2p_core::upgrade::denied::DeniedUpgrade&gt;&gt;&gt;&gt;&gt; (210 samples, 0.15%)</title><rect x="16.2332%" y="389" width="0.1549%" height="15" fill="rgb(248,100,22)" fg:x="22013" fg:w="210"/><text x="16.4832%" y="399.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (146 samples, 0.11%)</title><rect x="16.3954%" y="389" width="0.1077%" height="15" fill="rgb(208,67,9)" fg:x="22233" fg:w="146"/><text x="16.6454%" y="399.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (15 samples, 0.01%)</title><rect x="16.5038%" y="389" width="0.0111%" height="15" fill="rgb(219,133,21)" fg:x="22380" fg:w="15"/><text x="16.7538%" y="399.50"></text></g><g><title>[onion-b4211ae5006b9063] (22 samples, 0.02%)</title><rect x="16.5178%" y="389" width="0.0162%" height="15" fill="rgb(246,46,29)" fg:x="22399" fg:w="22"/><text x="16.7678%" y="399.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (22 samples, 0.02%)</title><rect x="16.5178%" y="373" width="0.0162%" height="15" fill="rgb(246,185,52)" fg:x="22399" fg:w="22"/><text x="16.7678%" y="383.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (45 samples, 0.03%)</title><rect x="16.5400%" y="389" width="0.0332%" height="15" fill="rgb(252,136,11)" fg:x="22429" fg:w="45"/><text x="16.7900%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (15 samples, 0.01%)</title><rect x="16.5768%" y="389" width="0.0111%" height="15" fill="rgb(219,138,53)" fg:x="22479" fg:w="15"/><text x="16.8268%" y="399.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (135 samples, 0.10%)</title><rect x="16.6026%" y="389" width="0.0996%" height="15" fill="rgb(211,51,23)" fg:x="22514" fg:w="135"/><text x="16.8526%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (43 samples, 0.03%)</title><rect x="16.7073%" y="389" width="0.0317%" height="15" fill="rgb(247,221,28)" fg:x="22656" fg:w="43"/><text x="16.9573%" y="399.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (26 samples, 0.02%)</title><rect x="16.7391%" y="389" width="0.0192%" height="15" fill="rgb(251,222,45)" fg:x="22699" fg:w="26"/><text x="16.9891%" y="399.50"></text></g><g><title>[onion-b4211ae5006b9063] (504 samples, 0.37%)</title><rect x="16.3880%" y="405" width="0.3717%" height="15" fill="rgb(217,162,53)" fg:x="22223" fg:w="504"/><text x="16.6380%" y="415.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (173 samples, 0.13%)</title><rect x="16.8040%" y="389" width="0.1276%" height="15" fill="rgb(229,93,14)" fg:x="22787" fg:w="173"/><text x="17.0540%" y="399.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (213 samples, 0.16%)</title><rect x="16.9315%" y="389" width="0.1571%" height="15" fill="rgb(209,67,49)" fg:x="22960" fg:w="213"/><text x="17.1815%" y="399.50"></text></g><g><title>&lt;aes::autodetect::Aes256 as cipher::block::BlockEncrypt&gt;::encrypt_with_backend::inner (16 samples, 0.01%)</title><rect x="17.0967%" y="389" width="0.0118%" height="15" fill="rgb(213,87,29)" fg:x="23184" fg:w="16"/><text x="17.3467%" y="399.50"></text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="17.1188%" y="389" width="0.0111%" height="15" fill="rgb(205,151,52)" fg:x="23214" fg:w="15"/><text x="17.3688%" y="399.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (29 samples, 0.02%)</title><rect x="17.1299%" y="389" width="0.0214%" height="15" fill="rgb(253,215,39)" fg:x="23229" fg:w="29"/><text x="17.3799%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="17.1528%" y="389" width="0.0140%" height="15" fill="rgb(221,220,41)" fg:x="23260" fg:w="19"/><text x="17.4028%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.03%)</title><rect x="17.1668%" y="389" width="0.0295%" height="15" fill="rgb(218,133,21)" fg:x="23279" fg:w="40"/><text x="17.4168%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.02%)</title><rect x="17.1963%" y="389" width="0.0229%" height="15" fill="rgb(221,193,43)" fg:x="23319" fg:w="31"/><text x="17.4463%" y="399.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="17.2280%" y="389" width="0.0118%" height="15" fill="rgb(240,128,52)" fg:x="23362" fg:w="16"/><text x="17.4780%" y="399.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (241 samples, 0.18%)</title><rect x="17.2479%" y="389" width="0.1777%" height="15" fill="rgb(253,114,12)" fg:x="23389" fg:w="241"/><text x="17.4979%" y="399.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (149 samples, 0.11%)</title><rect x="17.4256%" y="389" width="0.1099%" height="15" fill="rgb(215,223,47)" fg:x="23630" fg:w="149"/><text x="17.6756%" y="399.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (17 samples, 0.01%)</title><rect x="17.5679%" y="213" width="0.0125%" height="15" fill="rgb(248,225,23)" fg:x="23823" fg:w="17"/><text x="17.8179%" y="223.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (42 samples, 0.03%)</title><rect x="17.5628%" y="229" width="0.0310%" height="15" fill="rgb(250,108,0)" fg:x="23816" fg:w="42"/><text x="17.8128%" y="239.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (18 samples, 0.01%)</title><rect x="17.5805%" y="213" width="0.0133%" height="15" fill="rgb(228,208,7)" fg:x="23840" fg:w="18"/><text x="17.8305%" y="223.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (45 samples, 0.03%)</title><rect x="17.5613%" y="293" width="0.0332%" height="15" fill="rgb(244,45,10)" fg:x="23814" fg:w="45"/><text x="17.8113%" y="303.50"></text></g><g><title>x25519_dalek::x25519::x25519 (45 samples, 0.03%)</title><rect x="17.5613%" y="277" width="0.0332%" height="15" fill="rgb(207,125,25)" fg:x="23814" fg:w="45"/><text x="17.8113%" y="287.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (45 samples, 0.03%)</title><rect x="17.5613%" y="261" width="0.0332%" height="15" fill="rgb(210,195,18)" fg:x="23814" fg:w="45"/><text x="17.8113%" y="271.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (45 samples, 0.03%)</title><rect x="17.5613%" y="245" width="0.0332%" height="15" fill="rgb(249,80,12)" fg:x="23814" fg:w="45"/><text x="17.8113%" y="255.50"></text></g><g><title>libp2p_noise::io::handshake::send_identity::_{{closure}} (63 samples, 0.05%)</title><rect x="17.5613%" y="341" width="0.0465%" height="15" fill="rgb(221,65,9)" fg:x="23814" fg:w="63"/><text x="17.8113%" y="351.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (63 samples, 0.05%)</title><rect x="17.5613%" y="325" width="0.0465%" height="15" fill="rgb(235,49,36)" fg:x="23814" fg:w="63"/><text x="17.8113%" y="335.50"></text></g><g><title>snow::handshakestate::HandshakeState::write_message (63 samples, 0.05%)</title><rect x="17.5613%" y="309" width="0.0465%" height="15" fill="rgb(225,32,20)" fg:x="23814" fg:w="63"/><text x="17.8113%" y="319.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::generate (18 samples, 0.01%)</title><rect x="17.5945%" y="293" width="0.0133%" height="15" fill="rgb(215,141,46)" fg:x="23859" fg:w="18"/><text x="17.8445%" y="303.50"></text></g><g><title>x25519_dalek::x25519::x25519 (18 samples, 0.01%)</title><rect x="17.5945%" y="277" width="0.0133%" height="15" fill="rgb(250,160,47)" fg:x="23859" fg:w="18"/><text x="17.8445%" y="287.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (18 samples, 0.01%)</title><rect x="17.5945%" y="261" width="0.0133%" height="15" fill="rgb(216,222,40)" fg:x="23859" fg:w="18"/><text x="17.8445%" y="271.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (18 samples, 0.01%)</title><rect x="17.5945%" y="245" width="0.0133%" height="15" fill="rgb(234,217,39)" fg:x="23859" fg:w="18"/><text x="17.8445%" y="255.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (17 samples, 0.01%)</title><rect x="17.5952%" y="229" width="0.0125%" height="15" fill="rgb(207,178,40)" fg:x="23860" fg:w="17"/><text x="17.8452%" y="239.50"></text></g><g><title>&lt;libp2p_core::upgrade::apply::InboundUpgradeApply&lt;C,U&gt; as core::future::future::Future&gt;::poll (92 samples, 0.07%)</title><rect x="17.5598%" y="373" width="0.0678%" height="15" fill="rgb(221,136,13)" fg:x="23812" fg:w="92"/><text x="17.8098%" y="383.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::InboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_inbound::_{{closure}} (92 samples, 0.07%)</title><rect x="17.5598%" y="357" width="0.0678%" height="15" fill="rgb(249,199,10)" fg:x="23812" fg:w="92"/><text x="17.8098%" y="367.50"></text></g><g><title>snow::builder::Builder::build_responder (27 samples, 0.02%)</title><rect x="17.6078%" y="341" width="0.0199%" height="15" fill="rgb(249,222,13)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="351.50"></text></g><g><title>snow::builder::Builder::build (27 samples, 0.02%)</title><rect x="17.6078%" y="325" width="0.0199%" height="15" fill="rgb(244,185,38)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="335.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::set (27 samples, 0.02%)</title><rect x="17.6078%" y="309" width="0.0199%" height="15" fill="rgb(236,202,9)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="319.50"></text></g><g><title>x25519_dalek::x25519::x25519 (27 samples, 0.02%)</title><rect x="17.6078%" y="293" width="0.0199%" height="15" fill="rgb(250,229,37)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="303.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (27 samples, 0.02%)</title><rect x="17.6078%" y="277" width="0.0199%" height="15" fill="rgb(206,174,23)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (27 samples, 0.02%)</title><rect x="17.6078%" y="261" width="0.0199%" height="15" fill="rgb(211,33,43)" fg:x="23877" fg:w="27"/><text x="17.8578%" y="271.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (22 samples, 0.02%)</title><rect x="17.6114%" y="245" width="0.0162%" height="15" fill="rgb(245,58,50)" fg:x="23882" fg:w="22"/><text x="17.8614%" y="255.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (14 samples, 0.01%)</title><rect x="17.6321%" y="229" width="0.0103%" height="15" fill="rgb(244,68,36)" fg:x="23910" fg:w="14"/><text x="17.8821%" y="239.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (29 samples, 0.02%)</title><rect x="17.6277%" y="341" width="0.0214%" height="15" fill="rgb(232,229,15)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="351.50"></text></g><g><title>snow::handshakestate::HandshakeState::write_message (29 samples, 0.02%)</title><rect x="17.6277%" y="325" width="0.0214%" height="15" fill="rgb(254,30,23)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="335.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::generate (29 samples, 0.02%)</title><rect x="17.6277%" y="309" width="0.0214%" height="15" fill="rgb(235,160,14)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="319.50"></text></g><g><title>x25519_dalek::x25519::x25519 (29 samples, 0.02%)</title><rect x="17.6277%" y="293" width="0.0214%" height="15" fill="rgb(212,155,44)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="303.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (29 samples, 0.02%)</title><rect x="17.6277%" y="277" width="0.0214%" height="15" fill="rgb(226,2,50)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (29 samples, 0.02%)</title><rect x="17.6277%" y="261" width="0.0214%" height="15" fill="rgb(234,177,6)" fg:x="23904" fg:w="29"/><text x="17.8777%" y="271.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (27 samples, 0.02%)</title><rect x="17.6291%" y="245" width="0.0199%" height="15" fill="rgb(217,24,9)" fg:x="23906" fg:w="27"/><text x="17.8791%" y="255.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (26 samples, 0.02%)</title><rect x="17.6498%" y="293" width="0.0192%" height="15" fill="rgb(220,13,46)" fg:x="23934" fg:w="26"/><text x="17.8998%" y="303.50"></text></g><g><title>x25519_dalek::x25519::x25519 (26 samples, 0.02%)</title><rect x="17.6498%" y="277" width="0.0192%" height="15" fill="rgb(239,221,27)" fg:x="23934" fg:w="26"/><text x="17.8998%" y="287.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (26 samples, 0.02%)</title><rect x="17.6498%" y="261" width="0.0192%" height="15" fill="rgb(222,198,25)" fg:x="23934" fg:w="26"/><text x="17.8998%" y="271.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (26 samples, 0.02%)</title><rect x="17.6498%" y="245" width="0.0192%" height="15" fill="rgb(211,99,13)" fg:x="23934" fg:w="26"/><text x="17.8998%" y="255.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (25 samples, 0.02%)</title><rect x="17.6505%" y="229" width="0.0184%" height="15" fill="rgb(232,111,31)" fg:x="23935" fg:w="25"/><text x="17.9005%" y="239.50"></text></g><g><title>libp2p_noise::io::handshake::send_identity::_{{closure}} (27 samples, 0.02%)</title><rect x="17.6498%" y="341" width="0.0199%" height="15" fill="rgb(245,82,37)" fg:x="23934" fg:w="27"/><text x="17.8998%" y="351.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (27 samples, 0.02%)</title><rect x="17.6498%" y="325" width="0.0199%" height="15" fill="rgb(227,149,46)" fg:x="23934" fg:w="27"/><text x="17.8998%" y="335.50"></text></g><g><title>snow::handshakestate::HandshakeState::write_message (27 samples, 0.02%)</title><rect x="17.6498%" y="309" width="0.0199%" height="15" fill="rgb(218,36,50)" fg:x="23934" fg:w="27"/><text x="17.8998%" y="319.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::set (27 samples, 0.02%)</title><rect x="17.6697%" y="309" width="0.0199%" height="15" fill="rgb(226,80,48)" fg:x="23961" fg:w="27"/><text x="17.9197%" y="319.50"></text></g><g><title>x25519_dalek::x25519::x25519 (27 samples, 0.02%)</title><rect x="17.6697%" y="293" width="0.0199%" height="15" fill="rgb(238,224,15)" fg:x="23961" fg:w="27"/><text x="17.9197%" y="303.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (27 samples, 0.02%)</title><rect x="17.6697%" y="277" width="0.0199%" height="15" fill="rgb(241,136,10)" fg:x="23961" fg:w="27"/><text x="17.9197%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (27 samples, 0.02%)</title><rect x="17.6697%" y="261" width="0.0199%" height="15" fill="rgb(208,32,45)" fg:x="23961" fg:w="27"/><text x="17.9197%" y="271.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (27 samples, 0.02%)</title><rect x="17.6697%" y="245" width="0.0199%" height="15" fill="rgb(207,135,9)" fg:x="23961" fg:w="27"/><text x="17.9197%" y="255.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (14 samples, 0.01%)</title><rect x="17.6793%" y="229" width="0.0103%" height="15" fill="rgb(206,86,44)" fg:x="23974" fg:w="14"/><text x="17.9293%" y="239.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThenFuture&lt;TFut,TMap,TMapOut&gt; as core::future::future::Future&gt;::poll (178 samples, 0.13%)</title><rect x="17.5598%" y="389" width="0.1313%" height="15" fill="rgb(245,177,15)" fg:x="23812" fg:w="178"/><text x="17.8098%" y="399.50"></text></g><g><title>&lt;libp2p_core::upgrade::apply::OutboundUpgradeApply&lt;C,U&gt; as core::future::future::Future&gt;::poll (86 samples, 0.06%)</title><rect x="17.6277%" y="373" width="0.0634%" height="15" fill="rgb(206,64,50)" fg:x="23904" fg:w="86"/><text x="17.8777%" y="383.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::OutboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_outbound::_{{closure}} (86 samples, 0.06%)</title><rect x="17.6277%" y="357" width="0.0634%" height="15" fill="rgb(234,36,40)" fg:x="23904" fg:w="86"/><text x="17.8777%" y="367.50"></text></g><g><title>snow::builder::Builder::build_initiator (29 samples, 0.02%)</title><rect x="17.6697%" y="341" width="0.0214%" height="15" fill="rgb(213,64,8)" fg:x="23961" fg:w="29"/><text x="17.9197%" y="351.50"></text></g><g><title>snow::builder::Builder::build (29 samples, 0.02%)</title><rect x="17.6697%" y="325" width="0.0214%" height="15" fill="rgb(210,75,36)" fg:x="23961" fg:w="29"/><text x="17.9197%" y="335.50"></text></g><g><title>&lt;libp2p_identify::behaviour::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (165 samples, 0.12%)</title><rect x="17.6999%" y="389" width="0.1217%" height="15" fill="rgb(229,88,21)" fg:x="24002" fg:w="165"/><text x="17.9499%" y="399.50"></text></g><g><title>&lt;libp2p_identify::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (122 samples, 0.09%)</title><rect x="17.8224%" y="389" width="0.0900%" height="15" fill="rgb(252,204,47)" fg:x="24168" fg:w="122"/><text x="18.0724%" y="399.50"></text></g><g><title>&lt;libp2p_kad::behaviour::Behaviour&lt;TStore&gt; as libp2p_swarm::behaviour::NetworkBehaviour&gt;::on_connection_handler_event (22 samples, 0.02%)</title><rect x="17.9123%" y="389" width="0.0162%" height="15" fill="rgb(208,77,27)" fg:x="24290" fg:w="22"/><text x="18.1623%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 0.02%)</title><rect x="17.9123%" y="373" width="0.0162%" height="15" fill="rgb(221,76,26)" fg:x="24290" fg:w="22"/><text x="18.1623%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="17.9123%" y="357" width="0.0162%" height="15" fill="rgb(225,139,18)" fg:x="24290" fg:w="22"/><text x="18.1623%" y="367.50"></text></g><g><title>[libc.so.6] (111 samples, 0.08%)</title><rect x="18.4425%" y="373" width="0.0819%" height="15" fill="rgb(230,137,11)" fg:x="25009" fg:w="111"/><text x="18.6925%" y="383.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (84 samples, 0.06%)</title><rect x="18.8658%" y="341" width="0.0619%" height="15" fill="rgb(212,28,1)" fg:x="25583" fg:w="84"/><text x="19.1158%" y="351.50"></text></g><g><title>libp2p_kad::jobs::AddProviderJob::poll (628 samples, 0.46%)</title><rect x="18.5244%" y="373" width="0.4631%" height="15" fill="rgb(248,164,17)" fg:x="25120" fg:w="628"/><text x="18.7744%" y="383.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (605 samples, 0.45%)</title><rect x="18.5414%" y="357" width="0.4461%" height="15" fill="rgb(222,171,42)" fg:x="25143" fg:w="605"/><text x="18.7914%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (81 samples, 0.06%)</title><rect x="18.9278%" y="341" width="0.0597%" height="15" fill="rgb(243,84,45)" fg:x="25667" fg:w="81"/><text x="19.1778%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (69 samples, 0.05%)</title><rect x="19.2781%" y="341" width="0.0509%" height="15" fill="rgb(252,49,23)" fg:x="26142" fg:w="69"/><text x="19.5281%" y="351.50"></text></g><g><title>libp2p_kad::jobs::PutRecordJob::poll (511 samples, 0.38%)</title><rect x="18.9875%" y="373" width="0.3768%" height="15" fill="rgb(215,19,7)" fg:x="25748" fg:w="511"/><text x="19.2375%" y="383.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (466 samples, 0.34%)</title><rect x="19.0207%" y="357" width="0.3436%" height="15" fill="rgb(238,81,41)" fg:x="25793" fg:w="466"/><text x="19.2707%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (48 samples, 0.04%)</title><rect x="19.3289%" y="341" width="0.0354%" height="15" fill="rgb(210,199,37)" fg:x="26211" fg:w="48"/><text x="19.5789%" y="351.50"></text></g><g><title>libp2p_kad::query::QueryPool&lt;TInner&gt;::poll (330 samples, 0.24%)</title><rect x="19.3643%" y="373" width="0.2434%" height="15" fill="rgb(244,192,49)" fg:x="26259" fg:w="330"/><text x="19.6143%" y="383.50"></text></g><g><title>libp2p_kad::query::peers::closest::ClosestPeersIter::next (143 samples, 0.11%)</title><rect x="19.5022%" y="357" width="0.1055%" height="15" fill="rgb(226,211,11)" fg:x="26446" fg:w="143"/><text x="19.7522%" y="367.50"></text></g><g><title>clock_gettime (324 samples, 0.24%)</title><rect x="19.6099%" y="357" width="0.2389%" height="15" fill="rgb(236,162,54)" fg:x="26592" fg:w="324"/><text x="19.8599%" y="367.50"></text></g><g><title>__vdso_clock_gettime (222 samples, 0.16%)</title><rect x="19.6851%" y="341" width="0.1637%" height="15" fill="rgb(220,229,9)" fg:x="26694" fg:w="222"/><text x="19.9351%" y="351.50"></text></g><g><title>std::sys::unix::time::Timespec::now (328 samples, 0.24%)</title><rect x="19.6077%" y="373" width="0.2419%" height="15" fill="rgb(250,87,22)" fg:x="26589" fg:w="328"/><text x="19.8577%" y="383.50"></text></g><g><title>std::time::Instant::now (56 samples, 0.04%)</title><rect x="19.8496%" y="373" width="0.0413%" height="15" fill="rgb(239,43,17)" fg:x="26917" fg:w="56"/><text x="20.0996%" y="383.50"></text></g><g><title>std::sys::unix::time::Instant::now (56 samples, 0.04%)</title><rect x="19.8496%" y="357" width="0.0413%" height="15" fill="rgb(231,177,25)" fg:x="26917" fg:w="56"/><text x="20.0996%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (68 samples, 0.05%)</title><rect x="19.8909%" y="373" width="0.0501%" height="15" fill="rgb(219,179,1)" fg:x="26973" fg:w="68"/><text x="20.1409%" y="383.50"></text></g><g><title>&lt;libp2p_kad::behaviour::Behaviour&lt;TStore&gt; as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (2,778 samples, 2.05%)</title><rect x="17.9285%" y="389" width="2.0486%" height="15" fill="rgb(238,219,53)" fg:x="24312" fg:w="2778"/><text x="18.1785%" y="399.50">&lt;..</text></g><g><title>tokio::runtime::task::waker::drop_waker (49 samples, 0.04%)</title><rect x="19.9410%" y="373" width="0.0361%" height="15" fill="rgb(232,167,36)" fg:x="27041" fg:w="49"/><text x="20.1910%" y="383.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (98 samples, 0.07%)</title><rect x="19.9786%" y="389" width="0.0723%" height="15" fill="rgb(244,19,51)" fg:x="27092" fg:w="98"/><text x="20.2286%" y="399.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (18 samples, 0.01%)</title><rect x="20.0693%" y="229" width="0.0133%" height="15" fill="rgb(224,6,22)" fg:x="27215" fg:w="18"/><text x="20.3193%" y="239.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (37 samples, 0.03%)</title><rect x="20.0671%" y="309" width="0.0273%" height="15" fill="rgb(224,145,5)" fg:x="27212" fg:w="37"/><text x="20.3171%" y="319.50"></text></g><g><title>x25519_dalek::x25519::x25519 (37 samples, 0.03%)</title><rect x="20.0671%" y="293" width="0.0273%" height="15" fill="rgb(234,130,49)" fg:x="27212" fg:w="37"/><text x="20.3171%" y="303.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (37 samples, 0.03%)</title><rect x="20.0671%" y="277" width="0.0273%" height="15" fill="rgb(254,6,2)" fg:x="27212" fg:w="37"/><text x="20.3171%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (37 samples, 0.03%)</title><rect x="20.0671%" y="261" width="0.0273%" height="15" fill="rgb(208,96,46)" fg:x="27212" fg:w="37"/><text x="20.3171%" y="271.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (35 samples, 0.03%)</title><rect x="20.0686%" y="245" width="0.0258%" height="15" fill="rgb(239,3,39)" fg:x="27214" fg:w="35"/><text x="20.3186%" y="255.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (16 samples, 0.01%)</title><rect x="20.0826%" y="229" width="0.0118%" height="15" fill="rgb(233,210,1)" fg:x="27233" fg:w="16"/><text x="20.3326%" y="239.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::InboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_inbound::_{{closure}} (47 samples, 0.03%)</title><rect x="20.0612%" y="389" width="0.0347%" height="15" fill="rgb(244,137,37)" fg:x="27204" fg:w="47"/><text x="20.3112%" y="399.50"></text></g><g><title>libp2p_noise::io::handshake::recv_identity::_{{closure}} (40 samples, 0.03%)</title><rect x="20.0664%" y="373" width="0.0295%" height="15" fill="rgb(240,136,2)" fg:x="27211" fg:w="40"/><text x="20.3164%" y="383.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (40 samples, 0.03%)</title><rect x="20.0664%" y="357" width="0.0295%" height="15" fill="rgb(239,18,37)" fg:x="27211" fg:w="40"/><text x="20.3164%" y="367.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (40 samples, 0.03%)</title><rect x="20.0664%" y="341" width="0.0295%" height="15" fill="rgb(218,185,22)" fg:x="27211" fg:w="40"/><text x="20.3164%" y="351.50"></text></g><g><title>snow::handshakestate::HandshakeState::read_message (39 samples, 0.03%)</title><rect x="20.0671%" y="325" width="0.0288%" height="15" fill="rgb(225,218,4)" fg:x="27212" fg:w="39"/><text x="20.3171%" y="335.50"></text></g><g><title>libp2p_noise::io::handshake::State&lt;T&gt;::finish (15 samples, 0.01%)</title><rect x="20.0959%" y="373" width="0.0111%" height="15" fill="rgb(230,182,32)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="383.50"></text></g><g><title>libp2p_identity::ed25519::PublicKey::verify (15 samples, 0.01%)</title><rect x="20.0959%" y="357" width="0.0111%" height="15" fill="rgb(242,56,43)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="367.50"></text></g><g><title>&lt;ed25519_dalek::verifying::VerifyingKey as signature::verifier::Verifier&lt;ed25519::Signature&gt;&gt;::verify (15 samples, 0.01%)</title><rect x="20.0959%" y="341" width="0.0111%" height="15" fill="rgb(233,99,24)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="351.50"></text></g><g><title>_ZN13ed25519_dalek9verifying12VerifyingKey11recompute_R17hdbb032bcd40bf036E.llvm.12187908402712359837 (15 samples, 0.01%)</title><rect x="20.0959%" y="325" width="0.0111%" height="15" fill="rgb(234,209,42)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="335.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsPoint::vartime_double_scalar_mul_basepoint (15 samples, 0.01%)</title><rect x="20.0959%" y="309" width="0.0111%" height="15" fill="rgb(227,7,12)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="319.50"></text></g><g><title>curve25519_dalek::backend::vartime_double_base_mul (15 samples, 0.01%)</title><rect x="20.0959%" y="293" width="0.0111%" height="15" fill="rgb(245,203,43)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="303.50"></text></g><g><title>curve25519_dalek::backend::vector::scalar_mul::vartime_double_base::spec_avx2::mul::_impl_mul (15 samples, 0.01%)</title><rect x="20.0959%" y="277" width="0.0111%" height="15" fill="rgb(238,205,33)" fg:x="27251" fg:w="15"/><text x="20.3459%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (25 samples, 0.02%)</title><rect x="20.1150%" y="229" width="0.0184%" height="15" fill="rgb(231,56,7)" fg:x="27277" fg:w="25"/><text x="20.3650%" y="239.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::OutboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_outbound::_{{closure}} (69 samples, 0.05%)</title><rect x="20.0959%" y="389" width="0.0509%" height="15" fill="rgb(244,186,29)" fg:x="27251" fg:w="69"/><text x="20.3459%" y="399.50"></text></g><g><title>libp2p_noise::io::handshake::recv_identity::_{{closure}} (54 samples, 0.04%)</title><rect x="20.1069%" y="373" width="0.0398%" height="15" fill="rgb(234,111,31)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="383.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (54 samples, 0.04%)</title><rect x="20.1069%" y="357" width="0.0398%" height="15" fill="rgb(241,149,10)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="367.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (54 samples, 0.04%)</title><rect x="20.1069%" y="341" width="0.0398%" height="15" fill="rgb(249,206,44)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="351.50"></text></g><g><title>snow::handshakestate::HandshakeState::read_message (54 samples, 0.04%)</title><rect x="20.1069%" y="325" width="0.0398%" height="15" fill="rgb(251,153,30)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="335.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (54 samples, 0.04%)</title><rect x="20.1069%" y="309" width="0.0398%" height="15" fill="rgb(239,152,38)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="319.50"></text></g><g><title>x25519_dalek::x25519::x25519 (54 samples, 0.04%)</title><rect x="20.1069%" y="293" width="0.0398%" height="15" fill="rgb(249,139,47)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="303.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (54 samples, 0.04%)</title><rect x="20.1069%" y="277" width="0.0398%" height="15" fill="rgb(244,64,35)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="287.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (54 samples, 0.04%)</title><rect x="20.1069%" y="261" width="0.0398%" height="15" fill="rgb(216,46,15)" fg:x="27266" fg:w="54"/><text x="20.3569%" y="271.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (47 samples, 0.03%)</title><rect x="20.1121%" y="245" width="0.0347%" height="15" fill="rgb(250,74,19)" fg:x="27273" fg:w="47"/><text x="20.3621%" y="255.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (18 samples, 0.01%)</title><rect x="20.1335%" y="229" width="0.0133%" height="15" fill="rgb(249,42,33)" fg:x="27302" fg:w="18"/><text x="20.3835%" y="239.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (38 samples, 0.03%)</title><rect x="20.1467%" y="389" width="0.0280%" height="15" fill="rgb(242,149,17)" fg:x="27320" fg:w="38"/><text x="20.3967%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (65 samples, 0.05%)</title><rect x="20.1748%" y="389" width="0.0479%" height="15" fill="rgb(244,29,21)" fg:x="27358" fg:w="65"/><text x="20.4248%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (85 samples, 0.06%)</title><rect x="20.2301%" y="389" width="0.0627%" height="15" fill="rgb(220,130,37)" fg:x="27433" fg:w="85"/><text x="20.4801%" y="399.50"></text></g><g><title>&lt;libp2p_identify::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (518 samples, 0.38%)</title><rect x="20.6047%" y="373" width="0.3820%" height="15" fill="rgb(211,67,2)" fg:x="27941" fg:w="518"/><text x="20.8547%" y="383.50"></text></g><g><title>__rdl_alloc (62 samples, 0.05%)</title><rect x="21.2396%" y="357" width="0.0457%" height="15" fill="rgb(235,68,52)" fg:x="28802" fg:w="62"/><text x="21.4896%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51 samples, 0.04%)</title><rect x="21.2477%" y="341" width="0.0376%" height="15" fill="rgb(246,142,3)" fg:x="28813" fg:w="51"/><text x="21.4977%" y="351.50"></text></g><g><title>__rust_alloc (133 samples, 0.10%)</title><rect x="21.2854%" y="357" width="0.0981%" height="15" fill="rgb(241,25,7)" fg:x="28864" fg:w="133"/><text x="21.5354%" y="367.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (1,144 samples, 0.84%)</title><rect x="20.9867%" y="373" width="0.8436%" height="15" fill="rgb(242,119,39)" fg:x="28459" fg:w="1144"/><text x="21.2367%" y="383.50"></text></g><g><title>malloc (606 samples, 0.45%)</title><rect x="21.3834%" y="357" width="0.4469%" height="15" fill="rgb(241,98,45)" fg:x="28997" fg:w="606"/><text x="21.6334%" y="367.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (18,507 samples, 13.65%)</title><rect x="20.2942%" y="389" width="13.6477%" height="15" fill="rgb(254,28,30)" fg:x="27520" fg:w="18507"/><text x="20.5442%" y="399.50">&lt;libp2p_swarm::handle..</text></g><g><title>[libc.so.6] (16,424 samples, 12.11%)</title><rect x="21.8303%" y="373" width="12.1116%" height="15" fill="rgb(241,142,54)" fg:x="29603" fg:w="16424"/><text x="22.0803%" y="383.50">[libc.so.6]</text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::poll (26 samples, 0.02%)</title><rect x="33.9420%" y="389" width="0.0192%" height="15" fill="rgb(222,85,15)" fg:x="46027" fg:w="26"/><text x="34.1920%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (29 samples, 0.02%)</title><rect x="33.9611%" y="389" width="0.0214%" height="15" fill="rgb(210,85,47)" fg:x="46053" fg:w="29"/><text x="34.2111%" y="399.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (102 samples, 0.08%)</title><rect x="33.9928%" y="389" width="0.0752%" height="15" fill="rgb(224,206,25)" fg:x="46096" fg:w="102"/><text x="34.2428%" y="399.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (55 samples, 0.04%)</title><rect x="34.0275%" y="373" width="0.0406%" height="15" fill="rgb(243,201,19)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="383.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (55 samples, 0.04%)</title><rect x="34.0275%" y="357" width="0.0406%" height="15" fill="rgb(236,59,4)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="367.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (55 samples, 0.04%)</title><rect x="34.0275%" y="341" width="0.0406%" height="15" fill="rgb(254,179,45)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="351.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (55 samples, 0.04%)</title><rect x="34.0275%" y="325" width="0.0406%" height="15" fill="rgb(226,14,10)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="335.50"></text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (55 samples, 0.04%)</title><rect x="34.0275%" y="309" width="0.0406%" height="15" fill="rgb(244,27,41)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="319.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (55 samples, 0.04%)</title><rect x="34.0275%" y="293" width="0.0406%" height="15" fill="rgb(235,35,32)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="303.50"></text></g><g><title>snow::transportstate::TransportState::read_message (55 samples, 0.04%)</title><rect x="34.0275%" y="277" width="0.0406%" height="15" fill="rgb(218,68,31)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="287.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (55 samples, 0.04%)</title><rect x="34.0275%" y="261" width="0.0406%" height="15" fill="rgb(207,120,37)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="271.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (55 samples, 0.04%)</title><rect x="34.0275%" y="245" width="0.0406%" height="15" fill="rgb(227,98,0)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="255.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (55 samples, 0.04%)</title><rect x="34.0275%" y="229" width="0.0406%" height="15" fill="rgb(207,7,3)" fg:x="46143" fg:w="55"/><text x="34.2775%" y="239.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (23 samples, 0.02%)</title><rect x="34.0681%" y="389" width="0.0170%" height="15" fill="rgb(206,98,19)" fg:x="46198" fg:w="23"/><text x="34.3181%" y="399.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (47 samples, 0.03%)</title><rect x="34.0850%" y="389" width="0.0347%" height="15" fill="rgb(217,5,26)" fg:x="46221" fg:w="47"/><text x="34.3350%" y="399.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (21 samples, 0.02%)</title><rect x="34.1197%" y="389" width="0.0155%" height="15" fill="rgb(235,190,38)" fg:x="46268" fg:w="21"/><text x="34.3697%" y="399.50"></text></g><g><title>&lt;onion::behaviour::EncryptedStream as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="34.1433%" y="389" width="0.0199%" height="15" fill="rgb(247,86,24)" fg:x="46300" fg:w="27"/><text x="34.3933%" y="399.50"></text></g><g><title>&lt;onion::handler::IUpgrade as libp2p_core::upgrade::InboundUpgrade&lt;libp2p_swarm::stream::Stream&gt;&gt;::upgrade_inbound::_{{closure}} (17 samples, 0.01%)</title><rect x="34.1632%" y="389" width="0.0125%" height="15" fill="rgb(205,101,16)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="399.50"></text></g><g><title>onion::packet::peel_initial (17 samples, 0.01%)</title><rect x="34.1632%" y="373" width="0.0125%" height="15" fill="rgb(246,168,33)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="383.50"></text></g><g><title>crypto::enc::KeyPair::decapsulate (17 samples, 0.01%)</title><rect x="34.1632%" y="357" width="0.0125%" height="15" fill="rgb(231,114,1)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="367.50"></text></g><g><title>x25519_dalek::x25519::StaticSecret::diffie_hellman (17 samples, 0.01%)</title><rect x="34.1632%" y="341" width="0.0125%" height="15" fill="rgb(207,184,53)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="351.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (17 samples, 0.01%)</title><rect x="34.1632%" y="325" width="0.0125%" height="15" fill="rgb(224,95,51)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="335.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (17 samples, 0.01%)</title><rect x="34.1632%" y="309" width="0.0125%" height="15" fill="rgb(212,188,45)" fg:x="46327" fg:w="17"/><text x="34.4132%" y="319.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (16 samples, 0.01%)</title><rect x="34.1639%" y="293" width="0.0118%" height="15" fill="rgb(223,154,38)" fg:x="46328" fg:w="16"/><text x="34.4139%" y="303.50"></text></g><g><title>&lt;onion::handler::OUpgrade as libp2p_core::upgrade::OutboundUpgrade&lt;libp2p_swarm::stream::Stream&gt;&gt;::upgrade_outbound::_{{closure}} (26 samples, 0.02%)</title><rect x="34.1757%" y="389" width="0.0192%" height="15" fill="rgb(251,22,52)" fg:x="46344" fg:w="26"/><text x="34.4257%" y="399.50"></text></g><g><title>onion::packet::new_initial (26 samples, 0.02%)</title><rect x="34.1757%" y="373" width="0.0192%" height="15" fill="rgb(229,209,22)" fg:x="46344" fg:w="26"/><text x="34.4257%" y="383.50"></text></g><g><title>crypto::enc::KeyPair::encapsulate (26 samples, 0.02%)</title><rect x="34.1757%" y="357" width="0.0192%" height="15" fill="rgb(234,138,34)" fg:x="46344" fg:w="26"/><text x="34.4257%" y="367.50"></text></g><g><title>x25519_dalek::x25519::StaticSecret::diffie_hellman (20 samples, 0.01%)</title><rect x="34.1802%" y="341" width="0.0147%" height="15" fill="rgb(212,95,11)" fg:x="46350" fg:w="20"/><text x="34.4302%" y="351.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (20 samples, 0.01%)</title><rect x="34.1802%" y="325" width="0.0147%" height="15" fill="rgb(240,179,47)" fg:x="46350" fg:w="20"/><text x="34.4302%" y="335.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (19 samples, 0.01%)</title><rect x="34.1809%" y="309" width="0.0140%" height="15" fill="rgb(240,163,11)" fg:x="46351" fg:w="19"/><text x="34.4309%" y="319.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (15 samples, 0.01%)</title><rect x="34.1838%" y="293" width="0.0111%" height="15" fill="rgb(236,37,12)" fg:x="46355" fg:w="15"/><text x="34.4338%" y="303.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as universal_hash::UniversalHash&gt;::update_with_backend (23 samples, 0.02%)</title><rect x="34.1956%" y="389" width="0.0170%" height="15" fill="rgb(232,164,16)" fg:x="46371" fg:w="23"/><text x="34.4456%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_flush (19 samples, 0.01%)</title><rect x="34.2414%" y="389" width="0.0140%" height="15" fill="rgb(244,205,15)" fg:x="46433" fg:w="19"/><text x="34.4914%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (25 samples, 0.02%)</title><rect x="34.2554%" y="389" width="0.0184%" height="15" fill="rgb(223,117,47)" fg:x="46452" fg:w="25"/><text x="34.5054%" y="399.50"></text></g><g><title>[libc.so.6] (152 samples, 0.11%)</title><rect x="34.2738%" y="389" width="0.1121%" height="15" fill="rgb(244,107,35)" fg:x="46477" fg:w="152"/><text x="34.5238%" y="399.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (494 samples, 0.36%)</title><rect x="34.9228%" y="309" width="0.3643%" height="15" fill="rgb(205,140,8)" fg:x="47357" fg:w="494"/><text x="35.1728%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (199 samples, 0.15%)</title><rect x="35.1403%" y="293" width="0.1467%" height="15" fill="rgb(228,84,46)" fg:x="47652" fg:w="199"/><text x="35.3903%" y="303.50"></text></g><g><title>&lt;T as libp2p_core::transport::boxed::Abstract&lt;O&gt;&gt;::poll (656 samples, 0.48%)</title><rect x="34.8195%" y="373" width="0.4838%" height="15" fill="rgb(254,188,9)" fg:x="47217" fg:w="656"/><text x="35.0695%" y="383.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThen&lt;T,C&gt; as libp2p_core::transport::Transport&gt;::poll (643 samples, 0.47%)</title><rect x="34.8291%" y="357" width="0.4742%" height="15" fill="rgb(206,112,54)" fg:x="47230" fg:w="643"/><text x="35.0791%" y="367.50"></text></g><g><title>&lt;libp2p_tcp::Transport&lt;T&gt; as libp2p_core::transport::Transport&gt;::poll (637 samples, 0.47%)</title><rect x="34.8335%" y="341" width="0.4697%" height="15" fill="rgb(216,84,49)" fg:x="47236" fg:w="637"/><text x="35.0835%" y="351.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (529 samples, 0.39%)</title><rect x="34.9132%" y="325" width="0.3901%" height="15" fill="rgb(214,194,35)" fg:x="47344" fg:w="529"/><text x="35.1632%" y="335.50"></text></g><g><title>[libc.so.6] (22 samples, 0.02%)</title><rect x="35.2870%" y="309" width="0.0162%" height="15" fill="rgb(249,28,3)" fg:x="47851" fg:w="22"/><text x="35.5370%" y="319.50"></text></g><g><title>&lt;libp2p_identify::behaviour::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (87 samples, 0.06%)</title><rect x="35.3033%" y="373" width="0.0642%" height="15" fill="rgb(222,56,52)" fg:x="47873" fg:w="87"/><text x="35.5533%" y="383.50"></text></g><g><title>[libc.so.6] (102 samples, 0.08%)</title><rect x="37.1800%" y="261" width="0.0752%" height="15" fill="rgb(245,217,50)" fg:x="50418" fg:w="102"/><text x="37.4300%" y="271.50"></text></g><g><title>cfree (321 samples, 0.24%)</title><rect x="37.2626%" y="261" width="0.2367%" height="15" fill="rgb(213,201,24)" fg:x="50530" fg:w="321"/><text x="37.5126%" y="271.50"></text></g><g><title>[libc.so.6] (266 samples, 0.20%)</title><rect x="37.3032%" y="245" width="0.1962%" height="15" fill="rgb(248,116,28)" fg:x="50585" fg:w="266"/><text x="37.5532%" y="255.50"></text></g><g><title>futures_task::waker::clone_arc_raw (152 samples, 0.11%)</title><rect x="37.4994%" y="261" width="0.1121%" height="15" fill="rgb(219,72,43)" fg:x="50851" fg:w="152"/><text x="37.7494%" y="271.50"></text></g><g><title>futures_task::waker::drop_arc_raw (92 samples, 0.07%)</title><rect x="37.6114%" y="261" width="0.0678%" height="15" fill="rgb(209,138,14)" fg:x="51003" fg:w="92"/><text x="37.8614%" y="271.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (2,325 samples, 1.71%)</title><rect x="36.3954%" y="325" width="1.7145%" height="15" fill="rgb(222,18,33)" fg:x="49354" fg:w="2325"/><text x="36.6454%" y="335.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (2,300 samples, 1.70%)</title><rect x="36.4138%" y="309" width="1.6961%" height="15" fill="rgb(213,199,7)" fg:x="49379" fg:w="2300"/><text x="36.6638%" y="319.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (2,291 samples, 1.69%)</title><rect x="36.4205%" y="293" width="1.6895%" height="15" fill="rgb(250,110,10)" fg:x="49388" fg:w="2291"/><text x="36.6705%" y="303.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (2,286 samples, 1.69%)</title><rect x="36.4242%" y="277" width="1.6858%" height="15" fill="rgb(248,123,6)" fg:x="49393" fg:w="2286"/><text x="36.6742%" y="287.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (584 samples, 0.43%)</title><rect x="37.6793%" y="261" width="0.4307%" height="15" fill="rgb(206,91,31)" fg:x="51095" fg:w="584"/><text x="37.9293%" y="271.50"></text></g><g><title>[libc.so.6] (23 samples, 0.02%)</title><rect x="38.4256%" y="245" width="0.0170%" height="15" fill="rgb(211,154,13)" fg:x="52107" fg:w="23"/><text x="38.6756%" y="255.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (197 samples, 0.15%)</title><rect x="38.6343%" y="229" width="0.1453%" height="15" fill="rgb(225,148,7)" fg:x="52390" fg:w="197"/><text x="38.8843%" y="239.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (187 samples, 0.14%)</title><rect x="39.0332%" y="197" width="0.1379%" height="15" fill="rgb(220,160,43)" fg:x="52931" fg:w="187"/><text x="39.2832%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (219 samples, 0.16%)</title><rect x="39.2073%" y="181" width="0.1615%" height="15" fill="rgb(213,52,39)" fg:x="53167" fg:w="219"/><text x="39.4573%" y="191.50"></text></g><g><title>tokio::runtime::context::with_scheduler (206 samples, 0.15%)</title><rect x="39.2168%" y="165" width="0.1519%" height="15" fill="rgb(243,137,7)" fg:x="53180" fg:w="206"/><text x="39.4668%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (147 samples, 0.11%)</title><rect x="39.2604%" y="149" width="0.1084%" height="15" fill="rgb(230,79,13)" fg:x="53239" fg:w="147"/><text x="39.5104%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (110 samples, 0.08%)</title><rect x="39.2876%" y="133" width="0.0811%" height="15" fill="rgb(247,105,23)" fg:x="53276" fg:w="110"/><text x="39.5376%" y="143.50"></text></g><g><title>futures_task::waker::wake_arc_raw (865 samples, 0.64%)</title><rect x="38.7795%" y="229" width="0.6379%" height="15" fill="rgb(223,179,41)" fg:x="52587" fg:w="865"/><text x="39.0295%" y="239.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (823 samples, 0.61%)</title><rect x="38.8105%" y="213" width="0.6069%" height="15" fill="rgb(218,9,34)" fg:x="52629" fg:w="823"/><text x="39.0605%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (334 samples, 0.25%)</title><rect x="39.1711%" y="197" width="0.2463%" height="15" fill="rgb(222,106,8)" fg:x="53118" fg:w="334"/><text x="39.4211%" y="207.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (61 samples, 0.04%)</title><rect x="39.3724%" y="181" width="0.0450%" height="15" fill="rgb(211,220,0)" fg:x="53391" fg:w="61"/><text x="39.6224%" y="191.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (1,384 samples, 1.02%)</title><rect x="38.4514%" y="245" width="1.0206%" height="15" fill="rgb(229,52,16)" fg:x="52142" fg:w="1384"/><text x="38.7014%" y="255.50"></text></g><g><title>malloc (74 samples, 0.05%)</title><rect x="39.4174%" y="229" width="0.0546%" height="15" fill="rgb(212,155,18)" fg:x="53452" fg:w="74"/><text x="39.6674%" y="239.50"></text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="39.4565%" y="213" width="0.0155%" height="15" fill="rgb(242,21,14)" fg:x="53505" fg:w="21"/><text x="39.7065%" y="223.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,769 samples, 1.30%)</title><rect x="38.1874%" y="309" width="1.3045%" height="15" fill="rgb(222,19,48)" fg:x="51784" fg:w="1769"/><text x="38.4374%" y="319.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (1,759 samples, 1.30%)</title><rect x="38.1948%" y="293" width="1.2971%" height="15" fill="rgb(232,45,27)" fg:x="51794" fg:w="1759"/><text x="38.4448%" y="303.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,756 samples, 1.29%)</title><rect x="38.1970%" y="277" width="1.2949%" height="15" fill="rgb(249,103,42)" fg:x="51797" fg:w="1756"/><text x="38.4470%" y="287.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,754 samples, 1.29%)</title><rect x="38.1984%" y="261" width="1.2935%" height="15" fill="rgb(246,81,33)" fg:x="51799" fg:w="1754"/><text x="38.4484%" y="271.50"></text></g><g><title>malloc (27 samples, 0.02%)</title><rect x="39.4720%" y="245" width="0.0199%" height="15" fill="rgb(252,33,42)" fg:x="53526" fg:w="27"/><text x="39.7220%" y="255.50"></text></g><g><title>component_utils::set_waker (127 samples, 0.09%)</title><rect x="39.4919%" y="309" width="0.0937%" height="15" fill="rgb(209,212,41)" fg:x="53553" fg:w="127"/><text x="39.7419%" y="319.50"></text></g><g><title>futures_task::waker::clone_arc_raw (79 samples, 0.06%)</title><rect x="39.5273%" y="293" width="0.0583%" height="15" fill="rgb(207,154,6)" fg:x="53601" fg:w="79"/><text x="39.7773%" y="303.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (2,007 samples, 1.48%)</title><rect x="38.1100%" y="325" width="1.4800%" height="15" fill="rgb(223,64,47)" fg:x="51679" fg:w="2007"/><text x="38.3600%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.01%)</title><rect x="39.5988%" y="309" width="0.0133%" height="15" fill="rgb(211,161,38)" fg:x="53698" fg:w="18"/><text x="39.8488%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (106 samples, 0.08%)</title><rect x="39.7891%" y="277" width="0.0782%" height="15" fill="rgb(219,138,40)" fg:x="53956" fg:w="106"/><text x="40.0391%" y="287.50"></text></g><g><title>component_utils::stream::PacketWriter::write (404 samples, 0.30%)</title><rect x="39.5900%" y="325" width="0.2979%" height="15" fill="rgb(241,228,46)" fg:x="53686" fg:w="404"/><text x="39.8400%" y="335.50"></text></g><g><title>futures_task::waker::wake_arc_raw (374 samples, 0.28%)</title><rect x="39.6121%" y="309" width="0.2758%" height="15" fill="rgb(223,209,38)" fg:x="53716" fg:w="374"/><text x="39.8621%" y="319.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (335 samples, 0.25%)</title><rect x="39.6409%" y="293" width="0.2470%" height="15" fill="rgb(236,164,45)" fg:x="53755" fg:w="335"/><text x="39.8909%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (28 samples, 0.02%)</title><rect x="39.8673%" y="277" width="0.0206%" height="15" fill="rgb(231,15,5)" fg:x="54062" fg:w="28"/><text x="40.1173%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (27 samples, 0.02%)</title><rect x="39.8680%" y="261" width="0.0199%" height="15" fill="rgb(252,35,15)" fg:x="54063" fg:w="27"/><text x="40.1180%" y="271.50"></text></g><g><title>clock_gettime (279 samples, 0.21%)</title><rect x="39.8886%" y="309" width="0.2057%" height="15" fill="rgb(248,181,18)" fg:x="54091" fg:w="279"/><text x="40.1386%" y="319.50"></text></g><g><title>__vdso_clock_gettime (166 samples, 0.12%)</title><rect x="39.9720%" y="293" width="0.1224%" height="15" fill="rgb(233,39,42)" fg:x="54204" fg:w="166"/><text x="40.2220%" y="303.50"></text></g><g><title>std::sys::unix::time::Timespec::now (282 samples, 0.21%)</title><rect x="39.8879%" y="325" width="0.2080%" height="15" fill="rgb(238,110,33)" fg:x="54090" fg:w="282"/><text x="40.1379%" y="335.50"></text></g><g><title>_ZN5onion9behaviour6Stream12forward_from17h2e4ab06dee66838fE.llvm.5862359684729327525 (5,122 samples, 3.78%)</title><rect x="36.3630%" y="341" width="3.7771%" height="15" fill="rgb(233,195,10)" fg:x="49310" fg:w="5122"/><text x="36.6130%" y="351.50">_ZN5..</text></g><g><title>std::time::Instant::now (60 samples, 0.04%)</title><rect x="40.0959%" y="325" width="0.0442%" height="15" fill="rgb(254,105,3)" fg:x="54372" fg:w="60"/><text x="40.3459%" y="335.50"></text></g><g><title>std::sys::unix::time::Instant::now (60 samples, 0.04%)</title><rect x="40.0959%" y="309" width="0.0442%" height="15" fill="rgb(221,225,9)" fg:x="54372" fg:w="60"/><text x="40.3459%" y="319.50"></text></g><g><title>component_utils::set_waker (72 samples, 0.05%)</title><rect x="40.1401%" y="341" width="0.0531%" height="15" fill="rgb(224,227,45)" fg:x="54432" fg:w="72"/><text x="40.3901%" y="351.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (520 samples, 0.38%)</title><rect x="40.1954%" y="341" width="0.3835%" height="15" fill="rgb(229,198,43)" fg:x="54507" fg:w="520"/><text x="40.4454%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (95 samples, 0.07%)</title><rect x="40.5088%" y="325" width="0.0701%" height="15" fill="rgb(206,209,35)" fg:x="54932" fg:w="95"/><text x="40.7588%" y="335.50"></text></g><g><title>&lt;onion::behaviour::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (7,058 samples, 5.20%)</title><rect x="35.3748%" y="373" width="5.2048%" height="15" fill="rgb(245,195,53)" fg:x="47970" fg:w="7058"/><text x="35.6248%" y="383.50">&lt;onion..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (7,024 samples, 5.18%)</title><rect x="35.3999%" y="357" width="5.1798%" height="15" fill="rgb(240,92,26)" fg:x="48004" fg:w="7024"/><text x="35.6499%" y="367.50">&lt;futur..</text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h6a47d2474e678731E.llvm.5862359684729327525 (194 samples, 0.14%)</title><rect x="40.6571%" y="341" width="0.1431%" height="15" fill="rgb(207,40,23)" fg:x="55133" fg:w="194"/><text x="40.9071%" y="351.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (333 samples, 0.25%)</title><rect x="40.6504%" y="357" width="0.2456%" height="15" fill="rgb(223,111,35)" fg:x="55124" fg:w="333"/><text x="40.9004%" y="367.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (130 samples, 0.10%)</title><rect x="40.8001%" y="341" width="0.0959%" height="15" fill="rgb(229,147,28)" fg:x="55327" fg:w="130"/><text x="41.0501%" y="351.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (238 samples, 0.18%)</title><rect x="40.8960%" y="357" width="0.1755%" height="15" fill="rgb(211,29,28)" fg:x="55457" fg:w="238"/><text x="41.1460%" y="367.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (204 samples, 0.15%)</title><rect x="40.9211%" y="341" width="0.1504%" height="15" fill="rgb(228,72,33)" fg:x="55491" fg:w="204"/><text x="41.1711%" y="351.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (151 samples, 0.11%)</title><rect x="41.2522%" y="325" width="0.1114%" height="15" fill="rgb(205,214,31)" fg:x="55940" fg:w="151"/><text x="41.5022%" y="335.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (398 samples, 0.29%)</title><rect x="41.0715%" y="357" width="0.2935%" height="15" fill="rgb(224,111,15)" fg:x="55695" fg:w="398"/><text x="41.3215%" y="367.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (384 samples, 0.28%)</title><rect x="41.0818%" y="341" width="0.2832%" height="15" fill="rgb(253,21,26)" fg:x="55709" fg:w="384"/><text x="41.3318%" y="351.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h24ca140c5ec37d4dE.llvm.10237326233175702385 (9,512 samples, 7.01%)</title><rect x="34.3874%" y="389" width="7.0145%" height="15" fill="rgb(245,139,43)" fg:x="46631" fg:w="9512"/><text x="34.6374%" y="399.50">_ZN12libp..</text></g><g><title>libp2p_swarm::connection::pool::Pool&lt;THandler&gt;::poll (1,104 samples, 0.81%)</title><rect x="40.5877%" y="373" width="0.8141%" height="15" fill="rgb(252,170,7)" fg:x="55039" fg:w="1104"/><text x="40.8377%" y="383.50"></text></g><g><title>libp2p_swarm::connection::pool::ExecSwitch::advance_local (50 samples, 0.04%)</title><rect x="41.3650%" y="357" width="0.0369%" height="15" fill="rgb(231,118,14)" fg:x="56093" fg:w="50"/><text x="41.6150%" y="367.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h19f6222be6e571f9E.llvm.5862359684729327525 (21 samples, 0.02%)</title><rect x="41.4019%" y="389" width="0.0155%" height="15" fill="rgb(238,83,0)" fg:x="56143" fg:w="21"/><text x="41.6519%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h2c3342478a7ab161E.llvm.5862359684729327525 (16 samples, 0.01%)</title><rect x="41.4174%" y="389" width="0.0118%" height="15" fill="rgb(221,39,39)" fg:x="56164" fg:w="16"/><text x="41.6674%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h6a47d2474e678731E.llvm.5862359684729327525 (14 samples, 0.01%)</title><rect x="41.4292%" y="389" width="0.0103%" height="15" fill="rgb(222,119,46)" fg:x="56180" fg:w="14"/><text x="41.6792%" y="399.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h2848526d34941c86E.llvm.7000205107543422316 (18 samples, 0.01%)</title><rect x="41.4395%" y="389" width="0.0133%" height="15" fill="rgb(222,165,49)" fg:x="56194" fg:w="18"/><text x="41.6895%" y="399.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (66 samples, 0.05%)</title><rect x="41.4542%" y="389" width="0.0487%" height="15" fill="rgb(219,113,52)" fg:x="56214" fg:w="66"/><text x="41.7042%" y="399.50"></text></g><g><title>&lt;aes::autodetect::Aes256 as cipher::block::BlockEncrypt&gt;::encrypt_with_backend::inner (34 samples, 0.03%)</title><rect x="41.5110%" y="261" width="0.0251%" height="15" fill="rgb(214,7,15)" fg:x="56291" fg:w="34"/><text x="41.7610%" y="271.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as universal_hash::UniversalHash&gt;::update_with_backend (53 samples, 0.04%)</title><rect x="41.5464%" y="245" width="0.0391%" height="15" fill="rgb(235,32,4)" fg:x="56339" fg:w="53"/><text x="41.7964%" y="255.50"></text></g><g><title>polyval::backend::clmul::Polyval::mul (30 samples, 0.02%)</title><rect x="41.5634%" y="229" width="0.0221%" height="15" fill="rgb(238,90,54)" fg:x="56362" fg:w="30"/><text x="41.8134%" y="239.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (104 samples, 0.08%)</title><rect x="41.5110%" y="277" width="0.0767%" height="15" fill="rgb(213,208,19)" fg:x="56291" fg:w="104"/><text x="41.7610%" y="287.50"></text></g><g><title>aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt;::compute_tag (70 samples, 0.05%)</title><rect x="41.5361%" y="261" width="0.0516%" height="15" fill="rgb(233,156,4)" fg:x="56325" fg:w="70"/><text x="41.7861%" y="271.50"></text></g><g><title>&lt;aes::ni::Aes256Enc as crypto_common::KeyInit&gt;::new (107 samples, 0.08%)</title><rect x="41.5936%" y="261" width="0.0789%" height="15" fill="rgb(207,194,5)" fg:x="56403" fg:w="107"/><text x="41.8436%" y="271.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aeskeygenassist_si128 (45 samples, 0.03%)</title><rect x="41.6393%" y="245" width="0.0332%" height="15" fill="rgb(206,111,30)" fg:x="56465" fg:w="45"/><text x="41.8893%" y="255.50"></text></g><g><title>[libc.so.6] (64 samples, 0.05%)</title><rect x="41.6725%" y="261" width="0.0472%" height="15" fill="rgb(243,70,54)" fg:x="56510" fg:w="64"/><text x="41.9225%" y="271.50"></text></g><g><title>_ZN66_$LT$aes..autodetect..Aes256$u20$as$u20$crypto_common..KeyInit$GT$3new17h444f744b6f5d3382E.llvm.5862359684729327525 (187 samples, 0.14%)</title><rect x="41.5877%" y="277" width="0.1379%" height="15" fill="rgb(242,28,8)" fg:x="56395" fg:w="187"/><text x="41.8377%" y="287.50"></text></g><g><title>futures_task::waker::clone_arc_raw (14 samples, 0.01%)</title><rect x="41.8355%" y="197" width="0.0103%" height="15" fill="rgb(219,106,18)" fg:x="56731" fg:w="14"/><text x="42.0855%" y="207.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (237 samples, 0.17%)</title><rect x="41.7256%" y="277" width="0.1748%" height="15" fill="rgb(244,222,10)" fg:x="56582" fg:w="237"/><text x="41.9756%" y="287.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (237 samples, 0.17%)</title><rect x="41.7256%" y="261" width="0.1748%" height="15" fill="rgb(236,179,52)" fg:x="56582" fg:w="237"/><text x="41.9756%" y="271.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (237 samples, 0.17%)</title><rect x="41.7256%" y="245" width="0.1748%" height="15" fill="rgb(213,23,39)" fg:x="56582" fg:w="237"/><text x="41.9756%" y="255.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (237 samples, 0.17%)</title><rect x="41.7256%" y="229" width="0.1748%" height="15" fill="rgb(238,48,10)" fg:x="56582" fg:w="237"/><text x="41.9756%" y="239.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (237 samples, 0.17%)</title><rect x="41.7256%" y="213" width="0.1748%" height="15" fill="rgb(251,196,23)" fg:x="56582" fg:w="237"/><text x="41.9756%" y="223.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (74 samples, 0.05%)</title><rect x="41.8458%" y="197" width="0.0546%" height="15" fill="rgb(250,152,24)" fg:x="56745" fg:w="74"/><text x="42.0958%" y="207.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (42 samples, 0.03%)</title><rect x="41.9785%" y="181" width="0.0310%" height="15" fill="rgb(209,150,17)" fg:x="56925" fg:w="42"/><text x="42.2285%" y="191.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (31 samples, 0.02%)</title><rect x="42.0552%" y="149" width="0.0229%" height="15" fill="rgb(234,202,34)" fg:x="57029" fg:w="31"/><text x="42.3052%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (64 samples, 0.05%)</title><rect x="42.0936%" y="133" width="0.0472%" height="15" fill="rgb(253,148,53)" fg:x="57081" fg:w="64"/><text x="42.3436%" y="143.50"></text></g><g><title>tokio::runtime::context::with_scheduler (61 samples, 0.04%)</title><rect x="42.0958%" y="117" width="0.0450%" height="15" fill="rgb(218,129,16)" fg:x="57084" fg:w="61"/><text x="42.3458%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (23 samples, 0.02%)</title><rect x="42.1238%" y="101" width="0.0170%" height="15" fill="rgb(216,85,19)" fg:x="57122" fg:w="23"/><text x="42.3738%" y="111.50"></text></g><g><title>tokio::runtime::task::raw::schedule (28 samples, 0.02%)</title><rect x="42.1408%" y="133" width="0.0206%" height="15" fill="rgb(235,228,7)" fg:x="57145" fg:w="28"/><text x="42.3908%" y="143.50"></text></g><g><title>futures_task::waker::wake_arc_raw (218 samples, 0.16%)</title><rect x="42.0095%" y="181" width="0.1608%" height="15" fill="rgb(245,175,0)" fg:x="56967" fg:w="218"/><text x="42.2595%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (206 samples, 0.15%)</title><rect x="42.0184%" y="165" width="0.1519%" height="15" fill="rgb(208,168,36)" fg:x="56979" fg:w="206"/><text x="42.2684%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (125 samples, 0.09%)</title><rect x="42.0781%" y="149" width="0.0922%" height="15" fill="rgb(246,171,24)" fg:x="57060" fg:w="125"/><text x="42.3281%" y="159.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (340 samples, 0.25%)</title><rect x="41.9299%" y="197" width="0.2507%" height="15" fill="rgb(215,142,24)" fg:x="56859" fg:w="340"/><text x="42.1799%" y="207.50"></text></g><g><title>malloc (14 samples, 0.01%)</title><rect x="42.1703%" y="181" width="0.0103%" height="15" fill="rgb(250,187,7)" fg:x="57185" fg:w="14"/><text x="42.4203%" y="191.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (935 samples, 0.69%)</title><rect x="41.5088%" y="373" width="0.6895%" height="15" fill="rgb(228,66,33)" fg:x="56288" fg:w="935"/><text x="41.7588%" y="383.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef0c12bb09c77e1fE.llvm.10503928954504469153 (932 samples, 0.69%)</title><rect x="41.5110%" y="357" width="0.6873%" height="15" fill="rgb(234,215,21)" fg:x="56291" fg:w="932"/><text x="41.7610%" y="367.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (932 samples, 0.69%)</title><rect x="41.5110%" y="341" width="0.6873%" height="15" fill="rgb(222,191,20)" fg:x="56291" fg:w="932"/><text x="41.7610%" y="351.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (932 samples, 0.69%)</title><rect x="41.5110%" y="325" width="0.6873%" height="15" fill="rgb(245,79,54)" fg:x="56291" fg:w="932"/><text x="41.7610%" y="335.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (932 samples, 0.69%)</title><rect x="41.5110%" y="309" width="0.6873%" height="15" fill="rgb(240,10,37)" fg:x="56291" fg:w="932"/><text x="41.7610%" y="319.50"></text></g><g><title>&lt;onion::behaviour::EncryptedStream as futures_core::stream::Stream&gt;::poll_next (932 samples, 0.69%)</title><rect x="41.5110%" y="293" width="0.6873%" height="15" fill="rgb(214,192,32)" fg:x="56291" fg:w="932"/><text x="41.7610%" y="303.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (404 samples, 0.30%)</title><rect x="41.9004%" y="277" width="0.2979%" height="15" fill="rgb(209,36,54)" fg:x="56819" fg:w="404"/><text x="42.1504%" y="287.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (404 samples, 0.30%)</title><rect x="41.9004%" y="261" width="0.2979%" height="15" fill="rgb(220,10,11)" fg:x="56819" fg:w="404"/><text x="42.1504%" y="271.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (404 samples, 0.30%)</title><rect x="41.9004%" y="245" width="0.2979%" height="15" fill="rgb(221,106,17)" fg:x="56819" fg:w="404"/><text x="42.1504%" y="255.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (404 samples, 0.30%)</title><rect x="41.9004%" y="229" width="0.2979%" height="15" fill="rgb(251,142,44)" fg:x="56819" fg:w="404"/><text x="42.1504%" y="239.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (404 samples, 0.30%)</title><rect x="41.9004%" y="213" width="0.2979%" height="15" fill="rgb(238,13,15)" fg:x="56819" fg:w="404"/><text x="42.1504%" y="223.50"></text></g><g><title>malloc (24 samples, 0.02%)</title><rect x="42.1806%" y="197" width="0.0177%" height="15" fill="rgb(208,107,27)" fg:x="57199" fg:w="24"/><text x="42.4306%" y="207.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef173bb298b53411E.llvm.3258444953314870767 (944 samples, 0.70%)</title><rect x="41.5036%" y="389" width="0.6961%" height="15" fill="rgb(205,136,37)" fg:x="56281" fg:w="944"/><text x="41.7536%" y="399.50"></text></g><g><title>_ZN66_$LT$aes..autodetect..Aes256$u20$as$u20$crypto_common..KeyInit$GT$3new17h444f744b6f5d3382E.llvm.5862359684729327525 (25 samples, 0.02%)</title><rect x="42.2153%" y="389" width="0.0184%" height="15" fill="rgb(250,205,27)" fg:x="57246" fg:w="25"/><text x="42.4653%" y="399.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h40007bbf6e9cbb6fE.llvm.7163819848405301694 (25 samples, 0.02%)</title><rect x="42.2411%" y="389" width="0.0184%" height="15" fill="rgb(210,80,43)" fg:x="57281" fg:w="25"/><text x="42.4911%" y="399.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (122 samples, 0.09%)</title><rect x="42.2595%" y="389" width="0.0900%" height="15" fill="rgb(247,160,36)" fg:x="57306" fg:w="122"/><text x="42.5095%" y="399.50"></text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (15 samples, 0.01%)</title><rect x="42.3384%" y="373" width="0.0111%" height="15" fill="rgb(234,13,49)" fg:x="57413" fg:w="15"/><text x="42.5884%" y="383.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h3a010447c24887d0E.llvm.18240207325067885162 (111 samples, 0.08%)</title><rect x="42.3495%" y="389" width="0.0819%" height="15" fill="rgb(234,122,0)" fg:x="57428" fg:w="111"/><text x="42.5995%" y="399.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.01%)</title><rect x="42.4409%" y="389" width="0.0111%" height="15" fill="rgb(207,146,38)" fg:x="57552" fg:w="15"/><text x="42.6909%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (190 samples, 0.14%)</title><rect x="42.4734%" y="389" width="0.1401%" height="15" fill="rgb(207,177,25)" fg:x="57596" fg:w="190"/><text x="42.7234%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (15 samples, 0.01%)</title><rect x="42.6135%" y="389" width="0.0111%" height="15" fill="rgb(211,178,42)" fg:x="57786" fg:w="15"/><text x="42.8635%" y="399.50"></text></g><g><title>cfree (122 samples, 0.09%)</title><rect x="42.6275%" y="389" width="0.0900%" height="15" fill="rgb(230,69,54)" fg:x="57805" fg:w="122"/><text x="42.8775%" y="399.50"></text></g><g><title>component_utils::set_waker (94 samples, 0.07%)</title><rect x="42.7263%" y="389" width="0.0693%" height="15" fill="rgb(214,135,41)" fg:x="57939" fg:w="94"/><text x="42.9763%" y="399.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (15 samples, 0.01%)</title><rect x="42.7956%" y="389" width="0.0111%" height="15" fill="rgb(237,67,25)" fg:x="58033" fg:w="15"/><text x="43.0456%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.03%)</title><rect x="42.8207%" y="389" width="0.0332%" height="15" fill="rgb(222,189,50)" fg:x="58067" fg:w="45"/><text x="43.0707%" y="399.50"></text></g><g><title>futures_bounded::futures_map::FuturesMap&lt;ID,O&gt;::poll_unpin (41 samples, 0.03%)</title><rect x="42.8804%" y="389" width="0.0302%" height="15" fill="rgb(245,148,34)" fg:x="58148" fg:w="41"/><text x="43.1304%" y="399.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (123 samples, 0.09%)</title><rect x="42.9121%" y="389" width="0.0907%" height="15" fill="rgb(222,29,6)" fg:x="58191" fg:w="123"/><text x="43.1621%" y="399.50"></text></g><g><title>futures_task::waker::wake_arc_raw (129 samples, 0.10%)</title><rect x="43.0080%" y="389" width="0.0951%" height="15" fill="rgb(221,189,43)" fg:x="58321" fg:w="129"/><text x="43.2580%" y="399.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (30 samples, 0.02%)</title><rect x="43.1053%" y="389" width="0.0221%" height="15" fill="rgb(207,36,27)" fg:x="58453" fg:w="30"/><text x="43.3553%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (118 samples, 0.09%)</title><rect x="43.1289%" y="389" width="0.0870%" height="15" fill="rgb(217,90,24)" fg:x="58485" fg:w="118"/><text x="43.3789%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (70 samples, 0.05%)</title><rect x="43.2160%" y="389" width="0.0516%" height="15" fill="rgb(224,66,35)" fg:x="58603" fg:w="70"/><text x="43.4660%" y="399.50"></text></g><g><title>libp2p_kad::jobs::AddProviderJob::poll (43 samples, 0.03%)</title><rect x="43.2676%" y="389" width="0.0317%" height="15" fill="rgb(221,13,50)" fg:x="58673" fg:w="43"/><text x="43.5176%" y="399.50"></text></g><g><title>libp2p_kad::query::QueryPool&lt;TInner&gt;::poll (15 samples, 0.01%)</title><rect x="43.3030%" y="389" width="0.0111%" height="15" fill="rgb(236,68,49)" fg:x="58721" fg:w="15"/><text x="43.5530%" y="399.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (67 samples, 0.05%)</title><rect x="43.3148%" y="389" width="0.0494%" height="15" fill="rgb(229,146,28)" fg:x="58737" fg:w="67"/><text x="43.5648%" y="399.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2,257 samples, 1.66%)</title><rect x="44.2867%" y="373" width="1.6644%" height="15" fill="rgb(225,31,38)" fg:x="60055" fg:w="2257"/><text x="44.5367%" y="383.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1,793 samples, 1.32%)</title><rect x="44.6289%" y="357" width="1.3222%" height="15" fill="rgb(250,208,3)" fg:x="60519" fg:w="1793"/><text x="44.8789%" y="367.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll (254 samples, 0.19%)</title><rect x="45.9511%" y="373" width="0.1873%" height="15" fill="rgb(246,54,23)" fg:x="62312" fg:w="254"/><text x="46.2011%" y="383.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (149 samples, 0.11%)</title><rect x="46.2461%" y="325" width="0.1099%" height="15" fill="rgb(243,76,11)" fg:x="62712" fg:w="149"/><text x="46.4961%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (104 samples, 0.08%)</title><rect x="46.3560%" y="325" width="0.0767%" height="15" fill="rgb(245,21,50)" fg:x="62861" fg:w="104"/><text x="46.6060%" y="335.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (324 samples, 0.24%)</title><rect x="46.5411%" y="309" width="0.2389%" height="15" fill="rgb(228,9,43)" fg:x="63112" fg:w="324"/><text x="46.7911%" y="319.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (316 samples, 0.23%)</title><rect x="46.5470%" y="293" width="0.2330%" height="15" fill="rgb(208,100,47)" fg:x="63120" fg:w="316"/><text x="46.7970%" y="303.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (251 samples, 0.19%)</title><rect x="46.5949%" y="277" width="0.1851%" height="15" fill="rgb(232,26,8)" fg:x="63185" fg:w="251"/><text x="46.8449%" y="287.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (42 samples, 0.03%)</title><rect x="46.9002%" y="245" width="0.0310%" height="15" fill="rgb(216,166,38)" fg:x="63599" fg:w="42"/><text x="47.1502%" y="255.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (521 samples, 0.38%)</title><rect x="46.9312%" y="245" width="0.3842%" height="15" fill="rgb(251,202,51)" fg:x="63641" fg:w="521"/><text x="47.1812%" y="255.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (455 samples, 0.34%)</title><rect x="46.9798%" y="229" width="0.3355%" height="15" fill="rgb(254,216,34)" fg:x="63707" fg:w="455"/><text x="47.2298%" y="239.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (412 samples, 0.30%)</title><rect x="47.0115%" y="213" width="0.3038%" height="15" fill="rgb(251,32,27)" fg:x="63750" fg:w="412"/><text x="47.2615%" y="223.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (381 samples, 0.28%)</title><rect x="47.0344%" y="197" width="0.2810%" height="15" fill="rgb(208,127,28)" fg:x="63781" fg:w="381"/><text x="47.2844%" y="207.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (310 samples, 0.23%)</title><rect x="47.0868%" y="181" width="0.2286%" height="15" fill="rgb(224,137,22)" fg:x="63852" fg:w="310"/><text x="47.3368%" y="191.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (4,334 samples, 3.20%)</title><rect x="46.8102%" y="293" width="3.1960%" height="15" fill="rgb(254,70,32)" fg:x="63477" fg:w="4334"/><text x="47.0602%" y="303.50">&lt;mu..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (4,293 samples, 3.17%)</title><rect x="46.8405%" y="277" width="3.1658%" height="15" fill="rgb(229,75,37)" fg:x="63518" fg:w="4293"/><text x="47.0905%" y="287.50">&lt;li..</text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (4,258 samples, 3.14%)</title><rect x="46.8663%" y="261" width="3.1400%" height="15" fill="rgb(252,64,23)" fg:x="63553" fg:w="4258"/><text x="47.1163%" y="271.50">&lt;as..</text></g><g><title>[libc.so.6] (3,649 samples, 2.69%)</title><rect x="47.3154%" y="245" width="2.6909%" height="15" fill="rgb(232,162,48)" fg:x="64162" fg:w="3649"/><text x="47.5654%" y="255.50">[l..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,376 samples, 3.23%)</title><rect x="46.7800%" y="309" width="3.2270%" height="15" fill="rgb(246,160,12)" fg:x="63436" fg:w="4376"/><text x="47.0300%" y="319.50">&lt;ya..</text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (15 samples, 0.01%)</title><rect x="50.0328%" y="277" width="0.0111%" height="15" fill="rgb(247,166,0)" fg:x="67847" fg:w="15"/><text x="50.2828%" y="287.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (30 samples, 0.02%)</title><rect x="50.0277%" y="293" width="0.0221%" height="15" fill="rgb(249,219,21)" fg:x="67840" fg:w="30"/><text x="50.2777%" y="303.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_flush (87 samples, 0.06%)</title><rect x="50.0070%" y="309" width="0.0642%" height="15" fill="rgb(205,209,3)" fg:x="67812" fg:w="87"/><text x="50.2570%" y="319.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (29 samples, 0.02%)</title><rect x="50.0498%" y="293" width="0.0214%" height="15" fill="rgb(243,44,1)" fg:x="67870" fg:w="29"/><text x="50.2998%" y="303.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (36 samples, 0.03%)</title><rect x="50.0712%" y="309" width="0.0265%" height="15" fill="rgb(206,159,16)" fg:x="67899" fg:w="36"/><text x="50.3212%" y="319.50"></text></g><g><title>[libc.so.6] (649 samples, 0.48%)</title><rect x="50.0977%" y="309" width="0.4786%" height="15" fill="rgb(244,77,30)" fg:x="67935" fg:w="649"/><text x="50.3477%" y="319.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (6,022 samples, 4.44%)</title><rect x="46.1384%" y="373" width="4.4408%" height="15" fill="rgb(218,69,12)" fg:x="62566" fg:w="6022"/><text x="46.3884%" y="383.50">&lt;libp..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (6,005 samples, 4.43%)</title><rect x="46.1510%" y="357" width="4.4283%" height="15" fill="rgb(212,87,7)" fg:x="62583" fg:w="6005"/><text x="46.4010%" y="367.50">&lt;libp..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (5,982 samples, 4.41%)</title><rect x="46.1679%" y="341" width="4.4113%" height="15" fill="rgb(245,114,25)" fg:x="62606" fg:w="5982"/><text x="46.4179%" y="351.50">&lt;libp..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (5,623 samples, 4.15%)</title><rect x="46.4327%" y="325" width="4.1466%" height="15" fill="rgb(210,61,42)" fg:x="62965" fg:w="5623"/><text x="46.6827%" y="335.50">yamux..</text></g><g><title>_ZN15futures_channel4mpsc5queue14Queue$LT$T$GT$8pop_spin17hcc827656e79b5768E.llvm.5862359684729327525 (83 samples, 0.06%)</title><rect x="54.2576%" y="245" width="0.0612%" height="15" fill="rgb(211,52,33)" fg:x="73576" fg:w="83"/><text x="54.5076%" y="255.50"></text></g><g><title>__rdl_dealloc (25 samples, 0.02%)</title><rect x="54.3188%" y="245" width="0.0184%" height="15" fill="rgb(234,58,33)" fg:x="73659" fg:w="25"/><text x="54.5688%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (25 samples, 0.02%)</title><rect x="54.3188%" y="229" width="0.0184%" height="15" fill="rgb(220,115,36)" fg:x="73659" fg:w="25"/><text x="54.5688%" y="239.50"></text></g><g><title>__rust_dealloc (105 samples, 0.08%)</title><rect x="54.3372%" y="245" width="0.0774%" height="15" fill="rgb(243,153,54)" fg:x="73684" fg:w="105"/><text x="54.5872%" y="255.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h19f6222be6e571f9E.llvm.5862359684729327525 (1,109 samples, 0.82%)</title><rect x="53.8564%" y="261" width="0.8178%" height="15" fill="rgb(251,47,18)" fg:x="73032" fg:w="1109"/><text x="54.1064%" y="271.50"></text></g><g><title>cfree (352 samples, 0.26%)</title><rect x="54.4147%" y="245" width="0.2596%" height="15" fill="rgb(242,102,42)" fg:x="73789" fg:w="352"/><text x="54.6647%" y="255.50"></text></g><g><title>[libc.so.6] (80 samples, 0.06%)</title><rect x="54.6152%" y="229" width="0.0590%" height="15" fill="rgb(234,31,38)" fg:x="74061" fg:w="80"/><text x="54.8652%" y="239.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (1,709 samples, 1.26%)</title><rect x="53.6802%" y="293" width="1.2603%" height="15" fill="rgb(221,117,51)" fg:x="72793" fg:w="1709"/><text x="53.9302%" y="303.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,541 samples, 1.14%)</title><rect x="53.8041%" y="277" width="1.1364%" height="15" fill="rgb(212,20,18)" fg:x="72961" fg:w="1541"/><text x="54.0541%" y="287.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (361 samples, 0.27%)</title><rect x="54.6742%" y="261" width="0.2662%" height="15" fill="rgb(245,133,36)" fg:x="74141" fg:w="361"/><text x="54.9242%" y="271.50"></text></g><g><title>futures_task::waker::clone_arc_raw (195 samples, 0.14%)</title><rect x="54.7967%" y="245" width="0.1438%" height="15" fill="rgb(212,6,19)" fg:x="74307" fg:w="195"/><text x="55.0467%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (92 samples, 0.07%)</title><rect x="55.0120%" y="277" width="0.0678%" height="15" fill="rgb(218,1,36)" fg:x="74599" fg:w="92"/><text x="55.2620%" y="287.50"></text></g><g><title>_ZN12futures_util6stream17futures_unordered27FuturesUnordered$LT$Fut$GT$12release_task17h5131f515d5f6a695E.llvm.4476138278220008101 (261 samples, 0.19%)</title><rect x="54.9405%" y="293" width="0.1925%" height="15" fill="rgb(246,84,54)" fg:x="74502" fg:w="261"/><text x="55.1905%" y="303.50"></text></g><g><title>cfree (72 samples, 0.05%)</title><rect x="55.0798%" y="277" width="0.0531%" height="15" fill="rgb(242,110,6)" fg:x="74691" fg:w="72"/><text x="55.3298%" y="287.50"></text></g><g><title>[libc.so.6] (26 samples, 0.02%)</title><rect x="55.1137%" y="261" width="0.0192%" height="15" fill="rgb(214,47,5)" fg:x="74737" fg:w="26"/><text x="55.3637%" y="271.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (622 samples, 0.46%)</title><rect x="55.1329%" y="293" width="0.4587%" height="15" fill="rgb(218,159,25)" fg:x="74763" fg:w="622"/><text x="55.3829%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (74 samples, 0.05%)</title><rect x="55.5370%" y="277" width="0.0546%" height="15" fill="rgb(215,211,28)" fg:x="75311" fg:w="74"/><text x="55.7870%" y="287.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (4,016 samples, 2.96%)</title><rect x="52.6507%" y="309" width="2.9615%" height="15" fill="rgb(238,59,32)" fg:x="71397" fg:w="4016"/><text x="52.9007%" y="319.50">&lt;fu..</text></g><g><title>tokio::runtime::task::waker::wake_by_ref (28 samples, 0.02%)</title><rect x="55.5916%" y="293" width="0.0206%" height="15" fill="rgb(226,82,3)" fg:x="75385" fg:w="28"/><text x="55.8416%" y="303.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (4,428 samples, 3.27%)</title><rect x="52.5961%" y="325" width="3.2654%" height="15" fill="rgb(240,164,32)" fg:x="71323" fg:w="4428"/><text x="52.8461%" y="335.50">&lt;fu..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (338 samples, 0.25%)</title><rect x="55.6123%" y="309" width="0.2493%" height="15" fill="rgb(232,46,7)" fg:x="75413" fg:w="338"/><text x="55.8623%" y="319.50"></text></g><g><title>malloc (139 samples, 0.10%)</title><rect x="55.7590%" y="293" width="0.1025%" height="15" fill="rgb(229,129,53)" fg:x="75612" fg:w="139"/><text x="56.0090%" y="303.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="56.8408%" y="245" width="0.0391%" height="15" fill="rgb(234,188,29)" fg:x="77079" fg:w="53"/><text x="57.0908%" y="255.50"></text></g><g><title>__rdl_alloc (20 samples, 0.01%)</title><rect x="56.9839%" y="229" width="0.0147%" height="15" fill="rgb(246,141,4)" fg:x="77273" fg:w="20"/><text x="57.2339%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.01%)</title><rect x="56.9868%" y="213" width="0.0118%" height="15" fill="rgb(229,23,39)" fg:x="77277" fg:w="16"/><text x="57.2368%" y="223.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (14 samples, 0.01%)</title><rect x="57.0060%" y="229" width="0.0103%" height="15" fill="rgb(206,12,3)" fg:x="77303" fg:w="14"/><text x="57.2560%" y="239.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (409 samples, 0.30%)</title><rect x="56.8799%" y="245" width="0.3016%" height="15" fill="rgb(252,226,20)" fg:x="77132" fg:w="409"/><text x="57.1299%" y="255.50"></text></g><g><title>malloc (224 samples, 0.17%)</title><rect x="57.0163%" y="229" width="0.1652%" height="15" fill="rgb(216,123,35)" fg:x="77317" fg:w="224"/><text x="57.2663%" y="239.50"></text></g><g><title>__libc_calloc (942 samples, 0.69%)</title><rect x="57.1948%" y="229" width="0.6947%" height="15" fill="rgb(212,68,40)" fg:x="77559" fg:w="942"/><text x="57.4448%" y="239.50"></text></g><g><title>[libc.so.6] (292 samples, 0.22%)</title><rect x="57.6741%" y="213" width="0.2153%" height="15" fill="rgb(254,125,32)" fg:x="78209" fg:w="292"/><text x="57.9241%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (18 samples, 0.01%)</title><rect x="57.8895%" y="229" width="0.0133%" height="15" fill="rgb(253,97,22)" fg:x="78501" fg:w="18"/><text x="58.1395%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (18 samples, 0.01%)</title><rect x="57.8895%" y="213" width="0.0133%" height="15" fill="rgb(241,101,14)" fg:x="78501" fg:w="18"/><text x="58.1395%" y="223.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (1,102 samples, 0.81%)</title><rect x="57.1815%" y="245" width="0.8127%" height="15" fill="rgb(238,103,29)" fg:x="77541" fg:w="1102"/><text x="57.4315%" y="255.50"></text></g><g><title>__rust_alloc_zeroed (124 samples, 0.09%)</title><rect x="57.9027%" y="229" width="0.0914%" height="15" fill="rgb(233,195,47)" fg:x="78519" fg:w="124"/><text x="58.1527%" y="239.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (45 samples, 0.03%)</title><rect x="57.9942%" y="245" width="0.0332%" height="15" fill="rgb(246,218,30)" fg:x="78643" fg:w="45"/><text x="58.2442%" y="255.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (463 samples, 0.34%)</title><rect x="58.0274%" y="245" width="0.3414%" height="15" fill="rgb(219,145,47)" fg:x="78688" fg:w="463"/><text x="58.2774%" y="255.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (286 samples, 0.21%)</title><rect x="58.1579%" y="229" width="0.2109%" height="15" fill="rgb(243,12,26)" fg:x="78865" fg:w="286"/><text x="58.4079%" y="239.50"></text></g><g><title>&lt;ring::aead::Tag as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (136 samples, 0.10%)</title><rect x="58.4971%" y="213" width="0.1003%" height="15" fill="rgb(214,87,16)" fg:x="79325" fg:w="136"/><text x="58.7471%" y="223.50"></text></g><g><title>[libc.so.6] (38 samples, 0.03%)</title><rect x="58.5974%" y="213" width="0.0280%" height="15" fill="rgb(208,99,42)" fg:x="79461" fg:w="38"/><text x="58.8474%" y="223.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (3,152 samples, 2.32%)</title><rect x="56.6380%" y="261" width="2.3244%" height="15" fill="rgb(253,99,2)" fg:x="76804" fg:w="3152"/><text x="56.8880%" y="271.50">&lt;..</text></g><g><title>snow::transportstate::TransportState::read_message (805 samples, 0.59%)</title><rect x="58.3688%" y="245" width="0.5936%" height="15" fill="rgb(220,168,23)" fg:x="79151" fg:w="805"/><text x="58.6188%" y="255.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (700 samples, 0.52%)</title><rect x="58.4462%" y="229" width="0.5162%" height="15" fill="rgb(242,38,24)" fg:x="79256" fg:w="700"/><text x="58.6962%" y="239.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (457 samples, 0.34%)</title><rect x="58.6254%" y="213" width="0.3370%" height="15" fill="rgb(225,182,9)" fg:x="79499" fg:w="457"/><text x="58.8754%" y="223.50"></text></g><g><title>ring_core_0_17_5_CRYPTO_memcmp (200 samples, 0.15%)</title><rect x="58.8149%" y="197" width="0.1475%" height="15" fill="rgb(243,178,37)" fg:x="79756" fg:w="200"/><text x="59.0649%" y="207.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (109 samples, 0.08%)</title><rect x="59.1394%" y="229" width="0.0804%" height="15" fill="rgb(232,139,19)" fg:x="80196" fg:w="109"/><text x="59.3894%" y="239.50"></text></g><g><title>[libc.so.6] (173 samples, 0.13%)</title><rect x="59.5774%" y="117" width="0.1276%" height="15" fill="rgb(225,201,24)" fg:x="80790" fg:w="173"/><text x="59.8274%" y="127.50"></text></g><g><title>recv (492 samples, 0.36%)</title><rect x="59.3769%" y="133" width="0.3628%" height="15" fill="rgb(221,47,46)" fg:x="80518" fg:w="492"/><text x="59.6269%" y="143.50"></text></g><g><title>[unknown] (47 samples, 0.03%)</title><rect x="59.7050%" y="117" width="0.0347%" height="15" fill="rgb(249,23,13)" fg:x="80963" fg:w="47"/><text x="59.9550%" y="127.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (514 samples, 0.38%)</title><rect x="59.3629%" y="213" width="0.3790%" height="15" fill="rgb(219,9,5)" fg:x="80499" fg:w="514"/><text x="59.6129%" y="223.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (509 samples, 0.38%)</title><rect x="59.3665%" y="197" width="0.3754%" height="15" fill="rgb(254,171,16)" fg:x="80504" fg:w="509"/><text x="59.6165%" y="207.50"></text></g><g><title>std::sys_common::net::TcpStream::read (500 samples, 0.37%)</title><rect x="59.3732%" y="181" width="0.3687%" height="15" fill="rgb(230,171,20)" fg:x="80513" fg:w="500"/><text x="59.6232%" y="191.50"></text></g><g><title>std::sys::unix::net::Socket::read (500 samples, 0.37%)</title><rect x="59.3732%" y="165" width="0.3687%" height="15" fill="rgb(210,71,41)" fg:x="80513" fg:w="500"/><text x="59.6232%" y="175.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (497 samples, 0.37%)</title><rect x="59.3754%" y="149" width="0.3665%" height="15" fill="rgb(206,173,20)" fg:x="80516" fg:w="497"/><text x="59.6254%" y="159.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (2,148 samples, 1.58%)</title><rect x="58.9624%" y="261" width="1.5840%" height="15" fill="rgb(233,88,34)" fg:x="79956" fg:w="2148"/><text x="59.2124%" y="271.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (2,034 samples, 1.50%)</title><rect x="59.0465%" y="245" width="1.4999%" height="15" fill="rgb(223,209,46)" fg:x="80070" fg:w="2034"/><text x="59.2965%" y="255.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1,799 samples, 1.33%)</title><rect x="59.2198%" y="229" width="1.3266%" height="15" fill="rgb(250,43,18)" fg:x="80305" fg:w="1799"/><text x="59.4698%" y="239.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1,090 samples, 0.80%)</title><rect x="59.7426%" y="213" width="0.8038%" height="15" fill="rgb(208,13,10)" fg:x="81014" fg:w="1090"/><text x="59.9926%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (861 samples, 0.63%)</title><rect x="59.9115%" y="197" width="0.6349%" height="15" fill="rgb(212,200,36)" fg:x="81243" fg:w="861"/><text x="60.1615%" y="207.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (95 samples, 0.07%)</title><rect x="60.4764%" y="181" width="0.0701%" height="15" fill="rgb(225,90,30)" fg:x="82009" fg:w="95"/><text x="60.7264%" y="191.50"></text></g><g><title>[libc.so.6] (5,975 samples, 4.41%)</title><rect x="60.5464%" y="261" width="4.4062%" height="15" fill="rgb(236,182,39)" fg:x="82104" fg:w="5975"/><text x="60.7964%" y="271.50">[libc..</text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (11,564 samples, 8.53%)</title><rect x="56.4264%" y="277" width="8.5277%" height="15" fill="rgb(212,144,35)" fg:x="76517" fg:w="11564"/><text x="56.6764%" y="287.50">&lt;asynchronou..</text></g><g><title>[libc.so.6] (26 samples, 0.02%)</title><rect x="64.9541%" y="277" width="0.0192%" height="15" fill="rgb(228,63,44)" fg:x="88081" fg:w="26"/><text x="65.2041%" y="287.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (183 samples, 0.13%)</title><rect x="64.9740%" y="277" width="0.1350%" height="15" fill="rgb(228,109,6)" fg:x="88108" fg:w="183"/><text x="65.2240%" y="287.50"></text></g><g><title>cfree (114 samples, 0.08%)</title><rect x="65.0249%" y="261" width="0.0841%" height="15" fill="rgb(238,117,24)" fg:x="88177" fg:w="114"/><text x="65.2749%" y="271.50"></text></g><g><title>[libc.so.6] (89 samples, 0.07%)</title><rect x="65.0433%" y="245" width="0.0656%" height="15" fill="rgb(242,26,26)" fg:x="88202" fg:w="89"/><text x="65.2933%" y="255.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (12,311 samples, 9.08%)</title><rect x="56.1712%" y="309" width="9.0786%" height="15" fill="rgb(221,92,48)" fg:x="76171" fg:w="12311"/><text x="56.4212%" y="319.50">&lt;multistream_..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (12,168 samples, 8.97%)</title><rect x="56.2767%" y="293" width="8.9731%" height="15" fill="rgb(209,209,32)" fg:x="76314" fg:w="12168"/><text x="56.5267%" y="303.50">&lt;libp2p_noise..</text></g><g><title>cfree (191 samples, 0.14%)</title><rect x="65.1090%" y="277" width="0.1409%" height="15" fill="rgb(221,70,22)" fg:x="88291" fg:w="191"/><text x="65.3590%" y="287.50"></text></g><g><title>[libc.so.6] (164 samples, 0.12%)</title><rect x="65.1289%" y="261" width="0.1209%" height="15" fill="rgb(248,145,5)" fg:x="88318" fg:w="164"/><text x="65.3789%" y="271.50"></text></g><g><title>__libc_calloc (706 samples, 0.52%)</title><rect x="65.2498%" y="309" width="0.5206%" height="15" fill="rgb(226,116,26)" fg:x="88482" fg:w="706"/><text x="65.4998%" y="319.50"></text></g><g><title>[libc.so.6] (444 samples, 0.33%)</title><rect x="65.4430%" y="293" width="0.3274%" height="15" fill="rgb(244,5,17)" fg:x="88744" fg:w="444"/><text x="65.6930%" y="303.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13,654 samples, 10.07%)</title><rect x="55.8615%" y="325" width="10.0690%" height="15" fill="rgb(252,159,33)" fg:x="75751" fg:w="13654"/><text x="56.1115%" y="335.50">&lt;yamux::frame::..</text></g><g><title>yamux::frame::header::decode (209 samples, 0.15%)</title><rect x="65.7763%" y="309" width="0.1541%" height="15" fill="rgb(206,71,0)" fg:x="89196" fg:w="209"/><text x="66.0263%" y="319.50"></text></g><g><title>[libc.so.6] (190 samples, 0.14%)</title><rect x="66.4902%" y="149" width="0.1401%" height="15" fill="rgb(233,118,54)" fg:x="90164" fg:w="190"/><text x="66.7402%" y="159.50"></text></g><g><title>__send (617 samples, 0.45%)</title><rect x="66.2151%" y="165" width="0.4550%" height="15" fill="rgb(234,83,48)" fg:x="89791" fg:w="617"/><text x="66.4651%" y="175.50"></text></g><g><title>[unknown] (54 samples, 0.04%)</title><rect x="66.6303%" y="149" width="0.0398%" height="15" fill="rgb(228,3,54)" fg:x="90354" fg:w="54"/><text x="66.8803%" y="159.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (642 samples, 0.47%)</title><rect x="66.2004%" y="213" width="0.4734%" height="15" fill="rgb(226,155,13)" fg:x="89771" fg:w="642"/><text x="66.4504%" y="223.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (631 samples, 0.47%)</title><rect x="66.2085%" y="197" width="0.4653%" height="15" fill="rgb(241,28,37)" fg:x="89782" fg:w="631"/><text x="66.4585%" y="207.50"></text></g><g><title>std::sys_common::net::TcpStream::write (631 samples, 0.47%)</title><rect x="66.2085%" y="181" width="0.4653%" height="15" fill="rgb(233,93,10)" fg:x="89782" fg:w="631"/><text x="66.4585%" y="191.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (1,005 samples, 0.74%)</title><rect x="66.1200%" y="277" width="0.7411%" height="15" fill="rgb(225,113,19)" fg:x="89662" fg:w="1005"/><text x="66.3700%" y="287.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (985 samples, 0.73%)</title><rect x="66.1347%" y="261" width="0.7264%" height="15" fill="rgb(241,2,18)" fg:x="89682" fg:w="985"/><text x="66.3847%" y="271.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (967 samples, 0.71%)</title><rect x="66.1480%" y="245" width="0.7131%" height="15" fill="rgb(228,207,21)" fg:x="89700" fg:w="967"/><text x="66.3980%" y="255.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (964 samples, 0.71%)</title><rect x="66.1502%" y="229" width="0.7109%" height="15" fill="rgb(213,211,35)" fg:x="89703" fg:w="964"/><text x="66.4002%" y="239.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (254 samples, 0.19%)</title><rect x="66.6738%" y="213" width="0.1873%" height="15" fill="rgb(209,83,10)" fg:x="90413" fg:w="254"/><text x="66.9238%" y="223.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (170 samples, 0.13%)</title><rect x="66.7357%" y="197" width="0.1254%" height="15" fill="rgb(209,164,1)" fg:x="90497" fg:w="170"/><text x="66.9857%" y="207.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (20 samples, 0.01%)</title><rect x="66.8611%" y="277" width="0.0147%" height="15" fill="rgb(213,184,43)" fg:x="90667" fg:w="20"/><text x="67.1111%" y="287.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (1,172 samples, 0.86%)</title><rect x="66.0131%" y="293" width="0.8643%" height="15" fill="rgb(231,61,34)" fg:x="89517" fg:w="1172"/><text x="66.2631%" y="303.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (20 samples, 0.01%)</title><rect x="66.8965%" y="277" width="0.0147%" height="15" fill="rgb(235,75,3)" fg:x="90715" fg:w="20"/><text x="67.1465%" y="287.50"></text></g><g><title>libp2p_noise::io::framed::encode_length_prefixed (77 samples, 0.06%)</title><rect x="66.9112%" y="277" width="0.0568%" height="15" fill="rgb(220,106,47)" fg:x="90735" fg:w="77"/><text x="67.1612%" y="287.50"></text></g><g><title>[libc.so.6] (85 samples, 0.06%)</title><rect x="67.1539%" y="245" width="0.0627%" height="15" fill="rgb(210,196,33)" fg:x="91064" fg:w="85"/><text x="67.4039%" y="255.50"></text></g><g><title>chacha20_poly1305_seal_avx2 (1,855 samples, 1.37%)</title><rect x="67.3699%" y="229" width="1.3679%" height="15" fill="rgb(229,154,42)" fg:x="91357" fg:w="1855"/><text x="67.6199%" y="239.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (3,908 samples, 2.88%)</title><rect x="65.9725%" y="309" width="2.8819%" height="15" fill="rgb(228,114,26)" fg:x="89462" fg:w="3908"/><text x="66.2225%" y="319.50">&lt;l..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (2,679 samples, 1.98%)</title><rect x="66.8788%" y="293" width="1.9756%" height="15" fill="rgb(208,144,1)" fg:x="90691" fg:w="2679"/><text x="67.1288%" y="303.50">&lt;..</text></g><g><title>snow::transportstate::TransportState::write_message (2,558 samples, 1.89%)</title><rect x="66.9680%" y="277" width="1.8864%" height="15" fill="rgb(239,112,37)" fg:x="90812" fg:w="2558"/><text x="67.2180%" y="287.50">s..</text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (2,498 samples, 1.84%)</title><rect x="67.0123%" y="261" width="1.8421%" height="15" fill="rgb(210,96,50)" fg:x="90872" fg:w="2498"/><text x="67.2623%" y="271.50">&lt;..</text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (2,221 samples, 1.64%)</title><rect x="67.2165%" y="245" width="1.6378%" height="15" fill="rgb(222,178,2)" fg:x="91149" fg:w="2221"/><text x="67.4665%" y="255.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (158 samples, 0.12%)</title><rect x="68.7379%" y="229" width="0.1165%" height="15" fill="rgb(226,74,18)" fg:x="93212" fg:w="158"/><text x="68.9879%" y="239.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_flush (4,010 samples, 2.96%)</title><rect x="65.9305%" y="325" width="2.9571%" height="15" fill="rgb(225,67,54)" fg:x="89405" fg:w="4010"/><text x="66.1805%" y="335.50">&lt;ya..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (45 samples, 0.03%)</title><rect x="68.8544%" y="309" width="0.0332%" height="15" fill="rgb(251,92,32)" fg:x="93370" fg:w="45"/><text x="69.1044%" y="319.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (323 samples, 0.24%)</title><rect x="69.1626%" y="309" width="0.2382%" height="15" fill="rgb(228,149,22)" fg:x="93788" fg:w="323"/><text x="69.4126%" y="319.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (304 samples, 0.22%)</title><rect x="69.1767%" y="293" width="0.2242%" height="15" fill="rgb(243,54,13)" fg:x="93807" fg:w="304"/><text x="69.4267%" y="303.50"></text></g><g><title>[libc.so.6] (231 samples, 0.17%)</title><rect x="69.2305%" y="277" width="0.1703%" height="15" fill="rgb(243,180,28)" fg:x="93880" fg:w="231"/><text x="69.4805%" y="287.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (1,032 samples, 0.76%)</title><rect x="68.8876%" y="325" width="0.7610%" height="15" fill="rgb(208,167,24)" fg:x="93415" fg:w="1032"/><text x="69.1376%" y="335.50"></text></g><g><title>cfree (334 samples, 0.25%)</title><rect x="69.4023%" y="309" width="0.2463%" height="15" fill="rgb(245,73,45)" fg:x="94113" fg:w="334"/><text x="69.6523%" y="319.50"></text></g><g><title>[libc.so.6] (253 samples, 0.19%)</title><rect x="69.4620%" y="293" width="0.1866%" height="15" fill="rgb(237,203,48)" fg:x="94194" fg:w="253"/><text x="69.7120%" y="303.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::start_send (28 samples, 0.02%)</title><rect x="69.6486%" y="325" width="0.0206%" height="15" fill="rgb(211,197,16)" fg:x="94447" fg:w="28"/><text x="69.8986%" y="335.50"></text></g><g><title>[libc.so.6] (1,270 samples, 0.94%)</title><rect x="69.6693%" y="325" width="0.9365%" height="15" fill="rgb(243,99,51)" fg:x="94475" fg:w="1270"/><text x="69.9193%" y="335.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (300 samples, 0.22%)</title><rect x="71.2267%" y="293" width="0.2212%" height="15" fill="rgb(215,123,29)" fg:x="96587" fg:w="300"/><text x="71.4767%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (153 samples, 0.11%)</title><rect x="71.4915%" y="277" width="0.1128%" height="15" fill="rgb(239,186,37)" fg:x="96946" fg:w="153"/><text x="71.7415%" y="287.50"></text></g><g><title>tokio::runtime::context::with_scheduler (139 samples, 0.10%)</title><rect x="71.5018%" y="261" width="0.1025%" height="15" fill="rgb(252,136,39)" fg:x="96960" fg:w="139"/><text x="71.7518%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (59 samples, 0.04%)</title><rect x="71.5608%" y="245" width="0.0435%" height="15" fill="rgb(223,213,32)" fg:x="97040" fg:w="59"/><text x="71.8108%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::schedule (113 samples, 0.08%)</title><rect x="71.6043%" y="277" width="0.0833%" height="15" fill="rgb(233,115,5)" fg:x="97099" fg:w="113"/><text x="71.8543%" y="287.50"></text></g><g><title>futures_task::waker::wake_arc_raw (1,663 samples, 1.23%)</title><rect x="70.6058%" y="325" width="1.2264%" height="15" fill="rgb(207,226,44)" fg:x="95745" fg:w="1663"/><text x="70.8558%" y="335.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (1,616 samples, 1.19%)</title><rect x="70.6405%" y="309" width="1.1917%" height="15" fill="rgb(208,126,0)" fg:x="95792" fg:w="1616"/><text x="70.8905%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (521 samples, 0.38%)</title><rect x="71.4480%" y="293" width="0.3842%" height="15" fill="rgb(244,66,21)" fg:x="96887" fg:w="521"/><text x="71.6980%" y="303.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (196 samples, 0.14%)</title><rect x="71.6876%" y="277" width="0.1445%" height="15" fill="rgb(222,97,12)" fg:x="97212" fg:w="196"/><text x="71.9376%" y="287.50"></text></g><g><title>yamux::chunks::Chunks::len (151 samples, 0.11%)</title><rect x="71.8329%" y="325" width="0.1114%" height="15" fill="rgb(219,213,19)" fg:x="97409" fg:w="151"/><text x="72.0829%" y="335.50"></text></g><g><title>yamux::chunks::Chunks::push (85 samples, 0.06%)</title><rect x="71.9442%" y="325" width="0.0627%" height="15" fill="rgb(252,169,30)" fg:x="97560" fg:w="85"/><text x="72.1942%" y="335.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (29,057 samples, 21.43%)</title><rect x="50.5800%" y="373" width="21.4277%" height="15" fill="rgb(206,32,51)" fg:x="68589" fg:w="29057"/><text x="50.8300%" y="383.50">&lt;libp2p_core::muxing::boxed::Wrap&lt;..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (29,032 samples, 21.41%)</title><rect x="50.5984%" y="357" width="21.4092%" height="15" fill="rgb(250,172,42)" fg:x="68614" fg:w="29032"/><text x="50.8484%" y="367.50">&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (28,960 samples, 21.36%)</title><rect x="50.6515%" y="341" width="21.3561%" height="15" fill="rgb(209,34,43)" fg:x="68686" fg:w="28960"/><text x="50.9015%" y="351.50">yamux::connection::Connection&lt;T&gt;::..</text></g><g><title>tokio::runtime::task::waker::clone_waker (167 samples, 0.12%)</title><rect x="73.0069%" y="325" width="0.1232%" height="15" fill="rgb(223,11,35)" fg:x="99001" fg:w="167"/><text x="73.2569%" y="335.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (1,271 samples, 0.94%)</title><rect x="72.2680%" y="341" width="0.9373%" height="15" fill="rgb(251,219,26)" fg:x="97999" fg:w="1271"/><text x="72.5180%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (102 samples, 0.08%)</title><rect x="73.1300%" y="325" width="0.0752%" height="15" fill="rgb(231,119,3)" fg:x="99168" fg:w="102"/><text x="73.3800%" y="335.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (551 samples, 0.41%)</title><rect x="73.2333%" y="325" width="0.4063%" height="15" fill="rgb(216,97,11)" fg:x="99308" fg:w="551"/><text x="73.4833%" y="335.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (434 samples, 0.32%)</title><rect x="73.3196%" y="309" width="0.3200%" height="15" fill="rgb(223,59,9)" fg:x="99425" fg:w="434"/><text x="73.5696%" y="319.50"></text></g><g><title>[libc.so.6] (94 samples, 0.07%)</title><rect x="73.6396%" y="325" width="0.0693%" height="15" fill="rgb(233,93,31)" fg:x="99859" fg:w="94"/><text x="73.8896%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (150 samples, 0.11%)</title><rect x="73.7089%" y="325" width="0.1106%" height="15" fill="rgb(239,81,33)" fg:x="99953" fg:w="150"/><text x="73.9589%" y="335.50"></text></g><g><title>futures_bounded::futures_map::FuturesMap&lt;ID,O&gt;::poll_unpin (925 samples, 0.68%)</title><rect x="73.2053%" y="341" width="0.6821%" height="15" fill="rgb(213,120,34)" fg:x="99270" fg:w="925"/><text x="73.4553%" y="351.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (92 samples, 0.07%)</title><rect x="73.8195%" y="325" width="0.0678%" height="15" fill="rgb(243,49,53)" fg:x="100103" fg:w="92"/><text x="74.0695%" y="335.50"></text></g><g><title>&lt;libp2p_identify::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (2,505 samples, 1.85%)</title><rect x="72.0409%" y="357" width="1.8473%" height="15" fill="rgb(247,216,33)" fg:x="97691" fg:w="2505"/><text x="72.2909%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2,052 samples, 1.51%)</title><rect x="74.0836%" y="325" width="1.5132%" height="15" fill="rgb(226,26,14)" fg:x="100461" fg:w="2052"/><text x="74.3336%" y="335.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1,466 samples, 1.08%)</title><rect x="74.5157%" y="309" width="1.0811%" height="15" fill="rgb(215,49,53)" fg:x="101047" fg:w="1466"/><text x="74.7657%" y="319.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (2,504 samples, 1.85%)</title><rect x="74.0238%" y="341" width="1.8465%" height="15" fill="rgb(245,162,40)" fg:x="100380" fg:w="2504"/><text x="74.2738%" y="351.50">&lt;..</text></g><g><title>[libc.so.6] (371 samples, 0.27%)</title><rect x="75.5968%" y="325" width="0.2736%" height="15" fill="rgb(229,68,17)" fg:x="102513" fg:w="371"/><text x="75.8468%" y="335.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::poll (5,243 samples, 3.87%)</title><rect x="72.0077%" y="373" width="3.8664%" height="15" fill="rgb(213,182,10)" fg:x="97646" fg:w="5243"/><text x="72.2577%" y="383.50">&lt;lib..</text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (2,693 samples, 1.99%)</title><rect x="73.8881%" y="357" width="1.9859%" height="15" fill="rgb(245,125,30)" fg:x="100196" fg:w="2693"/><text x="74.1381%" y="367.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (460 samples, 0.34%)</title><rect x="75.8910%" y="373" width="0.3392%" height="15" fill="rgb(232,202,2)" fg:x="102912" fg:w="460"/><text x="76.1410%" y="383.50"></text></g><g><title>cfree (688 samples, 0.51%)</title><rect x="76.2302%" y="373" width="0.5074%" height="15" fill="rgb(237,140,51)" fg:x="103372" fg:w="688"/><text x="76.4802%" y="383.50"></text></g><g><title>[libc.so.6] (290 samples, 0.21%)</title><rect x="76.5237%" y="357" width="0.2139%" height="15" fill="rgb(236,157,25)" fg:x="103770" fg:w="290"/><text x="76.7737%" y="367.50"></text></g><g><title>[libc.so.6] (145 samples, 0.11%)</title><rect x="77.8629%" y="293" width="0.1069%" height="15" fill="rgb(219,209,0)" fg:x="105586" fg:w="145"/><text x="78.1129%" y="303.50"></text></g><g><title>__rdl_alloc (20 samples, 0.01%)</title><rect x="77.9698%" y="293" width="0.0147%" height="15" fill="rgb(240,116,54)" fg:x="105731" fg:w="20"/><text x="78.2198%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.01%)</title><rect x="77.9713%" y="277" width="0.0133%" height="15" fill="rgb(216,10,36)" fg:x="105733" fg:w="18"/><text x="78.2213%" y="287.50"></text></g><g><title>&lt;libp2p_swarm::stream_protocol::StreamProtocol as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="78.4779%" y="277" width="0.0111%" height="15" fill="rgb(222,72,44)" fg:x="106420" fg:w="15"/><text x="78.7279%" y="287.50"></text></g><g><title>[libc.so.6] (32 samples, 0.02%)</title><rect x="79.0834%" y="261" width="0.0236%" height="15" fill="rgb(232,159,9)" fg:x="107241" fg:w="32"/><text x="79.3334%" y="271.50"></text></g><g><title>__rdl_alloc (21 samples, 0.02%)</title><rect x="79.1070%" y="261" width="0.0155%" height="15" fill="rgb(210,39,32)" fg:x="107273" fg:w="21"/><text x="79.3570%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.01%)</title><rect x="79.1077%" y="245" width="0.0147%" height="15" fill="rgb(216,194,45)" fg:x="107274" fg:w="20"/><text x="79.3577%" y="255.50"></text></g><g><title>cfree (273 samples, 0.20%)</title><rect x="79.1320%" y="261" width="0.2013%" height="15" fill="rgb(218,18,35)" fg:x="107307" fg:w="273"/><text x="79.3820%" y="271.50"></text></g><g><title>[libc.so.6] (41 samples, 0.03%)</title><rect x="79.3031%" y="245" width="0.0302%" height="15" fill="rgb(207,83,51)" fg:x="107539" fg:w="41"/><text x="79.5531%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (761 samples, 0.56%)</title><rect x="79.3334%" y="261" width="0.5612%" height="15" fill="rgb(225,63,43)" fg:x="107580" fg:w="761"/><text x="79.5834%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h40007bbf6e9cbb6fE.llvm.7163819848405301694 (451 samples, 0.33%)</title><rect x="79.5620%" y="245" width="0.3326%" height="15" fill="rgb(207,57,36)" fg:x="107890" fg:w="451"/><text x="79.8120%" y="255.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h3a010447c24887d0E.llvm.18240207325067885162 (2,390 samples, 1.76%)</title><rect x="78.4890%" y="277" width="1.7625%" height="15" fill="rgb(216,99,33)" fg:x="106435" fg:w="2390"/><text x="78.7390%" y="287.50"></text></g><g><title>malloc (484 samples, 0.36%)</title><rect x="79.8945%" y="261" width="0.3569%" height="15" fill="rgb(225,42,16)" fg:x="108341" fg:w="484"/><text x="80.1445%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,083 samples, 3.01%)</title><rect x="77.9883%" y="293" width="3.0110%" height="15" fill="rgb(220,201,45)" fg:x="105756" fg:w="4083"/><text x="78.2383%" y="303.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (1,014 samples, 0.75%)</title><rect x="80.2515%" y="277" width="0.7478%" height="15" fill="rgb(225,33,4)" fg:x="108825" fg:w="1014"/><text x="80.5015%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h40007bbf6e9cbb6fE.llvm.7163819848405301694 (456 samples, 0.34%)</title><rect x="80.6630%" y="261" width="0.3363%" height="15" fill="rgb(224,33,50)" fg:x="109383" fg:w="456"/><text x="80.9130%" y="271.50"></text></g><g><title>[libc.so.6] (52 samples, 0.04%)</title><rect x="81.1688%" y="277" width="0.0383%" height="15" fill="rgb(246,198,51)" fg:x="110069" fg:w="52"/><text x="81.4188%" y="287.50"></text></g><g><title>__rdl_alloc (22 samples, 0.02%)</title><rect x="81.2072%" y="277" width="0.0162%" height="15" fill="rgb(205,22,4)" fg:x="110121" fg:w="22"/><text x="81.4572%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.01%)</title><rect x="81.2087%" y="261" width="0.0147%" height="15" fill="rgb(206,3,8)" fg:x="110123" fg:w="20"/><text x="81.4587%" y="271.50"></text></g><g><title>__rdl_dealloc (21 samples, 0.02%)</title><rect x="81.2234%" y="277" width="0.0155%" height="15" fill="rgb(251,23,15)" fg:x="110143" fg:w="21"/><text x="81.4734%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (21 samples, 0.02%)</title><rect x="81.2234%" y="261" width="0.0155%" height="15" fill="rgb(252,88,28)" fg:x="110143" fg:w="21"/><text x="81.4734%" y="271.50"></text></g><g><title>__rust_alloc (17 samples, 0.01%)</title><rect x="81.2389%" y="277" width="0.0125%" height="15" fill="rgb(212,127,14)" fg:x="110164" fg:w="17"/><text x="81.4889%" y="287.50"></text></g><g><title>__rust_dealloc (28 samples, 0.02%)</title><rect x="81.2514%" y="277" width="0.0206%" height="15" fill="rgb(247,145,37)" fg:x="110181" fg:w="28"/><text x="81.5014%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (32 samples, 0.02%)</title><rect x="81.2949%" y="245" width="0.0236%" height="15" fill="rgb(209,117,53)" fg:x="110240" fg:w="32"/><text x="81.5449%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (22 samples, 0.02%)</title><rect x="81.3023%" y="229" width="0.0162%" height="15" fill="rgb(212,90,42)" fg:x="110250" fg:w="22"/><text x="81.5523%" y="239.50"></text></g><g><title>core::cmp::max (233 samples, 0.17%)</title><rect x="81.3185%" y="245" width="0.1718%" height="15" fill="rgb(218,164,37)" fg:x="110272" fg:w="233"/><text x="81.5685%" y="255.50"></text></g><g><title>core::cmp::Ord::max (233 samples, 0.17%)</title><rect x="81.3185%" y="229" width="0.1718%" height="15" fill="rgb(246,65,34)" fg:x="110272" fg:w="233"/><text x="81.5685%" y="239.50"></text></g><g><title>core::cmp::max_by (233 samples, 0.17%)</title><rect x="81.3185%" y="213" width="0.1718%" height="15" fill="rgb(231,100,33)" fg:x="110272" fg:w="233"/><text x="81.5685%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::extend (303 samples, 0.22%)</title><rect x="81.2721%" y="261" width="0.2234%" height="15" fill="rgb(228,126,14)" fg:x="110209" fg:w="303"/><text x="81.5221%" y="271.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (316 samples, 0.23%)</title><rect x="81.2721%" y="277" width="0.2330%" height="15" fill="rgb(215,173,21)" fg:x="110209" fg:w="316"/><text x="81.5221%" y="287.50"></text></g><g><title>cfree (750 samples, 0.55%)</title><rect x="81.5051%" y="277" width="0.5531%" height="15" fill="rgb(210,6,40)" fg:x="110525" fg:w="750"/><text x="81.7551%" y="287.50"></text></g><g><title>[libc.so.6] (174 samples, 0.13%)</title><rect x="81.9299%" y="261" width="0.1283%" height="15" fill="rgb(212,48,18)" fg:x="111101" fg:w="174"/><text x="82.1799%" y="271.50"></text></g><g><title>libp2p_swarm::stream_protocol::StreamProtocol::try_from_owned (1,901 samples, 1.40%)</title><rect x="80.9992%" y="293" width="1.4019%" height="15" fill="rgb(230,214,11)" fg:x="109839" fg:w="1901"/><text x="81.2492%" y="303.50"></text></g><g><title>malloc (463 samples, 0.34%)</title><rect x="82.0597%" y="277" width="0.3414%" height="15" fill="rgb(254,105,39)" fg:x="111277" fg:w="463"/><text x="82.3097%" y="287.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (7,250 samples, 5.35%)</title><rect x="77.2545%" y="309" width="5.3464%" height="15" fill="rgb(245,158,5)" fg:x="104761" fg:w="7250"/><text x="77.5045%" y="319.50">_ZN4cor..</text></g><g><title>malloc (271 samples, 0.20%)</title><rect x="82.4011%" y="293" width="0.1998%" height="15" fill="rgb(249,208,11)" fg:x="111740" fg:w="271"/><text x="82.6511%" y="303.50"></text></g><g><title>_ZN6either6Either4Left17h66e2088ff3b4f34cE.llvm.11890601404572722038 (328 samples, 0.24%)</title><rect x="82.6009%" y="309" width="0.2419%" height="15" fill="rgb(210,39,28)" fg:x="112011" fg:w="328"/><text x="82.8509%" y="319.50"></text></g><g><title>_ZN6either6Either4Left17hae7a410b1dcdefadE.llvm.11890601404572722038 (115 samples, 0.08%)</title><rect x="82.8428%" y="309" width="0.0848%" height="15" fill="rgb(211,56,53)" fg:x="112339" fg:w="115"/><text x="83.0928%" y="319.50"></text></g><g><title>_ZN6either6Either5Right17h36632cf8416ebe42E.llvm.11890601404572722038 (83 samples, 0.06%)</title><rect x="82.9276%" y="309" width="0.0612%" height="15" fill="rgb(226,201,30)" fg:x="112454" fg:w="83"/><text x="83.1776%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,088 samples, 5.96%)</title><rect x="77.1218%" y="325" width="5.9644%" height="15" fill="rgb(239,101,34)" fg:x="104581" fg:w="8088"/><text x="77.3718%" y="335.50">&lt;core::i..</text></g><g><title>_ZN6either6Either5Right17hde97836cbb83930aE.llvm.11890601404572722038 (132 samples, 0.10%)</title><rect x="82.9888%" y="309" width="0.0973%" height="15" fill="rgb(226,209,5)" fg:x="112537" fg:w="132"/><text x="83.2388%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="83.1437%" y="309" width="0.0273%" height="15" fill="rgb(250,105,47)" fg:x="112747" fg:w="37"/><text x="83.3937%" y="319.50"></text></g><g><title>[libc.so.6] (89 samples, 0.07%)</title><rect x="83.3325%" y="293" width="0.0656%" height="15" fill="rgb(230,72,3)" fg:x="113003" fg:w="89"/><text x="83.5825%" y="303.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h3a010447c24887d0E.llvm.18240207325067885162 (135 samples, 0.10%)</title><rect x="83.5589%" y="277" width="0.0996%" height="15" fill="rgb(232,218,39)" fg:x="113310" fg:w="135"/><text x="83.8089%" y="287.50"></text></g><g><title>malloc (49 samples, 0.04%)</title><rect x="83.6223%" y="261" width="0.0361%" height="15" fill="rgb(248,166,6)" fg:x="113396" fg:w="49"/><text x="83.8723%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (679 samples, 0.50%)</title><rect x="83.4062%" y="293" width="0.5007%" height="15" fill="rgb(247,89,20)" fg:x="113103" fg:w="679"/><text x="83.6562%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (337 samples, 0.25%)</title><rect x="83.6584%" y="277" width="0.2485%" height="15" fill="rgb(248,130,54)" fg:x="113445" fg:w="337"/><text x="83.9084%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h40007bbf6e9cbb6fE.llvm.7163819848405301694 (171 samples, 0.13%)</title><rect x="83.7808%" y="261" width="0.1261%" height="15" fill="rgb(234,196,4)" fg:x="113611" fg:w="171"/><text x="84.0308%" y="271.50"></text></g><g><title>core::cmp::max (78 samples, 0.06%)</title><rect x="83.9881%" y="245" width="0.0575%" height="15" fill="rgb(250,143,31)" fg:x="113892" fg:w="78"/><text x="84.2381%" y="255.50"></text></g><g><title>core::cmp::Ord::max (78 samples, 0.06%)</title><rect x="83.9881%" y="229" width="0.0575%" height="15" fill="rgb(211,110,34)" fg:x="113892" fg:w="78"/><text x="84.2381%" y="239.50"></text></g><g><title>core::cmp::max_by (78 samples, 0.06%)</title><rect x="83.9881%" y="213" width="0.0575%" height="15" fill="rgb(215,124,48)" fg:x="113892" fg:w="78"/><text x="84.2381%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::extend (100 samples, 0.07%)</title><rect x="83.9740%" y="261" width="0.0737%" height="15" fill="rgb(216,46,13)" fg:x="113873" fg:w="100"/><text x="84.2240%" y="271.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (108 samples, 0.08%)</title><rect x="83.9740%" y="277" width="0.0796%" height="15" fill="rgb(205,184,25)" fg:x="113873" fg:w="108"/><text x="84.2240%" y="287.50"></text></g><g><title>cfree (206 samples, 0.15%)</title><rect x="84.0537%" y="277" width="0.1519%" height="15" fill="rgb(228,1,10)" fg:x="113981" fg:w="206"/><text x="84.3037%" y="287.50"></text></g><g><title>[libc.so.6] (54 samples, 0.04%)</title><rect x="84.1658%" y="261" width="0.0398%" height="15" fill="rgb(213,116,27)" fg:x="114133" fg:w="54"/><text x="84.4158%" y="271.50"></text></g><g><title>libp2p_swarm::stream_protocol::StreamProtocol::try_from_owned (525 samples, 0.39%)</title><rect x="83.9069%" y="293" width="0.3872%" height="15" fill="rgb(241,95,50)" fg:x="113782" fg:w="525"/><text x="84.1569%" y="303.50"></text></g><g><title>malloc (120 samples, 0.09%)</title><rect x="84.2056%" y="277" width="0.0885%" height="15" fill="rgb(238,48,32)" fg:x="114187" fg:w="120"/><text x="84.4556%" y="287.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (1,593 samples, 1.17%)</title><rect x="83.1710%" y="309" width="1.1747%" height="15" fill="rgb(235,113,49)" fg:x="112784" fg:w="1593"/><text x="83.4210%" y="319.50"></text></g><g><title>malloc (70 samples, 0.05%)</title><rect x="84.2941%" y="293" width="0.0516%" height="15" fill="rgb(205,127,43)" fg:x="114307" fg:w="70"/><text x="84.5441%" y="303.50"></text></g><g><title>_ZN6either6Either4Left17h9a42142df6f33720E.llvm.11276228832273757377 (284 samples, 0.21%)</title><rect x="84.3457%" y="309" width="0.2094%" height="15" fill="rgb(250,162,2)" fg:x="114377" fg:w="284"/><text x="84.5957%" y="319.50"></text></g><g><title>_ZN6either6Either4Left17hae7a410b1dcdefadE.llvm.11890601404572722038 (52 samples, 0.04%)</title><rect x="84.5551%" y="309" width="0.0383%" height="15" fill="rgb(220,13,41)" fg:x="114661" fg:w="52"/><text x="84.8051%" y="319.50"></text></g><g><title>_ZN6either6Either5Right17h36632cf8416ebe42E.llvm.11890601404572722038 (75 samples, 0.06%)</title><rect x="84.5935%" y="309" width="0.0553%" height="15" fill="rgb(249,221,25)" fg:x="114713" fg:w="75"/><text x="84.8435%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,695 samples, 7.89%)</title><rect x="77.0149%" y="341" width="7.8869%" height="15" fill="rgb(215,208,19)" fg:x="104436" fg:w="10695"/><text x="77.2649%" y="351.50">&lt;core::iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,462 samples, 1.82%)</title><rect x="83.0862%" y="325" width="1.8156%" height="15" fill="rgb(236,175,2)" fg:x="112669" fg:w="2462"/><text x="83.3362%" y="335.50">&lt;..</text></g><g><title>cfree (338 samples, 0.25%)</title><rect x="84.6525%" y="309" width="0.2493%" height="15" fill="rgb(241,52,2)" fg:x="114793" fg:w="338"/><text x="84.9025%" y="319.50"></text></g><g><title>[libc.so.6] (53 samples, 0.04%)</title><rect x="84.8627%" y="293" width="0.0391%" height="15" fill="rgb(248,140,14)" fg:x="115078" fg:w="53"/><text x="85.1127%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10,824 samples, 7.98%)</title><rect x="77.0097%" y="357" width="7.9820%" height="15" fill="rgb(253,22,42)" fg:x="104429" fg:w="10824"/><text x="77.2597%" y="367.50">&lt;hashbrown:..</text></g><g><title>[libc.so.6] (122 samples, 0.09%)</title><rect x="84.9017%" y="341" width="0.0900%" height="15" fill="rgb(234,61,47)" fg:x="115131" fg:w="122"/><text x="85.1517%" y="351.50"></text></g><g><title>&lt;libp2p_kad::protocol::ProtocolConfig as libp2p_core::upgrade::UpgradeInfo&gt;::protocol_info (308 samples, 0.23%)</title><rect x="85.1318%" y="341" width="0.2271%" height="15" fill="rgb(208,226,15)" fg:x="115443" fg:w="308"/><text x="85.3818%" y="351.50"></text></g><g><title>malloc (215 samples, 0.16%)</title><rect x="85.2004%" y="325" width="0.1585%" height="15" fill="rgb(217,221,4)" fg:x="115536" fg:w="215"/><text x="85.4504%" y="335.50"></text></g><g><title>&lt;libp2p_swarm::upgrade::SendWrapper&lt;T&gt; as libp2p_core::upgrade::UpgradeInfo&gt;::protocol_info (280 samples, 0.21%)</title><rect x="85.3589%" y="341" width="0.2065%" height="15" fill="rgb(212,174,34)" fg:x="115751" fg:w="280"/><text x="85.6089%" y="351.50"></text></g><g><title>&lt;libp2p_swarm::upgrade::SendWrapper&lt;T&gt; as libp2p_core::upgrade::UpgradeInfo&gt;::protocol_info (781 samples, 0.58%)</title><rect x="84.9939%" y="357" width="0.5759%" height="15" fill="rgb(253,83,4)" fg:x="115256" fg:w="781"/><text x="85.2439%" y="367.50"></text></g><g><title>[libc.so.6] (83 samples, 0.06%)</title><rect x="85.5699%" y="357" width="0.0612%" height="15" fill="rgb(250,195,49)" fg:x="116037" fg:w="83"/><text x="85.8199%" y="367.50"></text></g><g><title>cfree (345 samples, 0.25%)</title><rect x="85.6458%" y="341" width="0.2544%" height="15" fill="rgb(241,192,25)" fg:x="116140" fg:w="345"/><text x="85.8958%" y="351.50"></text></g><g><title>[libc.so.6] (43 samples, 0.03%)</title><rect x="85.8685%" y="325" width="0.0317%" height="15" fill="rgb(208,124,10)" fg:x="116442" fg:w="43"/><text x="86.1185%" y="335.50"></text></g><g><title>libp2p_swarm::connection::gather_supported_protocols (12,817 samples, 9.45%)</title><rect x="76.7420%" y="373" width="9.4517%" height="15" fill="rgb(222,33,0)" fg:x="104066" fg:w="12817"/><text x="76.9920%" y="383.50">libp2p_swarm::..</text></g><g><title>core::ptr::drop_in_place&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;onion::handler::IUpgrade&gt;,libp2p_swarm::upgrade::SendWrapper&lt;either::Either&lt;libp2p_kad::protocol::ProtocolConfig,libp2p_core::upgrade::denied::DeniedUpgrade&gt;&gt;&gt;&gt;,libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_core::upgrade::ready::ReadyUpgrade&lt;libp2p_swarm::stream_protocol::StreamProtocol&gt;,libp2p_core::upgrade::ready::ReadyUpgrade&lt;libp2p_swarm::stream_protocol::StreamProtocol&gt;&gt;&gt;&gt;&gt; (763 samples, 0.56%)</title><rect x="85.6311%" y="357" width="0.5627%" height="15" fill="rgb(234,209,28)" fg:x="116120" fg:w="763"/><text x="85.8811%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;libp2p_swarm::upgrade::SendWrapper&lt;libp2p_core::upgrade::select::SelectUpgrade&lt;libp2p_swarm::upgrade::SendWrapper&lt;onion::handler::IUpgrade&gt;,libp2p_swarm::upgrade::SendWrapper&lt;either::Either&lt;libp2p_kad::protocol::ProtocolConfig,libp2p_core::upgrade::denied::DeniedUpgrade&gt;&gt;&gt;&gt;&gt; (398 samples, 0.29%)</title><rect x="85.9002%" y="341" width="0.2935%" height="15" fill="rgb(224,11,23)" fg:x="116485" fg:w="398"/><text x="86.1502%" y="351.50"></text></g><g><title>&lt;x25519_dalek::x25519::StaticSecret as zeroize::Zeroize&gt;::zeroize (349 samples, 0.26%)</title><rect x="85.9364%" y="325" width="0.2574%" height="15" fill="rgb(232,99,1)" fg:x="116534" fg:w="349"/><text x="86.1864%" y="335.50"></text></g><g><title>[libc.so.6] (880 samples, 0.65%)</title><rect x="87.2741%" y="341" width="0.6489%" height="15" fill="rgb(237,95,45)" fg:x="118348" fg:w="880"/><text x="87.5241%" y="351.50"></text></g><g><title>libp2p_swarm::handler::ProtocolsChange::from_full_sets (4,604 samples, 3.40%)</title><rect x="86.1937%" y="373" width="3.3952%" height="15" fill="rgb(208,109,11)" fg:x="116883" fg:w="4604"/><text x="86.4437%" y="383.50">lib..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4,010 samples, 2.96%)</title><rect x="86.6318%" y="357" width="2.9571%" height="15" fill="rgb(216,190,48)" fg:x="117477" fg:w="4010"/><text x="86.8818%" y="367.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (2,259 samples, 1.67%)</title><rect x="87.9230%" y="341" width="1.6659%" height="15" fill="rgb(251,171,36)" fg:x="119228" fg:w="2259"/><text x="88.1730%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,580 samples, 1.17%)</title><rect x="88.4237%" y="325" width="1.1651%" height="15" fill="rgb(230,62,22)" fg:x="119907" fg:w="1580"/><text x="88.6737%" y="335.50"></text></g><g><title>libp2p_swarm::stream::ActiveStreamCounter::has_no_active_streams (171 samples, 0.13%)</title><rect x="89.5889%" y="373" width="0.1261%" height="15" fill="rgb(225,114,35)" fg:x="121487" fg:w="171"/><text x="89.8389%" y="383.50"></text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (62,850 samples, 46.35%)</title><rect x="43.3686%" y="389" width="46.3478%" height="15" fill="rgb(215,118,42)" fg:x="58810" fg:w="62850"/><text x="43.6186%" y="399.50">libp2p_swarm::connection::Connection&lt;THandler&gt;::poll</text></g><g><title>libp2p_swarm::connection::gather_supported_protocols (42 samples, 0.03%)</title><rect x="89.7283%" y="389" width="0.0310%" height="15" fill="rgb(243,119,21)" fg:x="121676" fg:w="42"/><text x="89.9783%" y="399.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (17 samples, 0.01%)</title><rect x="89.7467%" y="373" width="0.0125%" height="15" fill="rgb(252,177,53)" fg:x="121701" fg:w="17"/><text x="89.9967%" y="383.50"></text></g><g><title>libp2p_swarm::handler::ProtocolsChange::from_full_sets (112 samples, 0.08%)</title><rect x="89.7784%" y="389" width="0.0826%" height="15" fill="rgb(237,209,29)" fg:x="121744" fg:w="112"/><text x="90.0284%" y="399.50"></text></g><g><title>libp2p_swarm::stream_protocol::StreamProtocol::try_from_owned (541 samples, 0.40%)</title><rect x="89.8617%" y="389" width="0.3990%" height="15" fill="rgb(212,65,23)" fg:x="121857" fg:w="541"/><text x="90.1117%" y="399.50"></text></g><g><title>log::STATE (14 samples, 0.01%)</title><rect x="90.2607%" y="389" width="0.0103%" height="15" fill="rgb(230,222,46)" fg:x="122398" fg:w="14"/><text x="90.5107%" y="399.50"></text></g><g><title>malloc (149 samples, 0.11%)</title><rect x="90.2710%" y="389" width="0.1099%" height="15" fill="rgb(215,135,32)" fg:x="122412" fg:w="149"/><text x="90.5210%" y="399.50"></text></g><g><title>pow (44 samples, 0.03%)</title><rect x="90.3868%" y="389" width="0.0324%" height="15" fill="rgb(246,101,22)" fg:x="122569" fg:w="44"/><text x="90.6368%" y="399.50"></text></g><g><title>pqc_kyber::reference::indcpa::indcpa_enc (29 samples, 0.02%)</title><rect x="90.4192%" y="389" width="0.0214%" height="15" fill="rgb(206,107,13)" fg:x="122613" fg:w="29"/><text x="90.6692%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::now (81 samples, 0.06%)</title><rect x="90.4657%" y="389" width="0.0597%" height="15" fill="rgb(250,100,44)" fg:x="122676" fg:w="81"/><text x="90.7157%" y="399.50"></text></g><g><title>syscall (31 samples, 0.02%)</title><rect x="90.5306%" y="389" width="0.0229%" height="15" fill="rgb(231,147,38)" fg:x="122764" fg:w="31"/><text x="90.7806%" y="399.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (402 samples, 0.30%)</title><rect x="90.5564%" y="389" width="0.2964%" height="15" fill="rgb(229,8,40)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="399.50"></text></g><g><title>tokio::runtime::context::set_scheduler (402 samples, 0.30%)</title><rect x="90.5564%" y="373" width="0.2964%" height="15" fill="rgb(221,135,30)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (402 samples, 0.30%)</title><rect x="90.5564%" y="357" width="0.2964%" height="15" fill="rgb(249,193,18)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (402 samples, 0.30%)</title><rect x="90.5564%" y="341" width="0.2964%" height="15" fill="rgb(209,133,39)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (402 samples, 0.30%)</title><rect x="90.5564%" y="325" width="0.2964%" height="15" fill="rgb(232,100,14)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="335.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (402 samples, 0.30%)</title><rect x="90.5564%" y="309" width="0.2964%" height="15" fill="rgb(224,185,1)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="319.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (402 samples, 0.30%)</title><rect x="90.5564%" y="293" width="0.2964%" height="15" fill="rgb(223,139,8)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="303.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (402 samples, 0.30%)</title><rect x="90.5564%" y="277" width="0.2964%" height="15" fill="rgb(232,213,38)" fg:x="122799" fg:w="402"/><text x="90.8064%" y="287.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (375 samples, 0.28%)</title><rect x="90.5763%" y="261" width="0.2765%" height="15" fill="rgb(207,94,22)" fg:x="122826" fg:w="375"/><text x="90.8263%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (29 samples, 0.02%)</title><rect x="90.8528%" y="389" width="0.0214%" height="15" fill="rgb(219,183,54)" fg:x="123201" fg:w="29"/><text x="91.1028%" y="399.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (316 samples, 0.23%)</title><rect x="90.8742%" y="389" width="0.2330%" height="15" fill="rgb(216,185,54)" fg:x="123230" fg:w="316"/><text x="91.1242%" y="399.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (33 samples, 0.02%)</title><rect x="91.1073%" y="389" width="0.0243%" height="15" fill="rgb(254,217,39)" fg:x="123546" fg:w="33"/><text x="91.3573%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (49 samples, 0.04%)</title><rect x="91.1449%" y="389" width="0.0361%" height="15" fill="rgb(240,178,23)" fg:x="123597" fg:w="49"/><text x="91.3949%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (57 samples, 0.04%)</title><rect x="91.1840%" y="389" width="0.0420%" height="15" fill="rgb(218,11,47)" fg:x="123650" fg:w="57"/><text x="91.4340%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (50 samples, 0.04%)</title><rect x="91.2348%" y="389" width="0.0369%" height="15" fill="rgb(218,51,51)" fg:x="123719" fg:w="50"/><text x="91.4848%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (15 samples, 0.01%)</title><rect x="91.2717%" y="389" width="0.0111%" height="15" fill="rgb(238,126,27)" fg:x="123769" fg:w="15"/><text x="91.5217%" y="399.50"></text></g><g><title>&lt;Alg as cipher::block::BlockEncryptMut&gt;::encrypt_with_backend_mut (16 samples, 0.01%)</title><rect x="91.3440%" y="245" width="0.0118%" height="15" fill="rgb(249,202,22)" fg:x="123867" fg:w="16"/><text x="91.5940%" y="255.50"></text></g><g><title>[libc.so.6] (15 samples, 0.01%)</title><rect x="91.3558%" y="245" width="0.0111%" height="15" fill="rgb(254,195,49)" fg:x="123883" fg:w="15"/><text x="91.6058%" y="255.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17hfe2516956e30adf5E.llvm.11276228832273757377 (34 samples, 0.03%)</title><rect x="91.3668%" y="245" width="0.0251%" height="15" fill="rgb(208,123,14)" fg:x="123898" fg:w="34"/><text x="91.6168%" y="255.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef173bb298b53411E.llvm.3258444953314870767 (165 samples, 0.12%)</title><rect x="91.3226%" y="373" width="0.1217%" height="15" fill="rgb(224,200,8)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="383.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (165 samples, 0.12%)</title><rect x="91.3226%" y="357" width="0.1217%" height="15" fill="rgb(217,61,36)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="367.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef0c12bb09c77e1fE.llvm.10503928954504469153 (165 samples, 0.12%)</title><rect x="91.3226%" y="341" width="0.1217%" height="15" fill="rgb(206,35,45)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="351.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (165 samples, 0.12%)</title><rect x="91.3226%" y="325" width="0.1217%" height="15" fill="rgb(217,65,33)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="335.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (165 samples, 0.12%)</title><rect x="91.3226%" y="309" width="0.1217%" height="15" fill="rgb(222,158,48)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="319.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (165 samples, 0.12%)</title><rect x="91.3226%" y="293" width="0.1217%" height="15" fill="rgb(254,2,54)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="303.50"></text></g><g><title>&lt;onion::behaviour::EncryptedStream as futures_core::stream::Stream&gt;::poll_next (165 samples, 0.12%)</title><rect x="91.3226%" y="277" width="0.1217%" height="15" fill="rgb(250,143,38)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="287.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (165 samples, 0.12%)</title><rect x="91.3226%" y="261" width="0.1217%" height="15" fill="rgb(248,25,0)" fg:x="123838" fg:w="165"/><text x="91.5726%" y="271.50"></text></g><g><title>subtle::black_box (71 samples, 0.05%)</title><rect x="91.3919%" y="245" width="0.0524%" height="15" fill="rgb(206,152,27)" fg:x="123932" fg:w="71"/><text x="91.6419%" y="255.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,201 samples, 0.89%)</title><rect x="91.2850%" y="389" width="0.8857%" height="15" fill="rgb(240,77,30)" fg:x="123787" fg:w="1201"/><text x="91.5350%" y="399.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (985 samples, 0.73%)</title><rect x="91.4443%" y="373" width="0.7264%" height="15" fill="rgb(231,5,3)" fg:x="124003" fg:w="985"/><text x="91.6943%" y="383.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (985 samples, 0.73%)</title><rect x="91.4443%" y="357" width="0.7264%" height="15" fill="rgb(207,226,32)" fg:x="124003" fg:w="985"/><text x="91.6943%" y="367.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h2c3342478a7ab161E.llvm.5862359684729327525 (985 samples, 0.73%)</title><rect x="91.4443%" y="341" width="0.7264%" height="15" fill="rgb(222,207,47)" fg:x="124003" fg:w="985"/><text x="91.6943%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (421 samples, 0.31%)</title><rect x="92.2495%" y="373" width="0.3105%" height="15" fill="rgb(229,115,45)" fg:x="125095" fg:w="421"/><text x="92.4995%" y="383.50"></text></g><g><title>tokio::runtime::context::with_scheduler (401 samples, 0.30%)</title><rect x="92.2643%" y="357" width="0.2957%" height="15" fill="rgb(224,191,6)" fg:x="125115" fg:w="401"/><text x="92.5143%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (338 samples, 0.25%)</title><rect x="92.3108%" y="341" width="0.2493%" height="15" fill="rgb(230,227,24)" fg:x="125178" fg:w="338"/><text x="92.5608%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (260 samples, 0.19%)</title><rect x="92.3683%" y="325" width="0.1917%" height="15" fill="rgb(228,80,19)" fg:x="125256" fg:w="260"/><text x="92.6183%" y="335.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (690 samples, 0.51%)</title><rect x="92.5814%" y="357" width="0.5088%" height="15" fill="rgb(247,229,0)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (690 samples, 0.51%)</title><rect x="92.5814%" y="341" width="0.5088%" height="15" fill="rgb(237,194,15)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="351.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (690 samples, 0.51%)</title><rect x="92.5814%" y="325" width="0.5088%" height="15" fill="rgb(219,203,20)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="335.50"></text></g><g><title>tokio::runtime::context::set_scheduler (690 samples, 0.51%)</title><rect x="92.5814%" y="309" width="0.5088%" height="15" fill="rgb(234,128,8)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (690 samples, 0.51%)</title><rect x="92.5814%" y="293" width="0.5088%" height="15" fill="rgb(248,202,8)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (690 samples, 0.51%)</title><rect x="92.5814%" y="277" width="0.5088%" height="15" fill="rgb(206,104,37)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (690 samples, 0.51%)</title><rect x="92.5814%" y="261" width="0.5088%" height="15" fill="rgb(223,8,27)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="271.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (690 samples, 0.51%)</title><rect x="92.5814%" y="245" width="0.5088%" height="15" fill="rgb(216,217,28)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="255.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (690 samples, 0.51%)</title><rect x="92.5814%" y="229" width="0.5088%" height="15" fill="rgb(249,199,1)" fg:x="125545" fg:w="690"/><text x="92.8314%" y="239.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="93.0902%" y="357" width="0.0339%" height="15" fill="rgb(240,85,17)" fg:x="126235" fg:w="46"/><text x="93.3402%" y="367.50"></text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="93.1846%" y="325" width="0.0155%" height="15" fill="rgb(206,108,45)" fg:x="126363" fg:w="21"/><text x="93.4346%" y="335.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17haa52716930c8922eE.llvm.10503928954504469153 (26 samples, 0.02%)</title><rect x="93.2001%" y="325" width="0.0192%" height="15" fill="rgb(245,210,41)" fg:x="126384" fg:w="26"/><text x="93.4501%" y="335.50"></text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="93.2038%" y="309" width="0.0155%" height="15" fill="rgb(206,13,37)" fg:x="126389" fg:w="21"/><text x="93.4538%" y="319.50"></text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="93.2274%" y="309" width="0.0155%" height="15" fill="rgb(250,61,18)" fg:x="126421" fg:w="21"/><text x="93.4774%" y="319.50"></text></g><g><title>[libc.so.6] (24 samples, 0.02%)</title><rect x="93.4398%" y="229" width="0.0177%" height="15" fill="rgb(235,172,48)" fg:x="126709" fg:w="24"/><text x="93.6898%" y="239.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as core::convert::From&lt;Aes&gt;&gt;::from (71 samples, 0.05%)</title><rect x="93.4169%" y="245" width="0.0524%" height="15" fill="rgb(249,201,17)" fg:x="126678" fg:w="71"/><text x="93.6669%" y="255.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17h7ec7f3316c3b7b3aE.llvm.11276228832273757377 (16 samples, 0.01%)</title><rect x="93.4575%" y="229" width="0.0118%" height="15" fill="rgb(219,208,6)" fg:x="126733" fg:w="16"/><text x="93.7075%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (48 samples, 0.04%)</title><rect x="93.4707%" y="245" width="0.0354%" height="15" fill="rgb(248,31,23)" fg:x="126751" fg:w="48"/><text x="93.7207%" y="255.50"></text></g><g><title>malloc (31 samples, 0.02%)</title><rect x="93.4833%" y="229" width="0.0229%" height="15" fill="rgb(245,15,42)" fg:x="126768" fg:w="31"/><text x="93.7333%" y="239.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (17 samples, 0.01%)</title><rect x="93.5061%" y="245" width="0.0125%" height="15" fill="rgb(222,217,39)" fg:x="126799" fg:w="17"/><text x="93.7561%" y="255.50"></text></g><g><title>&lt;onion::behaviour::EncryptedStream as futures_core::stream::Stream&gt;::poll_next (217 samples, 0.16%)</title><rect x="93.3992%" y="261" width="0.1600%" height="15" fill="rgb(210,219,27)" fg:x="126654" fg:w="217"/><text x="93.6492%" y="271.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (55 samples, 0.04%)</title><rect x="93.5187%" y="245" width="0.0406%" height="15" fill="rgb(252,166,36)" fg:x="126816" fg:w="55"/><text x="93.7687%" y="255.50"></text></g><g><title>component_utils::set_waker (32 samples, 0.02%)</title><rect x="93.5356%" y="229" width="0.0236%" height="15" fill="rgb(245,132,34)" fg:x="126839" fg:w="32"/><text x="93.7856%" y="239.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (249 samples, 0.18%)</title><rect x="93.3874%" y="277" width="0.1836%" height="15" fill="rgb(236,54,3)" fg:x="126638" fg:w="249"/><text x="93.6374%" y="287.50"></text></g><g><title>[libc.so.6] (16 samples, 0.01%)</title><rect x="93.5592%" y="261" width="0.0118%" height="15" fill="rgb(241,173,43)" fg:x="126871" fg:w="16"/><text x="93.8092%" y="271.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="93.5710%" y="277" width="0.0147%" height="15" fill="rgb(215,190,9)" fg:x="126887" fg:w="20"/><text x="93.8210%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::into_future::StreamFuture&lt;component_utils::stream::AsocStream&lt;onion::behaviour::PathId,onion::behaviour::EncryptedStream&gt;&gt;&gt;&gt; (31 samples, 0.02%)</title><rect x="93.5858%" y="277" width="0.0229%" height="15" fill="rgb(242,101,16)" fg:x="126907" fg:w="31"/><text x="93.8358%" y="287.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (537 samples, 0.40%)</title><rect x="93.2502%" y="293" width="0.3960%" height="15" fill="rgb(223,190,21)" fg:x="126452" fg:w="537"/><text x="93.5002%" y="303.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (51 samples, 0.04%)</title><rect x="93.6086%" y="277" width="0.0376%" height="15" fill="rgb(215,228,25)" fg:x="126938" fg:w="51"/><text x="93.8586%" y="287.50"></text></g><g><title>[libc.so.6] (29 samples, 0.02%)</title><rect x="93.7156%" y="277" width="0.0214%" height="15" fill="rgb(225,36,22)" fg:x="127083" fg:w="29"/><text x="93.9656%" y="287.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef0c12bb09c77e1fE.llvm.10503928954504469153 (722 samples, 0.53%)</title><rect x="93.2193%" y="325" width="0.5324%" height="15" fill="rgb(251,106,46)" fg:x="126410" fg:w="722"/><text x="93.4693%" y="335.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (690 samples, 0.51%)</title><rect x="93.2429%" y="309" width="0.5088%" height="15" fill="rgb(208,90,1)" fg:x="126442" fg:w="690"/><text x="93.4929%" y="319.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (132 samples, 0.10%)</title><rect x="93.6544%" y="293" width="0.0973%" height="15" fill="rgb(243,10,4)" fg:x="127000" fg:w="132"/><text x="93.9044%" y="303.50"></text></g><g><title>malloc (18 samples, 0.01%)</title><rect x="93.7384%" y="277" width="0.0133%" height="15" fill="rgb(212,137,27)" fg:x="127114" fg:w="18"/><text x="93.9884%" y="287.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (829 samples, 0.61%)</title><rect x="93.1662%" y="341" width="0.6113%" height="15" fill="rgb(231,220,49)" fg:x="126338" fg:w="829"/><text x="93.4162%" y="351.50"></text></g><g><title>futures_util::async_await::random::gen_index (35 samples, 0.03%)</title><rect x="93.7517%" y="325" width="0.0258%" height="15" fill="rgb(237,96,20)" fg:x="127132" fg:w="35"/><text x="94.0017%" y="335.50"></text></g><g><title>cfree (16 samples, 0.01%)</title><rect x="93.7996%" y="325" width="0.0118%" height="15" fill="rgb(239,229,30)" fg:x="127197" fg:w="16"/><text x="94.0496%" y="335.50"></text></g><g><title>&lt;aes::autodetect::Aes256 as cipher::block::BlockEncrypt&gt;::encrypt_with_backend::inner (18 samples, 0.01%)</title><rect x="93.8380%" y="293" width="0.0133%" height="15" fill="rgb(219,65,33)" fg:x="127249" fg:w="18"/><text x="94.0880%" y="303.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17hfe2516956e30adf5E.llvm.11276228832273757377 (23 samples, 0.02%)</title><rect x="93.8572%" y="293" width="0.0170%" height="15" fill="rgb(243,134,7)" fg:x="127275" fg:w="23"/><text x="94.1072%" y="303.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as universal_hash::UniversalHash&gt;::update_with_backend (52 samples, 0.04%)</title><rect x="93.8815%" y="277" width="0.0383%" height="15" fill="rgb(216,177,54)" fg:x="127308" fg:w="52"/><text x="94.1315%" y="287.50"></text></g><g><title>polyval::backend::clmul::Polyval::mul (36 samples, 0.03%)</title><rect x="93.8933%" y="261" width="0.0265%" height="15" fill="rgb(211,160,20)" fg:x="127324" fg:w="36"/><text x="94.1433%" y="271.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::encrypt_in_place_detached (135 samples, 0.10%)</title><rect x="93.8218%" y="309" width="0.0996%" height="15" fill="rgb(239,85,39)" fg:x="127227" fg:w="135"/><text x="94.0718%" y="319.50"></text></g><g><title>aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt;::compute_tag (64 samples, 0.05%)</title><rect x="93.8741%" y="293" width="0.0472%" height="15" fill="rgb(232,125,22)" fg:x="127298" fg:w="64"/><text x="94.1241%" y="303.50"></text></g><g><title>[libc.so.6] (18 samples, 0.01%)</title><rect x="93.9353%" y="293" width="0.0133%" height="15" fill="rgb(244,57,34)" fg:x="127381" fg:w="18"/><text x="94.1853%" y="303.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as core::convert::From&lt;Aes&gt;&gt;::from (51 samples, 0.04%)</title><rect x="93.9213%" y="309" width="0.0376%" height="15" fill="rgb(214,203,32)" fg:x="127362" fg:w="51"/><text x="94.1713%" y="319.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17h7ec7f3316c3b7b3aE.llvm.11276228832273757377 (14 samples, 0.01%)</title><rect x="93.9486%" y="293" width="0.0103%" height="15" fill="rgb(207,58,43)" fg:x="127399" fg:w="14"/><text x="94.1986%" y="303.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::fill_bytes (65 samples, 0.05%)</title><rect x="93.9589%" y="309" width="0.0479%" height="15" fill="rgb(215,193,15)" fg:x="127413" fg:w="65"/><text x="94.2089%" y="319.50"></text></g><g><title>getrandom::imp::getrandom_inner (64 samples, 0.05%)</title><rect x="93.9597%" y="293" width="0.0472%" height="15" fill="rgb(232,15,44)" fg:x="127414" fg:w="64"/><text x="94.2097%" y="303.50"></text></g><g><title>syscall (48 samples, 0.04%)</title><rect x="93.9715%" y="277" width="0.0354%" height="15" fill="rgb(212,3,48)" fg:x="127430" fg:w="48"/><text x="94.2215%" y="287.50"></text></g><g><title>&lt;aes::ni::Aes256Enc as crypto_common::KeyInit&gt;::new (125 samples, 0.09%)</title><rect x="94.0083%" y="293" width="0.0922%" height="15" fill="rgb(218,128,7)" fg:x="127480" fg:w="125"/><text x="94.2583%" y="303.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aeskeygenassist_si128 (48 samples, 0.04%)</title><rect x="94.0651%" y="277" width="0.0354%" height="15" fill="rgb(226,216,39)" fg:x="127557" fg:w="48"/><text x="94.3151%" y="287.50"></text></g><g><title>[libc.so.6] (36 samples, 0.03%)</title><rect x="94.1005%" y="293" width="0.0265%" height="15" fill="rgb(243,47,51)" fg:x="127605" fg:w="36"/><text x="94.3505%" y="303.50"></text></g><g><title>_ZN66_$LT$aes..autodetect..Aes256$u20$as$u20$crypto_common..KeyInit$GT$3new17h444f744b6f5d3382E.llvm.5862359684729327525 (168 samples, 0.12%)</title><rect x="94.0069%" y="309" width="0.1239%" height="15" fill="rgb(241,183,40)" fg:x="127478" fg:w="168"/><text x="94.2569%" y="319.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (27 samples, 0.02%)</title><rect x="94.2804%" y="277" width="0.0199%" height="15" fill="rgb(231,217,32)" fg:x="127849" fg:w="27"/><text x="94.5304%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (19 samples, 0.01%)</title><rect x="94.3026%" y="277" width="0.0140%" height="15" fill="rgb(229,61,38)" fg:x="127879" fg:w="19"/><text x="94.5526%" y="287.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef173bb298b53411E.llvm.3258444953314870767 (1,665 samples, 1.23%)</title><rect x="93.1241%" y="357" width="1.2278%" height="15" fill="rgb(225,210,5)" fg:x="126281" fg:w="1665"/><text x="93.3741%" y="367.50"></text></g><g><title>onion::tests::settle_down::_{{closure}}::handle_packet (760 samples, 0.56%)</title><rect x="93.7915%" y="341" width="0.5605%" height="15" fill="rgb(231,79,45)" fg:x="127186" fg:w="760"/><text x="94.0415%" y="351.50"></text></g><g><title>onion::behaviour::EncryptedStream::write (733 samples, 0.54%)</title><rect x="93.8114%" y="325" width="0.5405%" height="15" fill="rgb(224,100,7)" fg:x="127213" fg:w="733"/><text x="94.0614%" y="335.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (300 samples, 0.22%)</title><rect x="94.1307%" y="309" width="0.2212%" height="15" fill="rgb(241,198,18)" fg:x="127646" fg:w="300"/><text x="94.3807%" y="319.50"></text></g><g><title>futures_task::waker::wake_arc_raw (104 samples, 0.08%)</title><rect x="94.2753%" y="293" width="0.0767%" height="15" fill="rgb(252,97,53)" fg:x="127842" fg:w="104"/><text x="94.5253%" y="303.50"></text></g><g><title>cfree (48 samples, 0.04%)</title><rect x="94.3166%" y="277" width="0.0354%" height="15" fill="rgb(220,88,7)" fg:x="127898" fg:w="48"/><text x="94.5666%" y="287.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="94.5452%" y="325" width="0.0147%" height="15" fill="rgb(213,176,14)" fg:x="128208" fg:w="20"/><text x="94.7952%" y="335.50"></text></g><g><title>[libc.so.6] (76 samples, 0.06%)</title><rect x="94.5688%" y="309" width="0.0560%" height="15" fill="rgb(246,73,7)" fg:x="128240" fg:w="76"/><text x="94.8188%" y="319.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17haa52716930c8922eE.llvm.10503928954504469153 (102 samples, 0.08%)</title><rect x="94.5599%" y="325" width="0.0752%" height="15" fill="rgb(245,64,36)" fg:x="128228" fg:w="102"/><text x="94.8099%" y="335.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h24ca140c5ec37d4dE.llvm.10237326233175702385 (14 samples, 0.01%)</title><rect x="94.6248%" y="309" width="0.0103%" height="15" fill="rgb(245,80,10)" fg:x="128316" fg:w="14"/><text x="94.8748%" y="319.50"></text></g><g><title>[libc.so.6] (87 samples, 0.06%)</title><rect x="94.6897%" y="309" width="0.0642%" height="15" fill="rgb(232,107,50)" fg:x="128404" fg:w="87"/><text x="94.9397%" y="319.50"></text></g><g><title>&lt;aes::autodetect::Aes256 as cipher::block::BlockEncrypt&gt;::encrypt_with_backend::inner (29 samples, 0.02%)</title><rect x="95.1676%" y="229" width="0.0214%" height="15" fill="rgb(253,3,0)" fg:x="129052" fg:w="29"/><text x="95.4176%" y="239.50"></text></g><g><title>[libc.so.6] (18 samples, 0.01%)</title><rect x="95.1890%" y="229" width="0.0133%" height="15" fill="rgb(212,99,53)" fg:x="129081" fg:w="18"/><text x="95.4390%" y="239.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17hfe2516956e30adf5E.llvm.11276228832273757377 (35 samples, 0.03%)</title><rect x="95.2022%" y="229" width="0.0258%" height="15" fill="rgb(249,111,54)" fg:x="129099" fg:w="35"/><text x="95.4522%" y="239.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as universal_hash::UniversalHash&gt;::update_with_backend (49 samples, 0.04%)</title><rect x="95.2391%" y="213" width="0.0361%" height="15" fill="rgb(249,55,30)" fg:x="129149" fg:w="49"/><text x="95.4891%" y="223.50"></text></g><g><title>polyval::backend::clmul::Polyval::mul (26 samples, 0.02%)</title><rect x="95.2561%" y="197" width="0.0192%" height="15" fill="rgb(237,47,42)" fg:x="129172" fg:w="26"/><text x="95.5061%" y="207.50"></text></g><g><title>aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt;::compute_tag (66 samples, 0.05%)</title><rect x="95.2281%" y="229" width="0.0487%" height="15" fill="rgb(211,20,18)" fg:x="129134" fg:w="66"/><text x="95.4781%" y="239.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (277 samples, 0.20%)</title><rect x="95.1307%" y="245" width="0.2043%" height="15" fill="rgb(231,203,46)" fg:x="129002" fg:w="277"/><text x="95.3807%" y="255.50"></text></g><g><title>subtle::black_box (79 samples, 0.06%)</title><rect x="95.2767%" y="229" width="0.0583%" height="15" fill="rgb(237,142,3)" fg:x="129200" fg:w="79"/><text x="95.5267%" y="239.50"></text></g><g><title>[libc.so.6] (33 samples, 0.02%)</title><rect x="95.3586%" y="229" width="0.0243%" height="15" fill="rgb(241,107,1)" fg:x="129311" fg:w="33"/><text x="95.6086%" y="239.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as core::convert::From&lt;Aes&gt;&gt;::from (99 samples, 0.07%)</title><rect x="95.3350%" y="245" width="0.0730%" height="15" fill="rgb(229,83,13)" fg:x="129279" fg:w="99"/><text x="95.5850%" y="255.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17h7ec7f3316c3b7b3aE.llvm.11276228832273757377 (34 samples, 0.03%)</title><rect x="95.3829%" y="229" width="0.0251%" height="15" fill="rgb(241,91,40)" fg:x="129344" fg:w="34"/><text x="95.6329%" y="239.50"></text></g><g><title>&lt;aes::ni::Aes256Enc as crypto_common::KeyInit&gt;::new (130 samples, 0.10%)</title><rect x="95.4146%" y="229" width="0.0959%" height="15" fill="rgb(225,3,45)" fg:x="129387" fg:w="130"/><text x="95.6646%" y="239.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aeskeygenassist_si128 (60 samples, 0.04%)</title><rect x="95.4662%" y="213" width="0.0442%" height="15" fill="rgb(244,223,14)" fg:x="129457" fg:w="60"/><text x="95.7162%" y="223.50"></text></g><g><title>[libc.so.6] (67 samples, 0.05%)</title><rect x="95.5105%" y="229" width="0.0494%" height="15" fill="rgb(224,124,37)" fg:x="129517" fg:w="67"/><text x="95.7605%" y="239.50"></text></g><g><title>_ZN66_$LT$aes..autodetect..Aes256$u20$as$u20$crypto_common..KeyInit$GT$3new17h444f744b6f5d3382E.llvm.5862359684729327525 (207 samples, 0.15%)</title><rect x="95.4102%" y="245" width="0.1526%" height="15" fill="rgb(251,171,30)" fg:x="129381" fg:w="207"/><text x="95.6602%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (49 samples, 0.04%)</title><rect x="95.5628%" y="245" width="0.0361%" height="15" fill="rgb(236,46,54)" fg:x="129588" fg:w="49"/><text x="95.8128%" y="255.50"></text></g><g><title>malloc (33 samples, 0.02%)</title><rect x="95.5746%" y="229" width="0.0243%" height="15" fill="rgb(245,213,5)" fg:x="129604" fg:w="33"/><text x="95.8246%" y="239.50"></text></g><g><title>[libc.so.6] (26 samples, 0.02%)</title><rect x="95.7406%" y="165" width="0.0192%" height="15" fill="rgb(230,144,27)" fg:x="129829" fg:w="26"/><text x="95.9906%" y="175.50"></text></g><g><title>cfree (28 samples, 0.02%)</title><rect x="95.7597%" y="165" width="0.0206%" height="15" fill="rgb(220,86,6)" fg:x="129855" fg:w="28"/><text x="96.0097%" y="175.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (362 samples, 0.27%)</title><rect x="95.5990%" y="245" width="0.2670%" height="15" fill="rgb(240,20,13)" fg:x="129637" fg:w="362"/><text x="95.8490%" y="255.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (351 samples, 0.26%)</title><rect x="95.6071%" y="229" width="0.2588%" height="15" fill="rgb(217,89,34)" fg:x="129648" fg:w="351"/><text x="95.8571%" y="239.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (344 samples, 0.25%)</title><rect x="95.6123%" y="213" width="0.2537%" height="15" fill="rgb(229,13,5)" fg:x="129655" fg:w="344"/><text x="95.8623%" y="223.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (342 samples, 0.25%)</title><rect x="95.6137%" y="197" width="0.2522%" height="15" fill="rgb(244,67,35)" fg:x="129657" fg:w="342"/><text x="95.8637%" y="207.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (342 samples, 0.25%)</title><rect x="95.6137%" y="181" width="0.2522%" height="15" fill="rgb(221,40,2)" fg:x="129657" fg:w="342"/><text x="95.8637%" y="191.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (112 samples, 0.08%)</title><rect x="95.7833%" y="165" width="0.0826%" height="15" fill="rgb(237,157,21)" fg:x="129887" fg:w="112"/><text x="96.0333%" y="175.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (40 samples, 0.03%)</title><rect x="95.9530%" y="149" width="0.0295%" height="15" fill="rgb(222,94,11)" fg:x="130117" fg:w="40"/><text x="96.2030%" y="159.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (33 samples, 0.02%)</title><rect x="96.0363%" y="117" width="0.0243%" height="15" fill="rgb(249,113,6)" fg:x="130230" fg:w="33"/><text x="96.2863%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (76 samples, 0.06%)</title><rect x="96.0709%" y="101" width="0.0560%" height="15" fill="rgb(238,137,36)" fg:x="130277" fg:w="76"/><text x="96.3209%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (71 samples, 0.05%)</title><rect x="96.0746%" y="85" width="0.0524%" height="15" fill="rgb(210,102,26)" fg:x="130282" fg:w="71"/><text x="96.3246%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (45 samples, 0.03%)</title><rect x="96.0938%" y="69" width="0.0332%" height="15" fill="rgb(218,30,30)" fg:x="130308" fg:w="45"/><text x="96.3438%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (30 samples, 0.02%)</title><rect x="96.1049%" y="53" width="0.0221%" height="15" fill="rgb(214,67,26)" fg:x="130323" fg:w="30"/><text x="96.3549%" y="63.50"></text></g><g><title>tokio::runtime::task::raw::schedule (17 samples, 0.01%)</title><rect x="96.1270%" y="101" width="0.0125%" height="15" fill="rgb(251,9,53)" fg:x="130353" fg:w="17"/><text x="96.3770%" y="111.50"></text></g><g><title>futures_task::waker::wake_arc_raw (228 samples, 0.17%)</title><rect x="95.9824%" y="149" width="0.1681%" height="15" fill="rgb(228,204,25)" fg:x="130157" fg:w="228"/><text x="96.2324%" y="159.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (216 samples, 0.16%)</title><rect x="95.9913%" y="133" width="0.1593%" height="15" fill="rgb(207,153,8)" fg:x="130169" fg:w="216"/><text x="96.2413%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (122 samples, 0.09%)</title><rect x="96.0606%" y="117" width="0.0900%" height="15" fill="rgb(242,9,16)" fg:x="130263" fg:w="122"/><text x="96.3106%" y="127.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (15 samples, 0.01%)</title><rect x="96.1395%" y="101" width="0.0111%" height="15" fill="rgb(217,211,10)" fg:x="130370" fg:w="15"/><text x="96.3895%" y="111.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (350 samples, 0.26%)</title><rect x="95.9124%" y="165" width="0.2581%" height="15" fill="rgb(219,228,52)" fg:x="130062" fg:w="350"/><text x="96.1624%" y="175.50"></text></g><g><title>malloc (27 samples, 0.02%)</title><rect x="96.1506%" y="149" width="0.0199%" height="15" fill="rgb(231,92,29)" fg:x="130385" fg:w="27"/><text x="96.4006%" y="159.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (418 samples, 0.31%)</title><rect x="95.8755%" y="229" width="0.3082%" height="15" fill="rgb(232,8,23)" fg:x="130012" fg:w="418"/><text x="96.1255%" y="239.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (414 samples, 0.31%)</title><rect x="95.8785%" y="213" width="0.3053%" height="15" fill="rgb(216,211,34)" fg:x="130016" fg:w="414"/><text x="96.1285%" y="223.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (412 samples, 0.30%)</title><rect x="95.8799%" y="197" width="0.3038%" height="15" fill="rgb(236,151,0)" fg:x="130018" fg:w="412"/><text x="96.1299%" y="207.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (412 samples, 0.30%)</title><rect x="95.8799%" y="181" width="0.3038%" height="15" fill="rgb(209,168,3)" fg:x="130018" fg:w="412"/><text x="96.1299%" y="191.50"></text></g><g><title>malloc (18 samples, 0.01%)</title><rect x="96.1705%" y="165" width="0.0133%" height="15" fill="rgb(208,129,28)" fg:x="130412" fg:w="18"/><text x="96.4205%" y="175.50"></text></g><g><title>component_utils::set_waker (27 samples, 0.02%)</title><rect x="96.1838%" y="229" width="0.0199%" height="15" fill="rgb(229,78,22)" fg:x="130430" fg:w="27"/><text x="96.4338%" y="239.50"></text></g><g><title>&lt;onion::behaviour::EncryptedStream as futures_core::stream::Stream&gt;::poll_next (1,476 samples, 1.09%)</title><rect x="95.1182%" y="261" width="1.0885%" height="15" fill="rgb(228,187,13)" fg:x="128985" fg:w="1476"/><text x="95.3682%" y="271.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (462 samples, 0.34%)</title><rect x="95.8659%" y="245" width="0.3407%" height="15" fill="rgb(240,119,24)" fg:x="129999" fg:w="462"/><text x="96.1159%" y="255.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (1,502 samples, 1.11%)</title><rect x="95.1093%" y="277" width="1.1076%" height="15" fill="rgb(209,194,42)" fg:x="128973" fg:w="1502"/><text x="95.3593%" y="287.50"></text></g><g><title>[libc.so.6] (14 samples, 0.01%)</title><rect x="96.2066%" y="261" width="0.0103%" height="15" fill="rgb(247,200,46)" fg:x="130461" fg:w="14"/><text x="96.4566%" y="271.50"></text></g><g><title>[libc.so.6] (30 samples, 0.02%)</title><rect x="96.2170%" y="277" width="0.0221%" height="15" fill="rgb(218,76,16)" fg:x="130475" fg:w="30"/><text x="96.4670%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::into_future::StreamFuture&lt;component_utils::stream::AsocStream&lt;onion::behaviour::PathId,onion::behaviour::EncryptedStream&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="96.2391%" y="277" width="0.0170%" height="15" fill="rgb(225,21,48)" fg:x="130505" fg:w="23"/><text x="96.4891%" y="287.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2,181 samples, 1.61%)</title><rect x="94.7701%" y="293" width="1.6083%" height="15" fill="rgb(239,223,50)" fg:x="128513" fg:w="2181"/><text x="95.0201%" y="303.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (166 samples, 0.12%)</title><rect x="96.2560%" y="277" width="0.1224%" height="15" fill="rgb(244,45,21)" fg:x="130528" fg:w="166"/><text x="96.5060%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (14 samples, 0.01%)</title><rect x="96.3681%" y="261" width="0.0103%" height="15" fill="rgb(232,33,43)" fg:x="130680" fg:w="14"/><text x="96.6181%" y="271.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="96.4551%" y="277" width="0.0147%" height="15" fill="rgb(209,8,3)" fg:x="130798" fg:w="20"/><text x="96.7051%" y="287.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hef0c12bb09c77e1fE.llvm.10503928954504469153 (2,516 samples, 1.86%)</title><rect x="94.6352%" y="325" width="1.8554%" height="15" fill="rgb(214,25,53)" fg:x="128330" fg:w="2516"/><text x="94.8852%" y="335.50">_..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (2,355 samples, 1.74%)</title><rect x="94.7539%" y="309" width="1.7367%" height="15" fill="rgb(254,186,54)" fg:x="128491" fg:w="2355"/><text x="95.0039%" y="319.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (144 samples, 0.11%)</title><rect x="96.3844%" y="293" width="0.1062%" height="15" fill="rgb(208,174,49)" fg:x="130702" fg:w="144"/><text x="96.6344%" y="303.50"></text></g><g><title>malloc (23 samples, 0.02%)</title><rect x="96.4736%" y="277" width="0.0170%" height="15" fill="rgb(233,191,51)" fg:x="130823" fg:w="23"/><text x="96.7236%" y="287.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,805 samples, 2.07%)</title><rect x="94.5098%" y="341" width="2.0685%" height="15" fill="rgb(222,134,10)" fg:x="128160" fg:w="2805"/><text x="94.7598%" y="351.50">&lt;..</text></g><g><title>futures_util::async_await::random::gen_index (119 samples, 0.09%)</title><rect x="96.4905%" y="325" width="0.0878%" height="15" fill="rgb(230,226,20)" fg:x="130846" fg:w="119"/><text x="96.7405%" y="335.50"></text></g><g><title>cfree (18 samples, 0.01%)</title><rect x="96.5945%" y="325" width="0.0133%" height="15" fill="rgb(251,111,25)" fg:x="130987" fg:w="18"/><text x="96.8445%" y="335.50"></text></g><g><title>&lt;aes::autodetect::Aes256 as cipher::block::BlockEncrypt&gt;::encrypt_with_backend::inner (32 samples, 0.02%)</title><rect x="96.6314%" y="293" width="0.0236%" height="15" fill="rgb(224,40,46)" fg:x="131037" fg:w="32"/><text x="96.8814%" y="303.50"></text></g><g><title>_ZN71_$LT$aes..autodetect..Aes256$u20$as$u20$cipher..block..BlockEncrypt$GT$20encrypt_with_backend5inner17hfe2516956e30adf5E.llvm.11276228832273757377 (16 samples, 0.01%)</title><rect x="96.6638%" y="293" width="0.0118%" height="15" fill="rgb(236,108,47)" fg:x="131081" fg:w="16"/><text x="96.9138%" y="303.50"></text></g><g><title>&lt;polyval::backend::autodetect::Polyval as universal_hash::UniversalHash&gt;::update_with_backend (62 samples, 0.05%)</title><rect x="96.6838%" y="277" width="0.0457%" height="15" fill="rgb(234,93,0)" fg:x="131108" fg:w="62"/><text x="96.9338%" y="287.50"></text></g><g><title>polyval::backend::clmul::Polyval::mul (40 samples, 0.03%)</title><rect x="96.7000%" y="261" width="0.0295%" height="15" fill="rgb(224,213,32)" fg:x="131130" fg:w="40"/><text x="96.9500%" y="271.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as aead::AeadInPlace&gt;::encrypt_in_place_detached (148 samples, 0.11%)</title><rect x="96.6225%" y="309" width="0.1091%" height="15" fill="rgb(251,11,48)" fg:x="131025" fg:w="148"/><text x="96.8725%" y="319.50"></text></g><g><title>aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt;::compute_tag (76 samples, 0.06%)</title><rect x="96.6756%" y="293" width="0.0560%" height="15" fill="rgb(236,173,5)" fg:x="131097" fg:w="76"/><text x="96.9256%" y="303.50"></text></g><g><title>&lt;aes_gcm::AesGcm&lt;Aes,NonceSize,TagSize&gt; as core::convert::From&lt;Aes&gt;&gt;::from (40 samples, 0.03%)</title><rect x="96.7317%" y="309" width="0.0295%" height="15" fill="rgb(230,95,12)" fg:x="131173" fg:w="40"/><text x="96.9817%" y="319.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::fill_bytes (79 samples, 0.06%)</title><rect x="96.7612%" y="309" width="0.0583%" height="15" fill="rgb(232,209,1)" fg:x="131213" fg:w="79"/><text x="97.0112%" y="319.50"></text></g><g><title>getrandom::imp::getrandom_inner (79 samples, 0.06%)</title><rect x="96.7612%" y="293" width="0.0583%" height="15" fill="rgb(232,6,1)" fg:x="131213" fg:w="79"/><text x="97.0112%" y="303.50"></text></g><g><title>syscall (54 samples, 0.04%)</title><rect x="96.7796%" y="277" width="0.0398%" height="15" fill="rgb(210,224,50)" fg:x="131238" fg:w="54"/><text x="97.0296%" y="287.50"></text></g><g><title>&lt;aes::ni::Aes256Enc as crypto_common::KeyInit&gt;::new (110 samples, 0.08%)</title><rect x="96.8231%" y="293" width="0.0811%" height="15" fill="rgb(228,127,35)" fg:x="131297" fg:w="110"/><text x="97.0731%" y="303.50"></text></g><g><title>core::core_arch::x86::aes::_mm_aeskeygenassist_si128 (50 samples, 0.04%)</title><rect x="96.8674%" y="277" width="0.0369%" height="15" fill="rgb(245,102,45)" fg:x="131357" fg:w="50"/><text x="97.1174%" y="287.50"></text></g><g><title>[libc.so.6] (46 samples, 0.03%)</title><rect x="96.9042%" y="293" width="0.0339%" height="15" fill="rgb(214,1,49)" fg:x="131407" fg:w="46"/><text x="97.1542%" y="303.50"></text></g><g><title>_ZN66_$LT$aes..autodetect..Aes256$u20$as$u20$crypto_common..KeyInit$GT$3new17h444f744b6f5d3382E.llvm.5862359684729327525 (164 samples, 0.12%)</title><rect x="96.8194%" y="309" width="0.1209%" height="15" fill="rgb(226,163,40)" fg:x="131292" fg:w="164"/><text x="97.0694%" y="319.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (23 samples, 0.02%)</title><rect x="97.1144%" y="277" width="0.0170%" height="15" fill="rgb(239,212,28)" fg:x="131692" fg:w="23"/><text x="97.3644%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (19 samples, 0.01%)</title><rect x="97.1314%" y="277" width="0.0140%" height="15" fill="rgb(220,20,13)" fg:x="131715" fg:w="19"/><text x="97.3814%" y="287.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h901eede2de5bd06dE.llvm.3258444953314870767 (3,842 samples, 2.83%)</title><rect x="94.3520%" y="357" width="2.8332%" height="15" fill="rgb(210,164,35)" fg:x="127946" fg:w="3842"/><text x="94.6020%" y="367.50">_Z..</text></g><g><title>onion::tests::settle_down::_{{closure}}::handle_packet (808 samples, 0.60%)</title><rect x="96.5894%" y="341" width="0.5958%" height="15" fill="rgb(248,109,41)" fg:x="130980" fg:w="808"/><text x="96.8394%" y="351.50"></text></g><g><title>onion::behaviour::EncryptedStream::write (783 samples, 0.58%)</title><rect x="96.6078%" y="325" width="0.5774%" height="15" fill="rgb(238,23,50)" fg:x="131005" fg:w="783"/><text x="96.8578%" y="335.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (332 samples, 0.24%)</title><rect x="96.9404%" y="309" width="0.2448%" height="15" fill="rgb(211,48,49)" fg:x="131456" fg:w="332"/><text x="97.1904%" y="319.50"></text></g><g><title>futures_task::waker::wake_arc_raw (109 samples, 0.08%)</title><rect x="97.1048%" y="293" width="0.0804%" height="15" fill="rgb(223,36,21)" fg:x="131679" fg:w="109"/><text x="97.3548%" y="303.50"></text></g><g><title>cfree (54 samples, 0.04%)</title><rect x="97.1454%" y="277" width="0.0398%" height="15" fill="rgb(207,123,46)" fg:x="131734" fg:w="54"/><text x="97.3954%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,285 samples, 4.63%)</title><rect x="92.5600%" y="373" width="4.6348%" height="15" fill="rgb(240,218,32)" fg:x="125516" fg:w="6285"/><text x="92.8100%" y="383.50">tokio..</text></g><g><title>tokio::runtime::task::state::State::ref_dec (107 samples, 0.08%)</title><rect x="97.1948%" y="373" width="0.0789%" height="15" fill="rgb(252,5,43)" fg:x="131801" fg:w="107"/><text x="97.4448%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (81 samples, 0.06%)</title><rect x="97.2737%" y="373" width="0.0597%" height="15" fill="rgb(252,84,19)" fg:x="131908" fg:w="81"/><text x="97.5237%" y="383.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (7,109 samples, 5.24%)</title><rect x="92.1714%" y="389" width="5.2424%" height="15" fill="rgb(243,152,39)" fg:x="124989" fg:w="7109"/><text x="92.4214%" y="399.50">tokio:..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (109 samples, 0.08%)</title><rect x="97.3334%" y="373" width="0.0804%" height="15" fill="rgb(234,160,15)" fg:x="131989" fg:w="109"/><text x="97.5834%" y="383.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (90 samples, 0.07%)</title><rect x="97.4300%" y="389" width="0.0664%" height="15" fill="rgb(237,34,20)" fg:x="132120" fg:w="90"/><text x="97.6800%" y="399.50"></text></g><g><title>chacha20_poly1305_open_avx2 (1,847 samples, 1.36%)</title><rect x="97.6586%" y="229" width="1.3620%" height="15" fill="rgb(229,97,13)" fg:x="132430" fg:w="1847"/><text x="97.9086%" y="239.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (2,216 samples, 1.63%)</title><rect x="97.5075%" y="389" width="1.6342%" height="15" fill="rgb(234,71,50)" fg:x="132225" fg:w="2216"/><text x="97.7575%" y="399.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,011 samples, 1.48%)</title><rect x="97.6586%" y="373" width="1.4830%" height="15" fill="rgb(253,155,4)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="383.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (2,011 samples, 1.48%)</title><rect x="97.6586%" y="357" width="1.4830%" height="15" fill="rgb(222,185,37)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="367.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (2,011 samples, 1.48%)</title><rect x="97.6586%" y="341" width="1.4830%" height="15" fill="rgb(251,177,13)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="351.50"></text></g><g><title>&lt;asynchronous_codec::framed::Framed&lt;T,U&gt; as futures_core::stream::Stream&gt;::poll_next (2,011 samples, 1.48%)</title><rect x="97.6586%" y="325" width="1.4830%" height="15" fill="rgb(250,179,40)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="335.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (2,011 samples, 1.48%)</title><rect x="97.6586%" y="309" width="1.4830%" height="15" fill="rgb(242,44,2)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="319.50"></text></g><g><title>snow::transportstate::TransportState::read_message (2,011 samples, 1.48%)</title><rect x="97.6586%" y="293" width="1.4830%" height="15" fill="rgb(216,177,13)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="303.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (2,011 samples, 1.48%)</title><rect x="97.6586%" y="277" width="1.4830%" height="15" fill="rgb(216,106,43)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="287.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (2,011 samples, 1.48%)</title><rect x="97.6586%" y="261" width="1.4830%" height="15" fill="rgb(216,183,2)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="271.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (2,011 samples, 1.48%)</title><rect x="97.6586%" y="245" width="1.4830%" height="15" fill="rgb(249,75,3)" fg:x="132430" fg:w="2011"/><text x="97.9086%" y="255.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_open (164 samples, 0.12%)</title><rect x="99.0207%" y="229" width="0.1209%" height="15" fill="rgb(219,67,39)" fg:x="134277" fg:w="164"/><text x="99.2707%" y="239.50"></text></g><g><title>[unknown] (111,734 samples, 82.40%)</title><rect x="16.7597%" y="405" width="82.3967%" height="15" fill="rgb(253,228,2)" fg:x="22727" fg:w="111734"/><text x="17.0097%" y="415.50">[unknown]</text></g><g><title>yamux::connection::stream::Stream::send_window_update (19 samples, 0.01%)</title><rect x="99.1424%" y="389" width="0.0140%" height="15" fill="rgb(235,138,27)" fg:x="134442" fg:w="19"/><text x="99.3924%" y="399.50"></text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h778883fe033d9b57E.llvm.11276228832273757377 (28 samples, 0.02%)</title><rect x="99.1637%" y="405" width="0.0206%" height="15" fill="rgb(236,97,51)" fg:x="134471" fg:w="28"/><text x="99.4137%" y="415.50"></text></g><g><title>_ZN5onion5tests11settle_down28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h901eede2de5bd06dE.llvm.3258444953314870767 (36 samples, 0.03%)</title><rect x="99.1940%" y="405" width="0.0265%" height="15" fill="rgb(240,80,30)" fg:x="134512" fg:w="36"/><text x="99.4440%" y="415.50"></text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17hdd7781cb34807322E.llvm.11890601404572722038 (25 samples, 0.02%)</title><rect x="99.2227%" y="405" width="0.0184%" height="15" fill="rgb(230,178,19)" fg:x="134551" fg:w="25"/><text x="99.4727%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.03%)</title><rect x="99.2670%" y="405" width="0.0332%" height="15" fill="rgb(210,190,27)" fg:x="134611" fg:w="45"/><text x="99.5170%" y="415.50"></text></g><g><title>libp2p_swarm::handler::ProtocolsChange::from_full_sets (36 samples, 0.03%)</title><rect x="99.3016%" y="405" width="0.0265%" height="15" fill="rgb(222,107,31)" fg:x="134658" fg:w="36"/><text x="99.5516%" y="415.50"></text></g><g><title>libp2p_swarm::stream_protocol::StreamProtocol::try_from_owned (20 samples, 0.01%)</title><rect x="99.3282%" y="405" width="0.0147%" height="15" fill="rgb(216,127,34)" fg:x="134694" fg:w="20"/><text x="99.5782%" y="415.50"></text></g><g><title>log::STATE (56 samples, 0.04%)</title><rect x="99.3429%" y="405" width="0.0413%" height="15" fill="rgb(234,116,52)" fg:x="134714" fg:w="56"/><text x="99.5929%" y="415.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (56 samples, 0.04%)</title><rect x="99.3429%" y="389" width="0.0413%" height="15" fill="rgb(222,124,15)" fg:x="134714" fg:w="56"/><text x="99.5929%" y="399.50"></text></g><g><title>malloc (60 samples, 0.04%)</title><rect x="99.3842%" y="405" width="0.0442%" height="15" fill="rgb(231,179,28)" fg:x="134770" fg:w="60"/><text x="99.6342%" y="415.50"></text></g><g><title>pow (50 samples, 0.04%)</title><rect x="99.4300%" y="405" width="0.0369%" height="15" fill="rgb(226,93,45)" fg:x="134832" fg:w="50"/><text x="99.6800%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::now (44 samples, 0.03%)</title><rect x="99.4676%" y="405" width="0.0324%" height="15" fill="rgb(215,8,51)" fg:x="134883" fg:w="44"/><text x="99.7176%" y="415.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (14 samples, 0.01%)</title><rect x="99.5030%" y="405" width="0.0103%" height="15" fill="rgb(223,106,5)" fg:x="134931" fg:w="14"/><text x="99.7530%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (203 samples, 0.15%)</title><rect x="99.5244%" y="405" width="0.1497%" height="15" fill="rgb(250,191,5)" fg:x="134960" fg:w="203"/><text x="99.7744%" y="415.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (177 samples, 0.13%)</title><rect x="99.6748%" y="389" width="0.1305%" height="15" fill="rgb(242,132,44)" fg:x="135164" fg:w="177"/><text x="99.9248%" y="399.50"></text></g><g><title>&lt;onion::behaviour::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (16 samples, 0.01%)</title><rect x="99.8053%" y="389" width="0.0118%" height="15" fill="rgb(251,152,29)" fg:x="135341" fg:w="16"/><text x="100.0553%" y="399.50"></text></g><g><title>all (135,605 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(218,179,5)" fg:x="0" fg:w="135605"/><text x="0.2500%" y="447.50"></text></g><g><title>tokio-runtime-w (135,447 samples, 99.88%)</title><rect x="0.1165%" y="421" width="99.8835%" height="15" fill="rgb(227,67,19)" fg:x="158" fg:w="135447"/><text x="0.3665%" y="431.50">tokio-runtime-w</text></g><g><title>tracing_core::dispatcher::GLOBAL_DISPATCH (441 samples, 0.33%)</title><rect x="99.6748%" y="405" width="0.3252%" height="15" fill="rgb(233,119,31)" fg:x="135164" fg:w="441"/><text x="99.9248%" y="415.50"></text></g><g><title>snow::transportstate::TransportState::read_message (226 samples, 0.17%)</title><rect x="99.8333%" y="389" width="0.1667%" height="15" fill="rgb(241,120,22)" fg:x="135379" fg:w="226"/><text x="100.0833%" y="399.50"></text></g></svg></svg>