<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="16493"><g><title>opt (6 samples, 0.04%)</title><rect x="0.0000%" y="613" width="0.0364%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.04%)</title><rect x="0.0000%" y="597" width="0.0364%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="0.0364%" y="597" width="0.0182%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="3"/><text x="0.2864%" y="607.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.01%)</title><rect x="0.0667%" y="581" width="0.0121%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="2"/><text x="0.3167%" y="591.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.08%)</title><rect x="0.0788%" y="581" width="0.0788%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="13"/><text x="0.3288%" y="591.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 0.07%)</title><rect x="0.1637%" y="581" width="0.0667%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="11"/><text x="0.4137%" y="591.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="0.2304%" y="581" width="0.0182%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="3"/><text x="0.4804%" y="591.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="0.2486%" y="581" width="0.0121%" height="15" fill="rgb(228,23,34)" fg:x="41" fg:w="2"/><text x="0.4986%" y="591.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (4 samples, 0.02%)</title><rect x="0.2607%" y="581" width="0.0243%" height="15" fill="rgb(218,30,26)" fg:x="43" fg:w="4"/><text x="0.5107%" y="591.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (8 samples, 0.05%)</title><rect x="0.2910%" y="581" width="0.0485%" height="15" fill="rgb(220,122,19)" fg:x="48" fg:w="8"/><text x="0.5410%" y="591.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (4 samples, 0.02%)</title><rect x="0.3395%" y="581" width="0.0243%" height="15" fill="rgb(250,228,42)" fg:x="56" fg:w="4"/><text x="0.5895%" y="591.50"></text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (7 samples, 0.04%)</title><rect x="0.3638%" y="581" width="0.0424%" height="15" fill="rgb(240,193,28)" fg:x="60" fg:w="7"/><text x="0.6138%" y="591.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (9 samples, 0.05%)</title><rect x="0.4062%" y="581" width="0.0546%" height="15" fill="rgb(216,20,37)" fg:x="67" fg:w="9"/><text x="0.6562%" y="591.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (9 samples, 0.05%)</title><rect x="0.4608%" y="581" width="0.0546%" height="15" fill="rgb(206,188,39)" fg:x="76" fg:w="9"/><text x="0.7108%" y="591.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (15 samples, 0.09%)</title><rect x="0.5154%" y="581" width="0.0909%" height="15" fill="rgb(217,207,13)" fg:x="85" fg:w="15"/><text x="0.7654%" y="591.50"></text></g><g><title>[libc.so.6] (22 samples, 0.13%)</title><rect x="0.6063%" y="581" width="0.1334%" height="15" fill="rgb(231,73,38)" fg:x="100" fg:w="22"/><text x="0.8563%" y="591.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (14 samples, 0.08%)</title><rect x="0.7397%" y="581" width="0.0849%" height="15" fill="rgb(225,20,46)" fg:x="122" fg:w="14"/><text x="0.9897%" y="591.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h123d100259a4829dE.llvm.7601235159431160491 (9 samples, 0.05%)</title><rect x="0.8246%" y="581" width="0.0546%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="9"/><text x="1.0746%" y="591.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (4 samples, 0.02%)</title><rect x="0.8792%" y="581" width="0.0243%" height="15" fill="rgb(221,200,47)" fg:x="145" fg:w="4"/><text x="1.1292%" y="591.50"></text></g><g><title>_ZN4core3ptr123drop_in_place$LT$core..option..Option$LT$futures_util..stream..stream..into_future..StreamFuture$LT$rpc..Stream$GT$$GT$$GT$17h054948f5702270a1E.llvm.317715505389412407 (2 samples, 0.01%)</title><rect x="0.9034%" y="581" width="0.0121%" height="15" fill="rgb(226,26,5)" fg:x="149" fg:w="2"/><text x="1.1534%" y="591.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hb05f16e0d6ae9c2fE.llvm.9573822150619011253 (3 samples, 0.02%)</title><rect x="0.9216%" y="581" width="0.0182%" height="15" fill="rgb(249,33,26)" fg:x="152" fg:w="3"/><text x="1.1716%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="0.9398%" y="581" width="0.0243%" height="15" fill="rgb(235,183,28)" fg:x="155" fg:w="4"/><text x="1.1898%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.01%)</title><rect x="0.9640%" y="581" width="0.0121%" height="15" fill="rgb(221,5,38)" fg:x="159" fg:w="2"/><text x="1.2140%" y="591.50"></text></g><g><title>cfree (11 samples, 0.07%)</title><rect x="0.9762%" y="581" width="0.0667%" height="15" fill="rgb(247,18,42)" fg:x="161" fg:w="11"/><text x="1.2262%" y="591.50"></text></g><g><title>component_utils::set_waker (4 samples, 0.02%)</title><rect x="1.0489%" y="581" width="0.0243%" height="15" fill="rgb(241,131,45)" fg:x="173" fg:w="4"/><text x="1.2989%" y="591.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (3 samples, 0.02%)</title><rect x="1.0732%" y="581" width="0.0182%" height="15" fill="rgb(249,31,29)" fg:x="177" fg:w="3"/><text x="1.3232%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::into_future::StreamFuture&lt;rpc::Stream&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="1.0974%" y="581" width="0.0182%" height="15" fill="rgb(225,111,53)" fg:x="181" fg:w="3"/><text x="1.3474%" y="591.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (13 samples, 0.08%)</title><rect x="1.1217%" y="581" width="0.0788%" height="15" fill="rgb(238,160,17)" fg:x="185" fg:w="13"/><text x="1.3717%" y="591.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.02%)</title><rect x="1.2005%" y="581" width="0.0243%" height="15" fill="rgb(214,148,48)" fg:x="198" fg:w="4"/><text x="1.4505%" y="591.50"></text></g><g><title>futures_task::waker::drop_arc_raw (2 samples, 0.01%)</title><rect x="1.2308%" y="581" width="0.0121%" height="15" fill="rgb(232,36,49)" fg:x="203" fg:w="2"/><text x="1.4808%" y="591.50"></text></g><g><title>futures_task::waker::wake_arc_raw (6 samples, 0.04%)</title><rect x="1.2430%" y="581" width="0.0364%" height="15" fill="rgb(209,103,24)" fg:x="205" fg:w="6"/><text x="1.4930%" y="591.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (12 samples, 0.07%)</title><rect x="1.2793%" y="581" width="0.0728%" height="15" fill="rgb(229,88,8)" fg:x="211" fg:w="12"/><text x="1.5293%" y="591.50"></text></g><g><title>malloc (8 samples, 0.05%)</title><rect x="1.3582%" y="581" width="0.0485%" height="15" fill="rgb(213,181,19)" fg:x="224" fg:w="8"/><text x="1.6082%" y="591.50"></text></g><g><title>rpc::Behaviour::respond (4 samples, 0.02%)</title><rect x="1.4127%" y="581" width="0.0243%" height="15" fill="rgb(254,191,54)" fg:x="233" fg:w="4"/><text x="1.6627%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::now (8 samples, 0.05%)</title><rect x="1.4370%" y="581" width="0.0485%" height="15" fill="rgb(241,83,37)" fg:x="237" fg:w="8"/><text x="1.6870%" y="591.50"></text></g><g><title>std::time::Instant::elapsed (3 samples, 0.02%)</title><rect x="1.4915%" y="581" width="0.0182%" height="15" fill="rgb(233,36,39)" fg:x="246" fg:w="3"/><text x="1.7415%" y="591.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.02%)</title><rect x="1.4915%" y="565" width="0.0182%" height="15" fill="rgb(226,3,54)" fg:x="246" fg:w="3"/><text x="1.7415%" y="575.50"></text></g><g><title>std::sys::unix::time::Instant::now (3 samples, 0.02%)</title><rect x="1.4915%" y="549" width="0.0182%" height="15" fill="rgb(245,192,40)" fg:x="246" fg:w="3"/><text x="1.7415%" y="559.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (12 samples, 0.07%)</title><rect x="1.5279%" y="581" width="0.0728%" height="15" fill="rgb(238,167,29)" fg:x="252" fg:w="12"/><text x="1.7779%" y="591.50"></text></g><g><title>[anon] (260 samples, 1.58%)</title><rect x="0.0667%" y="597" width="1.5764%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="260"/><text x="0.3167%" y="607.50"></text></g><g><title>yamux::connection::stream::flow_control::FlowController::next_window_update (7 samples, 0.04%)</title><rect x="1.6007%" y="581" width="0.0424%" height="15" fill="rgb(231,60,39)" fg:x="264" fg:w="7"/><text x="1.8507%" y="591.50"></text></g><g><title>[libc.so.6] (35 samples, 0.21%)</title><rect x="2.3828%" y="133" width="0.2122%" height="15" fill="rgb(208,69,12)" fg:x="393" fg:w="35"/><text x="2.6328%" y="143.50"></text></g><g><title>[libc.so.6] (81 samples, 0.49%)</title><rect x="2.6193%" y="117" width="0.4911%" height="15" fill="rgb(235,93,37)" fg:x="432" fg:w="81"/><text x="2.8693%" y="127.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (86 samples, 0.52%)</title><rect x="2.5950%" y="133" width="0.5214%" height="15" fill="rgb(213,116,39)" fg:x="428" fg:w="86"/><text x="2.8450%" y="143.50"></text></g><g><title>_ZN5tokio7runtime4park5Inner6unpark17hca359ebcdbebede2E.llvm.16602884379669939123 (3 samples, 0.02%)</title><rect x="3.1165%" y="133" width="0.0182%" height="15" fill="rgb(222,207,29)" fg:x="514" fg:w="3"/><text x="3.3665%" y="143.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (18 samples, 0.11%)</title><rect x="3.1347%" y="133" width="0.1091%" height="15" fill="rgb(206,96,30)" fg:x="517" fg:w="18"/><text x="3.3847%" y="143.50"></text></g><g><title>_ZN5tokio7runtime4park5clone17hcae8f0f528229018E.llvm.16602884379669939123 (3 samples, 0.02%)</title><rect x="3.2256%" y="117" width="0.0182%" height="15" fill="rgb(218,138,4)" fg:x="532" fg:w="3"/><text x="3.4756%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="3.4621%" y="117" width="0.0121%" height="15" fill="rgb(250,191,14)" fg:x="571" fg:w="2"/><text x="3.7121%" y="127.50"></text></g><g><title>&lt;bool as component_utils::codec::Codec&gt;::encode (2 samples, 0.01%)</title><rect x="3.5045%" y="101" width="0.0121%" height="15" fill="rgb(239,60,40)" fg:x="578" fg:w="2"/><text x="3.7545%" y="111.50"></text></g><g><title>&lt;component_utils::codec::Reminder as component_utils::codec::Codec&gt;::encode (2 samples, 0.01%)</title><rect x="3.5166%" y="101" width="0.0121%" height="15" fill="rgb(206,27,48)" fg:x="580" fg:w="2"/><text x="3.7666%" y="111.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="3.7652%" y="53" width="0.0121%" height="15" fill="rgb(225,35,8)" fg:x="621" fg:w="2"/><text x="4.0152%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.01%)</title><rect x="3.7652%" y="37" width="0.0121%" height="15" fill="rgb(250,213,24)" fg:x="621" fg:w="2"/><text x="4.0152%" y="47.50"></text></g><g><title>&lt;u64 as component_utils::codec::Codec&gt;::encode (62 samples, 0.38%)</title><rect x="3.5288%" y="101" width="0.3759%" height="15" fill="rgb(247,123,22)" fg:x="582" fg:w="62"/><text x="3.7788%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (45 samples, 0.27%)</title><rect x="3.6318%" y="85" width="0.2728%" height="15" fill="rgb(231,138,38)" fg:x="599" fg:w="45"/><text x="3.8818%" y="95.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hb05f16e0d6ae9c2fE.llvm.9573822150619011253 (36 samples, 0.22%)</title><rect x="3.6864%" y="69" width="0.2183%" height="15" fill="rgb(231,145,46)" fg:x="608" fg:w="36"/><text x="3.9364%" y="79.50"></text></g><g><title>malloc (21 samples, 0.13%)</title><rect x="3.7774%" y="53" width="0.1273%" height="15" fill="rgb(251,118,11)" fg:x="623" fg:w="21"/><text x="4.0274%" y="63.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.11%)</title><rect x="4.1290%" y="85" width="0.1091%" height="15" fill="rgb(217,147,25)" fg:x="681" fg:w="18"/><text x="4.3790%" y="95.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="4.2078%" y="69" width="0.0303%" height="15" fill="rgb(247,81,37)" fg:x="694" fg:w="5"/><text x="4.4578%" y="79.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (14 samples, 0.08%)</title><rect x="4.2382%" y="85" width="0.0849%" height="15" fill="rgb(209,12,38)" fg:x="699" fg:w="14"/><text x="4.4882%" y="95.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="4.3230%" y="85" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="713" fg:w="2"/><text x="4.5730%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="4.3230%" y="69" width="0.0121%" height="15" fill="rgb(248,47,43)" fg:x="713" fg:w="2"/><text x="4.5730%" y="79.50"></text></g><g><title>cfree (18 samples, 0.11%)</title><rect x="4.3352%" y="85" width="0.1091%" height="15" fill="rgb(221,10,30)" fg:x="715" fg:w="18"/><text x="4.5852%" y="95.50"></text></g><g><title>[libc.so.6] (10 samples, 0.06%)</title><rect x="4.3837%" y="69" width="0.0606%" height="15" fill="rgb(210,229,1)" fg:x="723" fg:w="10"/><text x="4.6337%" y="79.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (39 samples, 0.24%)</title><rect x="4.4746%" y="69" width="0.2365%" height="15" fill="rgb(222,148,37)" fg:x="738" fg:w="39"/><text x="4.7246%" y="79.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (25 samples, 0.15%)</title><rect x="4.7172%" y="69" width="0.1516%" height="15" fill="rgb(234,67,33)" fg:x="778" fg:w="25"/><text x="4.9672%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;futures_util::stream::stream::into_future::StreamFuture&lt;rpc::Stream&gt;&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="4.8384%" y="53" width="0.0303%" height="15" fill="rgb(247,98,35)" fg:x="798" fg:w="5"/><text x="5.0884%" y="63.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (179 samples, 1.09%)</title><rect x="3.9047%" y="101" width="1.0853%" height="15" fill="rgb(247,138,52)" fg:x="644" fg:w="179"/><text x="4.1547%" y="111.50"></text></g><g><title>futures_task::waker::wake_arc_raw (90 samples, 0.55%)</title><rect x="4.4443%" y="85" width="0.5457%" height="15" fill="rgb(213,79,30)" fg:x="733" fg:w="90"/><text x="4.6943%" y="95.50"></text></g><g><title>cfree (20 samples, 0.12%)</title><rect x="4.8687%" y="69" width="0.1213%" height="15" fill="rgb(246,177,23)" fg:x="803" fg:w="20"/><text x="5.1187%" y="79.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="4.9536%" y="53" width="0.0364%" height="15" fill="rgb(230,62,27)" fg:x="817" fg:w="6"/><text x="5.2036%" y="63.50"></text></g><g><title>rpc::Stream::write (284 samples, 1.72%)</title><rect x="3.4742%" y="117" width="1.7219%" height="15" fill="rgb(216,154,8)" fg:x="573" fg:w="284"/><text x="3.7242%" y="127.50"></text></g><g><title>std::sys::unix::time::Timespec::now (34 samples, 0.21%)</title><rect x="4.9900%" y="101" width="0.2061%" height="15" fill="rgb(244,35,45)" fg:x="823" fg:w="34"/><text x="5.2400%" y="111.50"></text></g><g><title>clock_gettime (33 samples, 0.20%)</title><rect x="4.9961%" y="85" width="0.2001%" height="15" fill="rgb(251,115,12)" fg:x="824" fg:w="33"/><text x="5.2461%" y="95.50"></text></g><g><title>__vdso_clock_gettime (32 samples, 0.19%)</title><rect x="5.0021%" y="69" width="0.1940%" height="15" fill="rgb(240,54,50)" fg:x="825" fg:w="32"/><text x="5.2521%" y="79.50"></text></g><g><title>std::sys::unix::time::Timespec::now (38 samples, 0.23%)</title><rect x="5.1961%" y="117" width="0.2304%" height="15" fill="rgb(233,84,52)" fg:x="857" fg:w="38"/><text x="5.4461%" y="127.50"></text></g><g><title>clock_gettime (38 samples, 0.23%)</title><rect x="5.1961%" y="101" width="0.2304%" height="15" fill="rgb(207,117,47)" fg:x="857" fg:w="38"/><text x="5.4461%" y="111.50"></text></g><g><title>__vdso_clock_gettime (37 samples, 0.22%)</title><rect x="5.2022%" y="85" width="0.2243%" height="15" fill="rgb(249,43,39)" fg:x="858" fg:w="37"/><text x="5.4522%" y="95.50"></text></g><g><title>rpc::Behaviour::request (363 samples, 2.20%)</title><rect x="3.2438%" y="133" width="2.2009%" height="15" fill="rgb(209,38,44)" fg:x="535" fg:w="363"/><text x="3.4938%" y="143.50">r..</text></g><g><title>std::time::Instant::now (3 samples, 0.02%)</title><rect x="5.4265%" y="117" width="0.0182%" height="15" fill="rgb(236,212,23)" fg:x="895" fg:w="3"/><text x="5.6765%" y="127.50"></text></g><g><title>std::sys::unix::time::Instant::now (3 samples, 0.02%)</title><rect x="5.4265%" y="101" width="0.0182%" height="15" fill="rgb(242,79,21)" fg:x="895" fg:w="3"/><text x="5.6765%" y="111.50"></text></g><g><title>[libc.so.6] (7 samples, 0.04%)</title><rect x="5.4932%" y="117" width="0.0424%" height="15" fill="rgb(211,96,35)" fg:x="906" fg:w="7"/><text x="5.7432%" y="127.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="5.7661%" y="53" width="0.0243%" height="15" fill="rgb(253,215,40)" fg:x="951" fg:w="4"/><text x="6.0161%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="5.7661%" y="37" width="0.0243%" height="15" fill="rgb(211,81,21)" fg:x="951" fg:w="4"/><text x="6.0161%" y="47.50"></text></g><g><title>&lt;u64 as component_utils::codec::Codec&gt;::encode (47 samples, 0.28%)</title><rect x="5.6266%" y="101" width="0.2850%" height="15" fill="rgb(208,190,38)" fg:x="928" fg:w="47"/><text x="5.8766%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.22%)</title><rect x="5.6933%" y="85" width="0.2183%" height="15" fill="rgb(235,213,38)" fg:x="939" fg:w="36"/><text x="5.9433%" y="95.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hb05f16e0d6ae9c2fE.llvm.9573822150619011253 (31 samples, 0.19%)</title><rect x="5.7236%" y="69" width="0.1880%" height="15" fill="rgb(237,122,38)" fg:x="944" fg:w="31"/><text x="5.9736%" y="79.50"></text></g><g><title>malloc (20 samples, 0.12%)</title><rect x="5.7903%" y="53" width="0.1213%" height="15" fill="rgb(244,218,35)" fg:x="955" fg:w="20"/><text x="6.0403%" y="63.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.11%)</title><rect x="6.1177%" y="85" width="0.1091%" height="15" fill="rgb(240,68,47)" fg:x="1009" fg:w="18"/><text x="6.3677%" y="95.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="6.2148%" y="69" width="0.0121%" height="15" fill="rgb(210,16,53)" fg:x="1025" fg:w="2"/><text x="6.4648%" y="79.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (22 samples, 0.13%)</title><rect x="6.2269%" y="85" width="0.1334%" height="15" fill="rgb(235,124,12)" fg:x="1027" fg:w="22"/><text x="6.4769%" y="95.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="6.3603%" y="85" width="0.0121%" height="15" fill="rgb(224,169,11)" fg:x="1049" fg:w="2"/><text x="6.6103%" y="95.50"></text></g><g><title>cfree (19 samples, 0.12%)</title><rect x="6.3724%" y="85" width="0.1152%" height="15" fill="rgb(250,166,2)" fg:x="1051" fg:w="19"/><text x="6.6224%" y="95.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="6.4512%" y="69" width="0.0364%" height="15" fill="rgb(242,216,29)" fg:x="1064" fg:w="6"/><text x="6.7012%" y="79.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (27 samples, 0.16%)</title><rect x="6.5543%" y="69" width="0.1637%" height="15" fill="rgb(230,116,27)" fg:x="1081" fg:w="27"/><text x="6.8043%" y="79.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (38 samples, 0.23%)</title><rect x="6.7180%" y="69" width="0.2304%" height="15" fill="rgb(228,99,48)" fg:x="1108" fg:w="38"/><text x="6.9680%" y="79.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (206 samples, 1.25%)</title><rect x="5.9116%" y="101" width="1.2490%" height="15" fill="rgb(253,11,6)" fg:x="975" fg:w="206"/><text x="6.1616%" y="111.50"></text></g><g><title>futures_task::waker::wake_arc_raw (111 samples, 0.67%)</title><rect x="6.4876%" y="85" width="0.6730%" height="15" fill="rgb(247,143,39)" fg:x="1070" fg:w="111"/><text x="6.7376%" y="95.50"></text></g><g><title>cfree (35 samples, 0.21%)</title><rect x="6.9484%" y="69" width="0.2122%" height="15" fill="rgb(236,97,10)" fg:x="1146" fg:w="35"/><text x="7.1984%" y="79.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="7.1060%" y="53" width="0.0546%" height="15" fill="rgb(233,208,19)" fg:x="1172" fg:w="9"/><text x="7.3560%" y="63.50"></text></g><g><title>std::sys::unix::time::Timespec::now (46 samples, 0.28%)</title><rect x="7.1606%" y="101" width="0.2789%" height="15" fill="rgb(216,164,2)" fg:x="1181" fg:w="46"/><text x="7.4106%" y="111.50"></text></g><g><title>clock_gettime (45 samples, 0.27%)</title><rect x="7.1667%" y="85" width="0.2728%" height="15" fill="rgb(220,129,5)" fg:x="1182" fg:w="45"/><text x="7.4167%" y="95.50"></text></g><g><title>__vdso_clock_gettime (45 samples, 0.27%)</title><rect x="7.1667%" y="69" width="0.2728%" height="15" fill="rgb(242,17,10)" fg:x="1182" fg:w="45"/><text x="7.4167%" y="79.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17h8a0de8ff19c872a5E.llvm.10355436913996604420 (955 samples, 5.79%)</title><rect x="1.6552%" y="165" width="5.7903%" height="15" fill="rgb(242,107,0)" fg:x="273" fg:w="955"/><text x="1.9052%" y="175.50">_ZN3rpc..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (955 samples, 5.79%)</title><rect x="1.6552%" y="149" width="5.7903%" height="15" fill="rgb(251,28,31)" fg:x="273" fg:w="955"/><text x="1.9052%" y="159.50">&lt;future..</text></g><g><title>rpc::Behaviour::respond (330 samples, 2.00%)</title><rect x="5.4447%" y="133" width="2.0008%" height="15" fill="rgb(233,223,10)" fg:x="898" fg:w="330"/><text x="5.6947%" y="143.50">r..</text></g><g><title>rpc::Stream::write (315 samples, 1.91%)</title><rect x="5.5357%" y="117" width="1.9099%" height="15" fill="rgb(215,21,27)" fg:x="913" fg:w="315"/><text x="5.7857%" y="127.50">r..</text></g><g><title>std::sys::unix::futex::futex_wait (14 samples, 0.08%)</title><rect x="7.4941%" y="117" width="0.0849%" height="15" fill="rgb(232,23,21)" fg:x="1236" fg:w="14"/><text x="7.7441%" y="127.50"></text></g><g><title>syscall (13 samples, 0.08%)</title><rect x="7.5002%" y="101" width="0.0788%" height="15" fill="rgb(244,5,23)" fg:x="1237" fg:w="13"/><text x="7.7502%" y="111.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (23 samples, 0.14%)</title><rect x="7.5790%" y="117" width="0.1395%" height="15" fill="rgb(226,81,46)" fg:x="1250" fg:w="23"/><text x="7.8290%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.13%)</title><rect x="7.5850%" y="101" width="0.1334%" height="15" fill="rgb(247,70,30)" fg:x="1251" fg:w="22"/><text x="7.8350%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.13%)</title><rect x="7.5850%" y="85" width="0.1334%" height="15" fill="rgb(212,68,19)" fg:x="1251" fg:w="22"/><text x="7.8350%" y="95.50"></text></g><g><title>[libc.so.6] (1,002 samples, 6.08%)</title><rect x="1.6492%" y="581" width="6.0753%" height="15" fill="rgb(240,187,13)" fg:x="272" fg:w="1002"/><text x="1.8992%" y="591.50">[libc.so..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,001 samples, 6.07%)</title><rect x="1.6552%" y="565" width="6.0692%" height="15" fill="rgb(223,113,26)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="575.50">std::sys..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="549" width="6.0692%" height="15" fill="rgb(206,192,2)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="559.50">&lt;alloc::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="533" width="6.0692%" height="15" fill="rgb(241,108,4)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="543.50">&lt;alloc::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="517" width="6.0692%" height="15" fill="rgb(247,173,49)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="527.50">core::op..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="501" width="6.0692%" height="15" fill="rgb(224,114,35)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="511.50">std::thr..</text></g><g><title>std::panic::catch_unwind (1,001 samples, 6.07%)</title><rect x="1.6552%" y="485" width="6.0692%" height="15" fill="rgb(245,159,27)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="495.50">std::pan..</text></g><g><title>std::panicking::try (1,001 samples, 6.07%)</title><rect x="1.6552%" y="469" width="6.0692%" height="15" fill="rgb(245,172,44)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="479.50">std::pan..</text></g><g><title>std::panicking::try::do_call (1,001 samples, 6.07%)</title><rect x="1.6552%" y="453" width="6.0692%" height="15" fill="rgb(236,23,11)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="463.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="437" width="6.0692%" height="15" fill="rgb(205,117,38)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="447.50">&lt;core::p..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="421" width="6.0692%" height="15" fill="rgb(237,72,25)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="431.50">std::thr..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,001 samples, 6.07%)</title><rect x="1.6552%" y="405" width="6.0692%" height="15" fill="rgb(244,70,9)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="415.50">std::sys..</text></g><g><title>test::run_test::_{{closure}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="389" width="6.0692%" height="15" fill="rgb(217,125,39)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="399.50">test::ru..</text></g><g><title>test::run_test::_{{closure}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="373" width="6.0692%" height="15" fill="rgb(235,36,10)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="383.50">test::ru..</text></g><g><title>test::run_test_in_process (1,001 samples, 6.07%)</title><rect x="1.6552%" y="357" width="6.0692%" height="15" fill="rgb(251,123,47)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="367.50">test::ru..</text></g><g><title>std::panic::catch_unwind (1,001 samples, 6.07%)</title><rect x="1.6552%" y="341" width="6.0692%" height="15" fill="rgb(221,13,13)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="351.50">std::pan..</text></g><g><title>std::panicking::try (1,001 samples, 6.07%)</title><rect x="1.6552%" y="325" width="6.0692%" height="15" fill="rgb(238,131,9)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="335.50">std::pan..</text></g><g><title>std::panicking::try::do_call (1,001 samples, 6.07%)</title><rect x="1.6552%" y="309" width="6.0692%" height="15" fill="rgb(211,50,8)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="319.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="293" width="6.0692%" height="15" fill="rgb(245,182,24)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="303.50">&lt;core::p..</text></g><g><title>test::run_test_in_process::_{{closure}} (1,001 samples, 6.07%)</title><rect x="1.6552%" y="277" width="6.0692%" height="15" fill="rgb(242,14,37)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="287.50">test::ru..</text></g><g><title>test::__rust_begin_short_backtrace (1,001 samples, 6.07%)</title><rect x="1.6552%" y="261" width="6.0692%" height="15" fill="rgb(246,228,12)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="271.50">test::__..</text></g><g><title>core::ops::function::FnOnce::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="245" width="6.0692%" height="15" fill="rgb(213,55,15)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="255.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (1,001 samples, 6.07%)</title><rect x="1.6552%" y="229" width="6.0692%" height="15" fill="rgb(209,9,3)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="239.50">core::op..</text></g><g><title>rpc::test::test_random_rpc_calls (1,001 samples, 6.07%)</title><rect x="1.6552%" y="213" width="6.0692%" height="15" fill="rgb(230,59,30)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="223.50">rpc::tes..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,001 samples, 6.07%)</title><rect x="1.6552%" y="197" width="6.0692%" height="15" fill="rgb(209,121,21)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="207.50">tokio::r..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,001 samples, 6.07%)</title><rect x="1.6552%" y="181" width="6.0692%" height="15" fill="rgb(220,109,13)" fg:x="273" fg:w="1001"/><text x="1.9052%" y="191.50">tokio::r..</text></g><g><title>_ZN5tokio7runtime4park5Inner4park17h733ffcefa732590aE.llvm.16602884379669939123 (46 samples, 0.28%)</title><rect x="7.4456%" y="165" width="0.2789%" height="15" fill="rgb(232,18,1)" fg:x="1228" fg:w="46"/><text x="7.6956%" y="175.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (38 samples, 0.23%)</title><rect x="7.4941%" y="149" width="0.2304%" height="15" fill="rgb(215,41,42)" fg:x="1236" fg:w="38"/><text x="7.7441%" y="159.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (38 samples, 0.23%)</title><rect x="7.4941%" y="133" width="0.2304%" height="15" fill="rgb(224,123,36)" fg:x="1236" fg:w="38"/><text x="7.7441%" y="143.50"></text></g><g><title>[libc.so.6] (1,004 samples, 6.09%)</title><rect x="1.6431%" y="597" width="6.0874%" height="15" fill="rgb(240,125,3)" fg:x="271" fg:w="1004"/><text x="1.8931%" y="607.50">[libc.so..</text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (3 samples, 0.02%)</title><rect x="7.7306%" y="581" width="0.0182%" height="15" fill="rgb(205,98,50)" fg:x="1275" fg:w="3"/><text x="7.9806%" y="591.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (14 samples, 0.08%)</title><rect x="7.7487%" y="581" width="0.0849%" height="15" fill="rgb(205,185,37)" fg:x="1278" fg:w="14"/><text x="7.9987%" y="591.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.01%)</title><rect x="7.8518%" y="581" width="0.0121%" height="15" fill="rgb(238,207,15)" fg:x="1295" fg:w="2"/><text x="8.1018%" y="591.50"></text></g><g><title>[opt] (24 samples, 0.15%)</title><rect x="7.7306%" y="597" width="0.1455%" height="15" fill="rgb(213,199,42)" fg:x="1275" fg:w="24"/><text x="7.9806%" y="607.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="7.8821%" y="581" width="0.0182%" height="15" fill="rgb(235,201,11)" fg:x="1300" fg:w="3"/><text x="8.1321%" y="591.50"></text></g><g><title>&lt;component_utils::codec::Reminder as component_utils::codec::Codec&gt;::encode (3 samples, 0.02%)</title><rect x="7.9124%" y="581" width="0.0182%" height="15" fill="rgb(207,46,11)" fg:x="1305" fg:w="3"/><text x="8.1624%" y="591.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.01%)</title><rect x="7.9306%" y="581" width="0.0121%" height="15" fill="rgb(241,35,35)" fg:x="1308" fg:w="2"/><text x="8.1806%" y="591.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.02%)</title><rect x="7.9428%" y="581" width="0.0243%" height="15" fill="rgb(243,32,47)" fg:x="1310" fg:w="4"/><text x="8.1928%" y="591.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="7.9670%" y="581" width="0.0182%" height="15" fill="rgb(247,202,23)" fg:x="1314" fg:w="3"/><text x="8.2170%" y="591.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="7.9852%" y="581" width="0.0546%" height="15" fill="rgb(219,102,11)" fg:x="1317" fg:w="9"/><text x="8.2352%" y="591.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (3 samples, 0.02%)</title><rect x="8.0398%" y="581" width="0.0182%" height="15" fill="rgb(243,110,44)" fg:x="1326" fg:w="3"/><text x="8.2898%" y="591.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="8.1732%" y="565" width="0.0303%" height="15" fill="rgb(222,74,54)" fg:x="1348" fg:w="5"/><text x="8.4232%" y="575.50"></text></g><g><title>futures_task::waker::clone_arc_raw (6 samples, 0.04%)</title><rect x="8.2035%" y="565" width="0.0364%" height="15" fill="rgb(216,99,12)" fg:x="1353" fg:w="6"/><text x="8.4535%" y="575.50"></text></g><g><title>futures_task::waker::drop_arc_raw (4 samples, 0.02%)</title><rect x="8.2399%" y="565" width="0.0243%" height="15" fill="rgb(226,22,26)" fg:x="1359" fg:w="4"/><text x="8.4899%" y="575.50"></text></g><g><title>futures_task::waker::clone_arc_raw (5 samples, 0.03%)</title><rect x="8.4278%" y="533" width="0.0303%" height="15" fill="rgb(217,163,10)" fg:x="1390" fg:w="5"/><text x="8.6778%" y="543.50"></text></g><g><title>libp2p_kad::jobs::AddProviderJob::poll (34 samples, 0.21%)</title><rect x="8.2641%" y="565" width="0.2061%" height="15" fill="rgb(213,25,53)" fg:x="1363" fg:w="34"/><text x="8.5141%" y="575.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (33 samples, 0.20%)</title><rect x="8.2702%" y="549" width="0.2001%" height="15" fill="rgb(252,105,26)" fg:x="1364" fg:w="33"/><text x="8.5202%" y="559.50"></text></g><g><title>futures_task::waker::drop_arc_raw (2 samples, 0.01%)</title><rect x="8.4581%" y="533" width="0.0121%" height="15" fill="rgb(220,39,43)" fg:x="1395" fg:w="2"/><text x="8.7081%" y="543.50"></text></g><g><title>futures_task::waker::clone_arc_raw (4 samples, 0.02%)</title><rect x="8.5733%" y="533" width="0.0243%" height="15" fill="rgb(229,68,48)" fg:x="1414" fg:w="4"/><text x="8.8233%" y="543.50"></text></g><g><title>libp2p_kad::jobs::PutRecordJob::poll (31 samples, 0.19%)</title><rect x="8.4703%" y="565" width="0.1880%" height="15" fill="rgb(252,8,32)" fg:x="1397" fg:w="31"/><text x="8.7203%" y="575.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (29 samples, 0.18%)</title><rect x="8.4824%" y="549" width="0.1758%" height="15" fill="rgb(223,20,43)" fg:x="1399" fg:w="29"/><text x="8.7324%" y="559.50"></text></g><g><title>futures_task::waker::drop_arc_raw (10 samples, 0.06%)</title><rect x="8.5976%" y="533" width="0.0606%" height="15" fill="rgb(229,81,49)" fg:x="1418" fg:w="10"/><text x="8.8476%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::now (13 samples, 0.08%)</title><rect x="8.6643%" y="565" width="0.0788%" height="15" fill="rgb(236,28,36)" fg:x="1429" fg:w="13"/><text x="8.9143%" y="575.50"></text></g><g><title>clock_gettime (12 samples, 0.07%)</title><rect x="8.6703%" y="549" width="0.0728%" height="15" fill="rgb(249,185,26)" fg:x="1430" fg:w="12"/><text x="8.9203%" y="559.50"></text></g><g><title>__vdso_clock_gettime (12 samples, 0.07%)</title><rect x="8.6703%" y="533" width="0.0728%" height="15" fill="rgb(249,174,33)" fg:x="1430" fg:w="12"/><text x="8.9203%" y="543.50"></text></g><g><title>&lt;libp2p_kad::behaviour::Behaviour&lt;TStore&gt; as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (113 samples, 0.69%)</title><rect x="8.0640%" y="581" width="0.6851%" height="15" fill="rgb(233,201,37)" fg:x="1330" fg:w="113"/><text x="8.3140%" y="591.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (12 samples, 0.07%)</title><rect x="8.7492%" y="581" width="0.0728%" height="15" fill="rgb(221,78,26)" fg:x="1443" fg:w="12"/><text x="8.9992%" y="591.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (3 samples, 0.02%)</title><rect x="8.8219%" y="581" width="0.0182%" height="15" fill="rgb(250,127,30)" fg:x="1455" fg:w="3"/><text x="9.0719%" y="591.50"></text></g><g><title>&lt;libp2p_tcp::Transport&lt;T&gt; as libp2p_core::transport::Transport&gt;::poll (2 samples, 0.01%)</title><rect x="8.8401%" y="581" width="0.0121%" height="15" fill="rgb(230,49,44)" fg:x="1458" fg:w="2"/><text x="9.0901%" y="591.50"></text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (3 samples, 0.02%)</title><rect x="8.8522%" y="581" width="0.0182%" height="15" fill="rgb(229,67,23)" fg:x="1460" fg:w="3"/><text x="9.1022%" y="591.50"></text></g><g><title>&lt;u64 as component_utils::codec::Codec&gt;::encode (2 samples, 0.01%)</title><rect x="8.8704%" y="581" width="0.0121%" height="15" fill="rgb(249,83,47)" fg:x="1463" fg:w="2"/><text x="9.1204%" y="591.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="8.8826%" y="581" width="0.0243%" height="15" fill="rgb(215,43,3)" fg:x="1465" fg:w="4"/><text x="9.1326%" y="591.50"></text></g><g><title>rpc::Stream::write (2 samples, 0.01%)</title><rect x="9.0341%" y="565" width="0.0121%" height="15" fill="rgb(238,154,13)" fg:x="1490" fg:w="2"/><text x="9.2841%" y="575.50"></text></g><g><title>[libc.so.6] (24 samples, 0.15%)</title><rect x="8.9068%" y="581" width="0.1455%" height="15" fill="rgb(219,56,2)" fg:x="1469" fg:w="24"/><text x="9.1568%" y="591.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (6 samples, 0.04%)</title><rect x="9.0523%" y="581" width="0.0364%" height="15" fill="rgb(233,0,4)" fg:x="1493" fg:w="6"/><text x="9.3023%" y="591.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17hee42f728841e67feE.llvm.6402655284677190421 (4 samples, 0.02%)</title><rect x="9.0887%" y="581" width="0.0243%" height="15" fill="rgb(235,30,7)" fg:x="1499" fg:w="4"/><text x="9.3387%" y="591.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h123d100259a4829dE.llvm.7601235159431160491 (3 samples, 0.02%)</title><rect x="9.1130%" y="581" width="0.0182%" height="15" fill="rgb(250,79,13)" fg:x="1503" fg:w="3"/><text x="9.3630%" y="591.50"></text></g><g><title>&lt;T as libp2p_core::transport::boxed::Abstract&lt;O&gt;&gt;::poll (27 samples, 0.16%)</title><rect x="9.1372%" y="517" width="0.1637%" height="15" fill="rgb(211,146,34)" fg:x="1507" fg:w="27"/><text x="9.3872%" y="527.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThen&lt;T,C&gt; as libp2p_core::transport::Transport&gt;::poll (27 samples, 0.16%)</title><rect x="9.1372%" y="501" width="0.1637%" height="15" fill="rgb(228,22,38)" fg:x="1507" fg:w="27"/><text x="9.3872%" y="511.50"></text></g><g><title>&lt;libp2p_tcp::Transport&lt;T&gt; as libp2p_core::transport::Transport&gt;::poll (26 samples, 0.16%)</title><rect x="9.1433%" y="485" width="0.1576%" height="15" fill="rgb(235,168,5)" fg:x="1508" fg:w="26"/><text x="9.3933%" y="495.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.13%)</title><rect x="9.1675%" y="469" width="0.1334%" height="15" fill="rgb(221,155,16)" fg:x="1512" fg:w="22"/><text x="9.4175%" y="479.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.12%)</title><rect x="9.1797%" y="453" width="0.1213%" height="15" fill="rgb(215,215,53)" fg:x="1514" fg:w="20"/><text x="9.4297%" y="463.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (18 samples, 0.11%)</title><rect x="9.1918%" y="437" width="0.1091%" height="15" fill="rgb(223,4,10)" fg:x="1516" fg:w="18"/><text x="9.4418%" y="447.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (15 samples, 0.09%)</title><rect x="10.3620%" y="453" width="0.0909%" height="15" fill="rgb(234,103,6)" fg:x="1709" fg:w="15"/><text x="10.6120%" y="463.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (4 samples, 0.02%)</title><rect x="10.4287%" y="437" width="0.0243%" height="15" fill="rgb(227,97,0)" fg:x="1720" fg:w="4"/><text x="10.6787%" y="447.50"></text></g><g><title>[libc.so.6] (64 samples, 0.39%)</title><rect x="10.6288%" y="437" width="0.3880%" height="15" fill="rgb(234,150,53)" fg:x="1753" fg:w="64"/><text x="10.8788%" y="447.50"></text></g><g><title>&lt;u64 as component_utils::codec::Codec&gt;::decode (5 samples, 0.03%)</title><rect x="11.2351%" y="421" width="0.0303%" height="15" fill="rgb(228,201,54)" fg:x="1853" fg:w="5"/><text x="11.4851%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="11.2654%" y="421" width="0.0182%" height="15" fill="rgb(222,22,37)" fg:x="1858" fg:w="3"/><text x="11.5154%" y="431.50"></text></g><g><title>[libc.so.6] (75 samples, 0.45%)</title><rect x="13.3632%" y="341" width="0.4547%" height="15" fill="rgb(237,53,32)" fg:x="2204" fg:w="75"/><text x="13.6132%" y="351.50"></text></g><g><title>cfree (45 samples, 0.27%)</title><rect x="13.8240%" y="341" width="0.2728%" height="15" fill="rgb(233,25,53)" fg:x="2280" fg:w="45"/><text x="14.0740%" y="351.50"></text></g><g><title>[libc.so.6] (13 samples, 0.08%)</title><rect x="14.0181%" y="325" width="0.0788%" height="15" fill="rgb(210,40,34)" fg:x="2312" fg:w="13"/><text x="14.2681%" y="335.50"></text></g><g><title>futures_task::waker::clone_arc_raw (16 samples, 0.10%)</title><rect x="14.0969%" y="341" width="0.0970%" height="15" fill="rgb(241,220,44)" fg:x="2325" fg:w="16"/><text x="14.3469%" y="351.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h123d100259a4829dE.llvm.7601235159431160491 (6 samples, 0.04%)</title><rect x="16.1644%" y="325" width="0.0364%" height="15" fill="rgb(235,28,35)" fg:x="2666" fg:w="6"/><text x="16.4144%" y="335.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.09%)</title><rect x="16.2008%" y="325" width="0.0909%" height="15" fill="rgb(210,56,17)" fg:x="2672" fg:w="15"/><text x="16.4508%" y="335.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (838 samples, 5.08%)</title><rect x="11.2836%" y="421" width="5.0809%" height="15" fill="rgb(224,130,29)" fg:x="1861" fg:w="838"/><text x="11.5336%" y="431.50">compon..</text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (803 samples, 4.87%)</title><rect x="11.4958%" y="405" width="4.8687%" height="15" fill="rgb(235,212,8)" fg:x="1896" fg:w="803"/><text x="11.7458%" y="415.50">&lt;libp2..</text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (774 samples, 4.69%)</title><rect x="11.6716%" y="389" width="4.6929%" height="15" fill="rgb(223,33,50)" fg:x="1925" fg:w="774"/><text x="11.9216%" y="399.50">&lt;libp..</text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (770 samples, 4.67%)</title><rect x="11.6959%" y="373" width="4.6686%" height="15" fill="rgb(219,149,13)" fg:x="1929" fg:w="770"/><text x="11.9459%" y="383.50">&lt;libp..</text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (763 samples, 4.63%)</title><rect x="11.7383%" y="357" width="4.6262%" height="15" fill="rgb(250,156,29)" fg:x="1936" fg:w="763"/><text x="11.9883%" y="367.50">&lt;yamu..</text></g><g><title>yamux::connection::stream::Stream::send_window_update (357 samples, 2.16%)</title><rect x="14.2000%" y="341" width="2.1646%" height="15" fill="rgb(216,193,19)" fg:x="2342" fg:w="357"/><text x="14.4500%" y="351.50">y..</text></g><g><title>yamux::connection::stream::flow_control::FlowController::next_window_update (12 samples, 0.07%)</title><rect x="16.2918%" y="325" width="0.0728%" height="15" fill="rgb(216,135,14)" fg:x="2687" fg:w="12"/><text x="16.5418%" y="335.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="17.4195%" y="341" width="0.0303%" height="15" fill="rgb(241,47,5)" fg:x="2873" fg:w="5"/><text x="17.6695%" y="351.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h123d100259a4829dE.llvm.7601235159431160491 (4 samples, 0.02%)</title><rect x="17.4498%" y="341" width="0.0243%" height="15" fill="rgb(233,42,35)" fg:x="2878" fg:w="4"/><text x="17.6998%" y="351.50"></text></g><g><title>__rdl_alloc (5 samples, 0.03%)</title><rect x="17.4741%" y="341" width="0.0303%" height="15" fill="rgb(231,13,6)" fg:x="2882" fg:w="5"/><text x="17.7241%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.03%)</title><rect x="17.4741%" y="325" width="0.0303%" height="15" fill="rgb(207,181,40)" fg:x="2882" fg:w="5"/><text x="17.7241%" y="335.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17h123d100259a4829dE.llvm.7601235159431160491 (7 samples, 0.04%)</title><rect x="18.2684%" y="325" width="0.0424%" height="15" fill="rgb(254,173,49)" fg:x="3013" fg:w="7"/><text x="18.5184%" y="335.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (167 samples, 1.01%)</title><rect x="18.3229%" y="325" width="1.0126%" height="15" fill="rgb(221,1,38)" fg:x="3022" fg:w="167"/><text x="18.5729%" y="335.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (28 samples, 0.17%)</title><rect x="20.3783%" y="277" width="0.1698%" height="15" fill="rgb(206,124,46)" fg:x="3361" fg:w="28"/><text x="20.6283%" y="287.50"></text></g><g><title>_ZN5tokio7runtime9scheduler12multi_thread4park8Unparker6unpark17h2dbacfbe16905bbdE.llvm.17757036233579673584 (15 samples, 0.09%)</title><rect x="20.6451%" y="245" width="0.0909%" height="15" fill="rgb(249,21,11)" fg:x="3405" fg:w="15"/><text x="20.8951%" y="255.50"></text></g><g><title>mio::sys::unix::waker::eventfd::WakerInternal::wake (6 samples, 0.04%)</title><rect x="20.6997%" y="229" width="0.0364%" height="15" fill="rgb(222,201,40)" fg:x="3414" fg:w="6"/><text x="20.9497%" y="239.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (6 samples, 0.04%)</title><rect x="20.6997%" y="213" width="0.0364%" height="15" fill="rgb(235,61,29)" fg:x="3414" fg:w="6"/><text x="20.9497%" y="223.50"></text></g><g><title>std::sys::unix::fs::File::write (6 samples, 0.04%)</title><rect x="20.6997%" y="197" width="0.0364%" height="15" fill="rgb(219,207,3)" fg:x="3414" fg:w="6"/><text x="20.9497%" y="207.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 0.04%)</title><rect x="20.6997%" y="181" width="0.0364%" height="15" fill="rgb(222,56,46)" fg:x="3414" fg:w="6"/><text x="20.9497%" y="191.50"></text></g><g><title>write (6 samples, 0.04%)</title><rect x="20.6997%" y="165" width="0.0364%" height="15" fill="rgb(239,76,54)" fg:x="3414" fg:w="6"/><text x="20.9497%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="20.7239%" y="149" width="0.0121%" height="15" fill="rgb(231,124,27)" fg:x="3418" fg:w="2"/><text x="20.9739%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (58 samples, 0.35%)</title><rect x="20.7361%" y="229" width="0.3517%" height="15" fill="rgb(249,195,6)" fg:x="3420" fg:w="58"/><text x="20.9861%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.01%)</title><rect x="21.0756%" y="213" width="0.0121%" height="15" fill="rgb(237,174,47)" fg:x="3476" fg:w="2"/><text x="21.3256%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.01%)</title><rect x="21.0756%" y="197" width="0.0121%" height="15" fill="rgb(206,201,31)" fg:x="3476" fg:w="2"/><text x="21.3256%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (145 samples, 0.88%)</title><rect x="20.6391%" y="261" width="0.8792%" height="15" fill="rgb(231,57,52)" fg:x="3404" fg:w="145"/><text x="20.8891%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (129 samples, 0.78%)</title><rect x="20.7361%" y="245" width="0.7822%" height="15" fill="rgb(248,177,22)" fg:x="3420" fg:w="129"/><text x="20.9861%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (71 samples, 0.43%)</title><rect x="21.0877%" y="229" width="0.4305%" height="15" fill="rgb(215,211,37)" fg:x="3478" fg:w="71"/><text x="21.3377%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.02%)</title><rect x="21.4940%" y="213" width="0.0243%" height="15" fill="rgb(241,128,51)" fg:x="3545" fg:w="4"/><text x="21.7440%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 0.02%)</title><rect x="21.4940%" y="197" width="0.0243%" height="15" fill="rgb(227,165,31)" fg:x="3545" fg:w="4"/><text x="21.7440%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3 samples, 0.02%)</title><rect x="21.5000%" y="181" width="0.0182%" height="15" fill="rgb(228,167,24)" fg:x="3546" fg:w="3"/><text x="21.7500%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="21.5000%" y="165" width="0.0182%" height="15" fill="rgb(228,143,12)" fg:x="3546" fg:w="3"/><text x="21.7500%" y="175.50"></text></g><g><title>alloc::task::raw_waker::wake (261 samples, 1.58%)</title><rect x="20.1601%" y="293" width="1.5825%" height="15" fill="rgb(249,149,8)" fg:x="3325" fg:w="261"/><text x="20.4101%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (197 samples, 1.19%)</title><rect x="20.5481%" y="277" width="1.1944%" height="15" fill="rgb(243,35,44)" fg:x="3389" fg:w="197"/><text x="20.7981%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (36 samples, 0.22%)</title><rect x="21.5243%" y="261" width="0.2183%" height="15" fill="rgb(246,89,9)" fg:x="3550" fg:w="36"/><text x="21.7743%" y="271.50"></text></g><g><title>futures_task::waker::wake_arc_raw (508 samples, 3.08%)</title><rect x="19.3355%" y="325" width="3.0801%" height="15" fill="rgb(233,213,13)" fg:x="3189" fg:w="508"/><text x="19.5855%" y="335.50">fut..</text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (471 samples, 2.86%)</title><rect x="19.5598%" y="309" width="2.8558%" height="15" fill="rgb(233,141,41)" fg:x="3226" fg:w="471"/><text x="19.8098%" y="319.50">&lt;f..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (111 samples, 0.67%)</title><rect x="21.7426%" y="293" width="0.6730%" height="15" fill="rgb(239,167,4)" fg:x="3586" fg:w="111"/><text x="21.9926%" y="303.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (1,070 samples, 6.49%)</title><rect x="17.5044%" y="341" width="6.4876%" height="15" fill="rgb(209,217,16)" fg:x="2887" fg:w="1070"/><text x="17.7544%" y="351.50">futures_..</text></g><g><title>malloc (260 samples, 1.58%)</title><rect x="22.4156%" y="325" width="1.5764%" height="15" fill="rgb(219,88,35)" fg:x="3697" fg:w="260"/><text x="22.6656%" y="335.50"></text></g><g><title>[libc.so.6] (236 samples, 1.43%)</title><rect x="22.5611%" y="309" width="1.4309%" height="15" fill="rgb(220,193,23)" fg:x="3721" fg:w="236"/><text x="22.8111%" y="319.50"></text></g><g><title>malloc (10 samples, 0.06%)</title><rect x="23.9920%" y="341" width="0.0606%" height="15" fill="rgb(230,90,52)" fg:x="3957" fg:w="10"/><text x="24.2420%" y="351.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,227 samples, 7.44%)</title><rect x="16.6252%" y="405" width="7.4395%" height="15" fill="rgb(252,106,19)" fg:x="2742" fg:w="1227"/><text x="16.8752%" y="415.50">&lt;libp2p_sw..</text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (1,221 samples, 7.40%)</title><rect x="16.6616%" y="389" width="7.4031%" height="15" fill="rgb(206,74,20)" fg:x="2748" fg:w="1221"/><text x="16.9116%" y="399.50">&lt;libp2p_co..</text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,221 samples, 7.40%)</title><rect x="16.6616%" y="373" width="7.4031%" height="15" fill="rgb(230,138,44)" fg:x="2748" fg:w="1221"/><text x="16.9116%" y="383.50">&lt;libp2p_ya..</text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (1,220 samples, 7.40%)</title><rect x="16.6677%" y="357" width="7.3971%" height="15" fill="rgb(235,182,43)" fg:x="2749" fg:w="1220"/><text x="16.9177%" y="367.50">&lt;yamux::co..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.01%)</title><rect x="24.0526%" y="341" width="0.0121%" height="15" fill="rgb(242,16,51)" fg:x="3967" fg:w="2"/><text x="24.3026%" y="351.50"></text></g><g><title>_ZN4core3ptr168drop_in_place$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$u8$C$alloc..alloc..Global$GT$$GT$17hebd6ca9e1404ea53E.llvm.2274802491827384036 (5 samples, 0.03%)</title><rect x="24.0648%" y="405" width="0.0303%" height="15" fill="rgb(248,9,4)" fg:x="3969" fg:w="5"/><text x="24.3148%" y="415.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (1,306 samples, 7.92%)</title><rect x="16.3645%" y="421" width="7.9185%" height="15" fill="rgb(210,31,22)" fg:x="2699" fg:w="1306"/><text x="16.6145%" y="431.50">component_u..</text></g><g><title>component_utils::set_waker (31 samples, 0.19%)</title><rect x="24.0951%" y="405" width="0.1880%" height="15" fill="rgb(239,54,39)" fg:x="3974" fg:w="31"/><text x="24.3451%" y="415.50"></text></g><g><title>futures_task::waker::clone_arc_raw (28 samples, 0.17%)</title><rect x="24.1133%" y="389" width="0.1698%" height="15" fill="rgb(230,99,41)" fg:x="3977" fg:w="28"/><text x="24.3633%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::now (59 samples, 0.36%)</title><rect x="24.2830%" y="421" width="0.3577%" height="15" fill="rgb(253,106,12)" fg:x="4005" fg:w="59"/><text x="24.5330%" y="431.50"></text></g><g><title>clock_gettime (58 samples, 0.35%)</title><rect x="24.2891%" y="405" width="0.3517%" height="15" fill="rgb(213,46,41)" fg:x="4006" fg:w="58"/><text x="24.5391%" y="415.50"></text></g><g><title>__vdso_clock_gettime (56 samples, 0.34%)</title><rect x="24.3012%" y="389" width="0.3395%" height="15" fill="rgb(215,133,35)" fg:x="4008" fg:w="56"/><text x="24.5512%" y="399.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (2,341 samples, 14.19%)</title><rect x="10.4529%" y="453" width="14.1939%" height="15" fill="rgb(213,28,5)" fg:x="1724" fg:w="2341"/><text x="10.7029%" y="463.50">&lt;futures_util::stream:..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (2,248 samples, 13.63%)</title><rect x="11.0168%" y="437" width="13.6300%" height="15" fill="rgb(215,77,49)" fg:x="1817" fg:w="2248"/><text x="11.2668%" y="447.50">futures_util::stream:..</text></g><g><title>[libc.so.6] (29 samples, 0.18%)</title><rect x="24.6468%" y="453" width="0.1758%" height="15" fill="rgb(248,100,22)" fg:x="4065" fg:w="29"/><text x="24.8968%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::into_future::StreamFuture&lt;rpc::Stream&gt;&gt;&gt; (90 samples, 0.55%)</title><rect x="24.8227%" y="453" width="0.5457%" height="15" fill="rgb(208,67,9)" fg:x="4094" fg:w="90"/><text x="25.0727%" y="463.50"></text></g><g><title>_ZN4core3ptr123drop_in_place$LT$core..option..Option$LT$futures_util..stream..stream..into_future..StreamFuture$LT$rpc..Stream$GT$$GT$$GT$17h054948f5702270a1E.llvm.317715505389412407 (2 samples, 0.01%)</title><rect x="25.3562%" y="437" width="0.0121%" height="15" fill="rgb(219,133,21)" fg:x="4182" fg:w="2"/><text x="25.6062%" y="447.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (2,737 samples, 16.59%)</title><rect x="9.4040%" y="469" width="16.5949%" height="15" fill="rgb(246,46,29)" fg:x="1551" fg:w="2737"/><text x="9.6540%" y="479.50">&lt;futures_util::stream::fut..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (104 samples, 0.63%)</title><rect x="25.3683%" y="453" width="0.6306%" height="15" fill="rgb(246,185,52)" fg:x="4184" fg:w="104"/><text x="25.6183%" y="463.50"></text></g><g><title>futures_task::waker::clone_arc_raw (13 samples, 0.08%)</title><rect x="25.9201%" y="437" width="0.0788%" height="15" fill="rgb(252,136,11)" fg:x="4275" fg:w="13"/><text x="26.1701%" y="447.50"></text></g><g><title>[libc.so.6] (93 samples, 0.56%)</title><rect x="25.9989%" y="469" width="0.5639%" height="15" fill="rgb(219,138,53)" fg:x="4288" fg:w="93"/><text x="26.2489%" y="479.50"></text></g><g><title>[libc.so.6] (101 samples, 0.61%)</title><rect x="27.3267%" y="453" width="0.6124%" height="15" fill="rgb(211,51,23)" fg:x="4507" fg:w="101"/><text x="27.5767%" y="463.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="27.9391%" y="453" width="0.0243%" height="15" fill="rgb(247,221,28)" fg:x="4608" fg:w="4"/><text x="28.1891%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="27.9391%" y="437" width="0.0243%" height="15" fill="rgb(251,222,45)" fg:x="4608" fg:w="4"/><text x="28.1891%" y="447.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="27.9634%" y="453" width="0.0182%" height="15" fill="rgb(217,162,53)" fg:x="4612" fg:w="3"/><text x="28.2134%" y="463.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17h8a0de8ff19c872a5E.llvm.10355436913996604420 (3,123 samples, 18.94%)</title><rect x="9.1311%" y="581" width="18.9353%" height="15" fill="rgb(229,93,14)" fg:x="1506" fg:w="3123"/><text x="9.3811%" y="591.50">_ZN3rpc4test21test_random_rpc_..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (3,122 samples, 18.93%)</title><rect x="9.1372%" y="565" width="18.9292%" height="15" fill="rgb(209,67,49)" fg:x="1507" fg:w="3122"/><text x="9.3872%" y="575.50">&lt;futures_util::stream::stream:..</text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (3,122 samples, 18.93%)</title><rect x="9.1372%" y="549" width="18.9292%" height="15" fill="rgb(213,87,29)" fg:x="1507" fg:w="3122"/><text x="9.3872%" y="559.50">_ZN3rpc4test21test_random_rpc_..</text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (3,122 samples, 18.93%)</title><rect x="9.1372%" y="533" width="18.9292%" height="15" fill="rgb(205,151,52)" fg:x="1507" fg:w="3122"/><text x="9.3872%" y="543.50">_ZN12libp2p_swarm23Swarm$LT$TB..</text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (3,095 samples, 18.77%)</title><rect x="9.3009%" y="517" width="18.7655%" height="15" fill="rgb(253,215,39)" fg:x="1534" fg:w="3095"/><text x="9.5509%" y="527.50">&lt;rpc::test::TestBehatiour as ..</text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (3,095 samples, 18.77%)</title><rect x="9.3009%" y="501" width="18.7655%" height="15" fill="rgb(221,220,41)" fg:x="1534" fg:w="3095"/><text x="9.5509%" y="511.50">&lt;rpc::Behaviour as libp2p_swa..</text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (3,095 samples, 18.77%)</title><rect x="9.3009%" y="485" width="18.7655%" height="15" fill="rgb(218,133,21)" fg:x="1534" fg:w="3095"/><text x="9.5509%" y="495.50">&lt;futures_util::stream::select..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (248 samples, 1.50%)</title><rect x="26.5628%" y="469" width="1.5037%" height="15" fill="rgb(221,193,43)" fg:x="4381" fg:w="248"/><text x="26.8128%" y="479.50"></text></g><g><title>malloc (14 samples, 0.08%)</title><rect x="27.9816%" y="453" width="0.0849%" height="15" fill="rgb(240,128,52)" fg:x="4615" fg:w="14"/><text x="28.2316%" y="463.50"></text></g><g><title>_ZN4core3ptr168drop_in_place$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$u8$C$alloc..alloc..Global$GT$$GT$17hebd6ca9e1404ea53E.llvm.2274802491827384036 (2 samples, 0.01%)</title><rect x="28.0665%" y="581" width="0.0121%" height="15" fill="rgb(253,114,12)" fg:x="4629" fg:w="2"/><text x="28.3165%" y="591.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.02%)</title><rect x="28.0786%" y="581" width="0.0182%" height="15" fill="rgb(215,223,47)" fg:x="4631" fg:w="3"/><text x="28.3286%" y="591.50"></text></g><g><title>cfree (5 samples, 0.03%)</title><rect x="28.1150%" y="581" width="0.0303%" height="15" fill="rgb(248,225,23)" fg:x="4637" fg:w="5"/><text x="28.3650%" y="591.50"></text></g><g><title>clock_gettime (4 samples, 0.02%)</title><rect x="28.1453%" y="581" width="0.0243%" height="15" fill="rgb(250,108,0)" fg:x="4642" fg:w="4"/><text x="28.3953%" y="591.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (11 samples, 0.07%)</title><rect x="28.1756%" y="581" width="0.0667%" height="15" fill="rgb(228,208,7)" fg:x="4647" fg:w="11"/><text x="28.4256%" y="591.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (3 samples, 0.02%)</title><rect x="28.2423%" y="581" width="0.0182%" height="15" fill="rgb(244,45,10)" fg:x="4658" fg:w="3"/><text x="28.4923%" y="591.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (6 samples, 0.04%)</title><rect x="28.2605%" y="581" width="0.0364%" height="15" fill="rgb(207,125,25)" fg:x="4661" fg:w="6"/><text x="28.5105%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;futures_util::stream::stream::into_future::StreamFuture&lt;rpc::Stream&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="28.2969%" y="581" width="0.0243%" height="15" fill="rgb(210,195,18)" fg:x="4667" fg:w="4"/><text x="28.5469%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;libp2p_kad::jobs::AddProviderJob&gt;&gt; (3 samples, 0.02%)</title><rect x="28.3211%" y="581" width="0.0182%" height="15" fill="rgb(249,80,12)" fg:x="4671" fg:w="3"/><text x="28.5711%" y="591.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (2 samples, 0.01%)</title><rect x="28.3393%" y="581" width="0.0121%" height="15" fill="rgb(221,65,9)" fg:x="4674" fg:w="2"/><text x="28.5893%" y="591.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (13 samples, 0.08%)</title><rect x="28.3635%" y="581" width="0.0788%" height="15" fill="rgb(235,49,36)" fg:x="4678" fg:w="13"/><text x="28.6135%" y="591.50"></text></g><g><title>libp2p_kad::jobs::PutRecordJob::poll (4 samples, 0.02%)</title><rect x="28.4424%" y="581" width="0.0243%" height="15" fill="rgb(225,32,20)" fg:x="4691" fg:w="4"/><text x="28.6924%" y="591.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="28.4727%" y="581" width="0.0121%" height="15" fill="rgb(215,141,46)" fg:x="4696" fg:w="2"/><text x="28.7227%" y="591.50"></text></g><g><title>rpc::Stream::write (15 samples, 0.09%)</title><rect x="28.4909%" y="581" width="0.0909%" height="15" fill="rgb(250,160,47)" fg:x="4699" fg:w="15"/><text x="28.7409%" y="591.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="28.8910%" y="437" width="0.0546%" height="15" fill="rgb(216,222,40)" fg:x="4765" fg:w="9"/><text x="29.1410%" y="447.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (8 samples, 0.05%)</title><rect x="28.9456%" y="421" width="0.0485%" height="15" fill="rgb(234,217,39)" fg:x="4774" fg:w="8"/><text x="29.1956%" y="431.50"></text></g><g><title>std::time::Instant::duration_since (8 samples, 0.05%)</title><rect x="28.9456%" y="405" width="0.0485%" height="15" fill="rgb(207,178,40)" fg:x="4774" fg:w="8"/><text x="29.1956%" y="415.50"></text></g><g><title>std::time::Instant::checked_duration_since (8 samples, 0.05%)</title><rect x="28.9456%" y="389" width="0.0485%" height="15" fill="rgb(221,136,13)" fg:x="4774" fg:w="8"/><text x="29.1956%" y="399.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (8 samples, 0.05%)</title><rect x="28.9456%" y="373" width="0.0485%" height="15" fill="rgb(249,199,10)" fg:x="4774" fg:w="8"/><text x="29.1956%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (7 samples, 0.04%)</title><rect x="28.9517%" y="357" width="0.0424%" height="15" fill="rgb(249,222,13)" fg:x="4775" fg:w="7"/><text x="29.2017%" y="367.50"></text></g><g><title>rpc::test::test_random_rpc_calls (71 samples, 0.43%)</title><rect x="28.5818%" y="581" width="0.4305%" height="15" fill="rgb(244,185,38)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="591.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (71 samples, 0.43%)</title><rect x="28.5818%" y="565" width="0.4305%" height="15" fill="rgb(236,202,9)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="575.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (71 samples, 0.43%)</title><rect x="28.5818%" y="549" width="0.4305%" height="15" fill="rgb(250,229,37)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="559.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17h8a0de8ff19c872a5E.llvm.10355436913996604420 (71 samples, 0.43%)</title><rect x="28.5818%" y="533" width="0.4305%" height="15" fill="rgb(206,174,23)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="543.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (71 samples, 0.43%)</title><rect x="28.5818%" y="517" width="0.4305%" height="15" fill="rgb(211,33,43)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="527.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (71 samples, 0.43%)</title><rect x="28.5818%" y="501" width="0.4305%" height="15" fill="rgb(245,58,50)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="511.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (71 samples, 0.43%)</title><rect x="28.5818%" y="485" width="0.4305%" height="15" fill="rgb(244,68,36)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="495.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (71 samples, 0.43%)</title><rect x="28.5818%" y="469" width="0.4305%" height="15" fill="rgb(232,229,15)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="479.50"></text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (71 samples, 0.43%)</title><rect x="28.5818%" y="453" width="0.4305%" height="15" fill="rgb(254,30,23)" fg:x="4714" fg:w="71"/><text x="28.8318%" y="463.50"></text></g><g><title>std::time::Instant::elapsed (11 samples, 0.07%)</title><rect x="28.9456%" y="437" width="0.0667%" height="15" fill="rgb(235,160,14)" fg:x="4774" fg:w="11"/><text x="29.1956%" y="447.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.02%)</title><rect x="28.9941%" y="421" width="0.0182%" height="15" fill="rgb(212,155,44)" fg:x="4782" fg:w="3"/><text x="29.2441%" y="431.50"></text></g><g><title>std::sys::unix::time::Instant::now (3 samples, 0.02%)</title><rect x="28.9941%" y="405" width="0.0182%" height="15" fill="rgb(226,2,50)" fg:x="4782" fg:w="3"/><text x="29.2441%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::now (2 samples, 0.01%)</title><rect x="29.0002%" y="389" width="0.0121%" height="15" fill="rgb(234,177,6)" fg:x="4783" fg:w="2"/><text x="29.2502%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::now (2 samples, 0.01%)</title><rect x="29.0123%" y="581" width="0.0121%" height="15" fill="rgb(217,24,9)" fg:x="4785" fg:w="2"/><text x="29.2623%" y="591.50"></text></g><g><title>std::time::Instant::elapsed (2 samples, 0.01%)</title><rect x="29.0244%" y="581" width="0.0121%" height="15" fill="rgb(220,13,46)" fg:x="4787" fg:w="2"/><text x="29.2744%" y="591.50"></text></g><g><title>&lt;T as libp2p_core::transport::boxed::Abstract&lt;O&gt;&gt;::poll (2 samples, 0.01%)</title><rect x="29.3822%" y="309" width="0.0121%" height="15" fill="rgb(239,221,27)" fg:x="4846" fg:w="2"/><text x="29.6322%" y="319.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17hee42f728841e67feE.llvm.6402655284677190421 (4 samples, 0.02%)</title><rect x="29.3943%" y="293" width="0.0243%" height="15" fill="rgb(222,198,25)" fg:x="4848" fg:w="4"/><text x="29.6443%" y="303.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.12%)</title><rect x="29.3943%" y="309" width="0.1213%" height="15" fill="rgb(211,99,13)" fg:x="4848" fg:w="20"/><text x="29.6443%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (16 samples, 0.10%)</title><rect x="29.4185%" y="293" width="0.0970%" height="15" fill="rgb(232,111,31)" fg:x="4852" fg:w="16"/><text x="29.6685%" y="303.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 0.18%)</title><rect x="29.5156%" y="309" width="0.1758%" height="15" fill="rgb(245,82,37)" fg:x="4868" fg:w="29"/><text x="29.7656%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (21 samples, 0.13%)</title><rect x="29.5641%" y="293" width="0.1273%" height="15" fill="rgb(227,149,46)" fg:x="4876" fg:w="21"/><text x="29.8141%" y="303.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (87 samples, 0.53%)</title><rect x="29.6914%" y="309" width="0.5275%" height="15" fill="rgb(218,36,50)" fg:x="4897" fg:w="87"/><text x="29.9414%" y="319.50"></text></g><g><title>[libc.so.6] (48 samples, 0.29%)</title><rect x="29.9278%" y="293" width="0.2910%" height="15" fill="rgb(226,80,48)" fg:x="4936" fg:w="48"/><text x="30.1778%" y="303.50"></text></g><g><title>test::run_test::_{{closure}} (312 samples, 1.89%)</title><rect x="29.0366%" y="581" width="1.8917%" height="15" fill="rgb(238,224,15)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="591.50">t..</text></g><g><title>test::run_test_in_process (312 samples, 1.89%)</title><rect x="29.0366%" y="565" width="1.8917%" height="15" fill="rgb(241,136,10)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="575.50">t..</text></g><g><title>std::panic::catch_unwind (312 samples, 1.89%)</title><rect x="29.0366%" y="549" width="1.8917%" height="15" fill="rgb(208,32,45)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="559.50">s..</text></g><g><title>std::panicking::try (312 samples, 1.89%)</title><rect x="29.0366%" y="533" width="1.8917%" height="15" fill="rgb(207,135,9)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="543.50">s..</text></g><g><title>std::panicking::try::do_call (312 samples, 1.89%)</title><rect x="29.0366%" y="517" width="1.8917%" height="15" fill="rgb(206,86,44)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="527.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (312 samples, 1.89%)</title><rect x="29.0366%" y="501" width="1.8917%" height="15" fill="rgb(245,177,15)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="511.50">&lt;..</text></g><g><title>test::run_test_in_process::_{{closure}} (312 samples, 1.89%)</title><rect x="29.0366%" y="485" width="1.8917%" height="15" fill="rgb(206,64,50)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="495.50">t..</text></g><g><title>test::__rust_begin_short_backtrace (312 samples, 1.89%)</title><rect x="29.0366%" y="469" width="1.8917%" height="15" fill="rgb(234,36,40)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="479.50">t..</text></g><g><title>core::ops::function::FnOnce::call_once (312 samples, 1.89%)</title><rect x="29.0366%" y="453" width="1.8917%" height="15" fill="rgb(213,64,8)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="463.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (312 samples, 1.89%)</title><rect x="29.0366%" y="437" width="1.8917%" height="15" fill="rgb(210,75,36)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="447.50">c..</text></g><g><title>rpc::test::test_random_rpc_calls (312 samples, 1.89%)</title><rect x="29.0366%" y="421" width="1.8917%" height="15" fill="rgb(229,88,21)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="431.50">r..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (312 samples, 1.89%)</title><rect x="29.0366%" y="405" width="1.8917%" height="15" fill="rgb(252,204,47)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="415.50">t..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (312 samples, 1.89%)</title><rect x="29.0366%" y="389" width="1.8917%" height="15" fill="rgb(208,77,27)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="399.50">t..</text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17h8a0de8ff19c872a5E.llvm.10355436913996604420 (312 samples, 1.89%)</title><rect x="29.0366%" y="373" width="1.8917%" height="15" fill="rgb(221,76,26)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="383.50">_..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (312 samples, 1.89%)</title><rect x="29.0366%" y="357" width="1.8917%" height="15" fill="rgb(225,139,18)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="367.50">&lt;..</text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (312 samples, 1.89%)</title><rect x="29.0366%" y="341" width="1.8917%" height="15" fill="rgb(230,137,11)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="351.50">_..</text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (312 samples, 1.89%)</title><rect x="29.0366%" y="325" width="1.8917%" height="15" fill="rgb(212,28,1)" fg:x="4789" fg:w="312"/><text x="29.2866%" y="335.50">_..</text></g><g><title>[libc.so.6] (117 samples, 0.71%)</title><rect x="30.2189%" y="309" width="0.7094%" height="15" fill="rgb(248,164,17)" fg:x="4984" fg:w="117"/><text x="30.4689%" y="319.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (41 samples, 0.25%)</title><rect x="30.9283%" y="581" width="0.2486%" height="15" fill="rgb(222,171,42)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="591.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (41 samples, 0.25%)</title><rect x="30.9283%" y="565" width="0.2486%" height="15" fill="rgb(243,84,45)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="575.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17h8a0de8ff19c872a5E.llvm.10355436913996604420 (41 samples, 0.25%)</title><rect x="30.9283%" y="549" width="0.2486%" height="15" fill="rgb(252,49,23)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="559.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (41 samples, 0.25%)</title><rect x="30.9283%" y="533" width="0.2486%" height="15" fill="rgb(215,19,7)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="543.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h3ceeabfa6489c25fE.llvm.6402655284677190421 (41 samples, 0.25%)</title><rect x="30.9283%" y="517" width="0.2486%" height="15" fill="rgb(238,81,41)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="527.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17hccaafeae8e17763aE.llvm.3030970050354852047 (41 samples, 0.25%)</title><rect x="30.9283%" y="501" width="0.2486%" height="15" fill="rgb(210,199,37)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="511.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (41 samples, 0.25%)</title><rect x="30.9283%" y="485" width="0.2486%" height="15" fill="rgb(244,192,49)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="495.50"></text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (41 samples, 0.25%)</title><rect x="30.9283%" y="469" width="0.2486%" height="15" fill="rgb(226,211,11)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="479.50"></text></g><g><title>std::time::Instant::elapsed (41 samples, 0.25%)</title><rect x="30.9283%" y="453" width="0.2486%" height="15" fill="rgb(236,162,54)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="463.50"></text></g><g><title>std::time::Instant::now (41 samples, 0.25%)</title><rect x="30.9283%" y="437" width="0.2486%" height="15" fill="rgb(220,229,9)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="447.50"></text></g><g><title>std::sys::unix::time::Instant::now (41 samples, 0.25%)</title><rect x="30.9283%" y="421" width="0.2486%" height="15" fill="rgb(250,87,22)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::now (41 samples, 0.25%)</title><rect x="30.9283%" y="405" width="0.2486%" height="15" fill="rgb(239,43,17)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="415.50"></text></g><g><title>clock_gettime (41 samples, 0.25%)</title><rect x="30.9283%" y="389" width="0.2486%" height="15" fill="rgb(231,177,25)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="399.50"></text></g><g><title>__vdso_clock_gettime (41 samples, 0.25%)</title><rect x="30.9283%" y="373" width="0.2486%" height="15" fill="rgb(219,179,1)" fg:x="5101" fg:w="41"/><text x="31.1783%" y="383.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2 samples, 0.01%)</title><rect x="31.1829%" y="581" width="0.0121%" height="15" fill="rgb(238,219,53)" fg:x="5143" fg:w="2"/><text x="31.4329%" y="591.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (3 samples, 0.02%)</title><rect x="31.1951%" y="581" width="0.0182%" height="15" fill="rgb(232,167,36)" fg:x="5145" fg:w="3"/><text x="31.4451%" y="591.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (3 samples, 0.02%)</title><rect x="31.2132%" y="581" width="0.0182%" height="15" fill="rgb(244,19,51)" fg:x="5148" fg:w="3"/><text x="31.4632%" y="591.50"></text></g><g><title>[unknown] (3,855 samples, 23.37%)</title><rect x="7.8761%" y="597" width="23.3736%" height="15" fill="rgb(224,6,22)" fg:x="1299" fg:w="3855"/><text x="8.1261%" y="607.50">[unknown]</text></g><g><title>yamux::connection::stream::flow_control::FlowController::next_window_update (3 samples, 0.02%)</title><rect x="31.2314%" y="581" width="0.0182%" height="15" fill="rgb(224,145,5)" fg:x="5151" fg:w="3"/><text x="31.4814%" y="591.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (2 samples, 0.01%)</title><rect x="31.2496%" y="597" width="0.0121%" height="15" fill="rgb(234,130,49)" fg:x="5154" fg:w="2"/><text x="31.4996%" y="607.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (2 samples, 0.01%)</title><rect x="31.2617%" y="597" width="0.0121%" height="15" fill="rgb(254,6,2)" fg:x="5156" fg:w="2"/><text x="31.5117%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;futures_util::stream::stream::into_future::StreamFuture&lt;rpc::Stream&gt;&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="31.2739%" y="597" width="0.0243%" height="15" fill="rgb(208,96,46)" fg:x="5158" fg:w="4"/><text x="31.5239%" y="607.50"></text></g><g><title>test::test_rand (5,158 samples, 31.27%)</title><rect x="0.0364%" y="613" width="31.2739%" height="15" fill="rgb(239,3,39)" fg:x="6" fg:w="5158"/><text x="0.2864%" y="623.50">test::test_rand</text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="31.2981%" y="597" width="0.0121%" height="15" fill="rgb(233,210,1)" fg:x="5162" fg:w="2"/><text x="31.5481%" y="607.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="31.3103%" y="597" width="0.0243%" height="15" fill="rgb(244,137,37)" fg:x="5164" fg:w="4"/><text x="31.5603%" y="607.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="31.3466%" y="581" width="0.0182%" height="15" fill="rgb(240,136,2)" fg:x="5170" fg:w="3"/><text x="31.5966%" y="591.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="31.3648%" y="581" width="0.0121%" height="15" fill="rgb(239,18,37)" fg:x="5173" fg:w="2"/><text x="31.6148%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.07%)</title><rect x="31.3769%" y="581" width="0.0728%" height="15" fill="rgb(218,185,22)" fg:x="5175" fg:w="12"/><text x="31.6269%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (4 samples, 0.02%)</title><rect x="31.4497%" y="581" width="0.0243%" height="15" fill="rgb(225,218,4)" fg:x="5187" fg:w="4"/><text x="31.6997%" y="591.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.12%)</title><rect x="31.4740%" y="581" width="0.1152%" height="15" fill="rgb(230,182,32)" fg:x="5191" fg:w="19"/><text x="31.7240%" y="591.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.10%)</title><rect x="31.5892%" y="581" width="0.0970%" height="15" fill="rgb(242,56,43)" fg:x="5210" fg:w="16"/><text x="31.8392%" y="591.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (6 samples, 0.04%)</title><rect x="31.6862%" y="581" width="0.0364%" height="15" fill="rgb(233,99,24)" fg:x="5226" fg:w="6"/><text x="31.9362%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (19 samples, 0.12%)</title><rect x="31.7286%" y="581" width="0.1152%" height="15" fill="rgb(234,209,42)" fg:x="5233" fg:w="19"/><text x="31.9786%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (8 samples, 0.05%)</title><rect x="31.8438%" y="581" width="0.0485%" height="15" fill="rgb(227,7,12)" fg:x="5252" fg:w="8"/><text x="32.0938%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (13 samples, 0.08%)</title><rect x="31.8923%" y="581" width="0.0788%" height="15" fill="rgb(245,203,43)" fg:x="5260" fg:w="13"/><text x="32.1423%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (14 samples, 0.08%)</title><rect x="31.9711%" y="581" width="0.0849%" height="15" fill="rgb(238,205,33)" fg:x="5273" fg:w="14"/><text x="32.2211%" y="591.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (3 samples, 0.02%)</title><rect x="32.0560%" y="581" width="0.0182%" height="15" fill="rgb(231,56,7)" fg:x="5287" fg:w="3"/><text x="32.3060%" y="591.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (4 samples, 0.02%)</title><rect x="32.0742%" y="581" width="0.0243%" height="15" fill="rgb(244,186,29)" fg:x="5290" fg:w="4"/><text x="32.3242%" y="591.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (41 samples, 0.25%)</title><rect x="32.0985%" y="581" width="0.2486%" height="15" fill="rgb(234,111,31)" fg:x="5294" fg:w="41"/><text x="32.3485%" y="591.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (15 samples, 0.09%)</title><rect x="32.3471%" y="581" width="0.0909%" height="15" fill="rgb(241,149,10)" fg:x="5335" fg:w="15"/><text x="32.5971%" y="591.50"></text></g><g><title>&lt;ring::aead::Tag as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (3 samples, 0.02%)</title><rect x="32.4380%" y="581" width="0.0182%" height="15" fill="rgb(249,206,44)" fg:x="5350" fg:w="3"/><text x="32.6880%" y="591.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (10 samples, 0.06%)</title><rect x="32.4562%" y="581" width="0.0606%" height="15" fill="rgb(251,153,30)" fg:x="5353" fg:w="10"/><text x="32.7062%" y="591.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.03%)</title><rect x="32.5168%" y="581" width="0.0303%" height="15" fill="rgb(239,152,38)" fg:x="5363" fg:w="5"/><text x="32.7668%" y="591.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="32.5532%" y="581" width="0.0182%" height="15" fill="rgb(249,139,47)" fg:x="5369" fg:w="3"/><text x="32.8032%" y="591.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (23 samples, 0.14%)</title><rect x="32.5714%" y="581" width="0.1395%" height="15" fill="rgb(244,64,35)" fg:x="5372" fg:w="23"/><text x="32.8214%" y="591.50"></text></g><g><title>[libc.so.6] (28 samples, 0.17%)</title><rect x="32.7108%" y="581" width="0.1698%" height="15" fill="rgb(216,46,15)" fg:x="5395" fg:w="28"/><text x="32.9608%" y="591.50"></text></g><g><title>[opt] (4 samples, 0.02%)</title><rect x="32.8806%" y="581" width="0.0243%" height="15" fill="rgb(250,74,19)" fg:x="5423" fg:w="4"/><text x="33.1306%" y="591.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.02%)</title><rect x="32.8806%" y="565" width="0.0243%" height="15" fill="rgb(249,42,33)" fg:x="5423" fg:w="4"/><text x="33.1306%" y="575.50"></text></g><g><title>_ZN12futures_util6stream17futures_unordered27FuturesUnordered$LT$Fut$GT$12release_task17h3885e75e0a83ebfdE.llvm.317715505389412407 (8 samples, 0.05%)</title><rect x="32.9049%" y="581" width="0.0485%" height="15" fill="rgb(242,149,17)" fg:x="5427" fg:w="8"/><text x="33.1549%" y="591.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h8f52052b5843b097E.llvm.6402655284677190421 (9 samples, 0.05%)</title><rect x="32.9534%" y="581" width="0.0546%" height="15" fill="rgb(244,29,21)" fg:x="5435" fg:w="9"/><text x="33.2034%" y="591.50"></text></g><g><title>__libc_calloc (12 samples, 0.07%)</title><rect x="33.0079%" y="581" width="0.0728%" height="15" fill="rgb(220,130,37)" fg:x="5444" fg:w="12"/><text x="33.2579%" y="591.50"></text></g><g><title>__vdso_clock_gettime (8 samples, 0.05%)</title><rect x="33.0868%" y="581" width="0.0485%" height="15" fill="rgb(211,67,2)" fg:x="5457" fg:w="8"/><text x="33.3368%" y="591.50"></text></g><g><title>alloc::task::raw_waker::wake_by_ref (7 samples, 0.04%)</title><rect x="33.1353%" y="581" width="0.0424%" height="15" fill="rgb(235,68,52)" fg:x="5465" fg:w="7"/><text x="33.3853%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (7 samples, 0.04%)</title><rect x="33.1777%" y="581" width="0.0424%" height="15" fill="rgb(246,142,3)" fg:x="5472" fg:w="7"/><text x="33.4277%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.01%)</title><rect x="33.2202%" y="581" width="0.0121%" height="15" fill="rgb(241,25,7)" fg:x="5479" fg:w="2"/><text x="33.4702%" y="591.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.01%)</title><rect x="33.2323%" y="581" width="0.0121%" height="15" fill="rgb(242,119,39)" fg:x="5481" fg:w="2"/><text x="33.4823%" y="591.50"></text></g><g><title>cfree (12 samples, 0.07%)</title><rect x="33.2444%" y="581" width="0.0728%" height="15" fill="rgb(241,98,45)" fg:x="5483" fg:w="12"/><text x="33.4944%" y="591.50"></text></g><g><title>chacha20_poly1305_seal_avx2 (2 samples, 0.01%)</title><rect x="33.3232%" y="581" width="0.0121%" height="15" fill="rgb(254,28,30)" fg:x="5496" fg:w="2"/><text x="33.5732%" y="591.50"></text></g><g><title>clock_gettime (9 samples, 0.05%)</title><rect x="33.3354%" y="581" width="0.0546%" height="15" fill="rgb(241,142,54)" fg:x="5498" fg:w="9"/><text x="33.5854%" y="591.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (7 samples, 0.04%)</title><rect x="33.3899%" y="581" width="0.0424%" height="15" fill="rgb(222,85,15)" fg:x="5507" fg:w="7"/><text x="33.6399%" y="591.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (6 samples, 0.04%)</title><rect x="33.4324%" y="581" width="0.0364%" height="15" fill="rgb(210,85,47)" fg:x="5514" fg:w="6"/><text x="33.6824%" y="591.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (6 samples, 0.04%)</title><rect x="33.4687%" y="581" width="0.0364%" height="15" fill="rgb(224,206,25)" fg:x="5520" fg:w="6"/><text x="33.7187%" y="591.50"></text></g><g><title>libp2p_noise::io::framed::encode_length_prefixed (7 samples, 0.04%)</title><rect x="33.5051%" y="581" width="0.0424%" height="15" fill="rgb(243,201,19)" fg:x="5526" fg:w="7"/><text x="33.7551%" y="591.50"></text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (9 samples, 0.05%)</title><rect x="33.5476%" y="581" width="0.0546%" height="15" fill="rgb(236,59,4)" fg:x="5533" fg:w="9"/><text x="33.7976%" y="591.50"></text></g><g><title>malloc (7 samples, 0.04%)</title><rect x="33.6021%" y="581" width="0.0424%" height="15" fill="rgb(254,179,45)" fg:x="5542" fg:w="7"/><text x="33.8521%" y="591.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_open (3 samples, 0.02%)</title><rect x="33.6567%" y="581" width="0.0182%" height="15" fill="rgb(226,14,10)" fg:x="5551" fg:w="3"/><text x="33.9067%" y="591.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (5 samples, 0.03%)</title><rect x="33.6749%" y="581" width="0.0303%" height="15" fill="rgb(244,27,41)" fg:x="5554" fg:w="5"/><text x="33.9249%" y="591.50"></text></g><g><title>snow::transportstate::TransportState::write_message (4 samples, 0.02%)</title><rect x="33.7052%" y="581" width="0.0243%" height="15" fill="rgb(235,35,32)" fg:x="5559" fg:w="4"/><text x="33.9552%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::now (18 samples, 0.11%)</title><rect x="33.7295%" y="581" width="0.1091%" height="15" fill="rgb(218,68,31)" fg:x="5563" fg:w="18"/><text x="33.9795%" y="591.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (10 samples, 0.06%)</title><rect x="33.8386%" y="581" width="0.0606%" height="15" fill="rgb(207,120,37)" fg:x="5581" fg:w="10"/><text x="34.0886%" y="591.50"></text></g><g><title>tokio::runtime::context::with_scheduler (4 samples, 0.02%)</title><rect x="33.9053%" y="581" width="0.0243%" height="15" fill="rgb(227,98,0)" fg:x="5592" fg:w="4"/><text x="34.1553%" y="591.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.05%)</title><rect x="33.9295%" y="581" width="0.0546%" height="15" fill="rgb(207,7,3)" fg:x="5596" fg:w="9"/><text x="34.1795%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (2 samples, 0.01%)</title><rect x="33.9902%" y="581" width="0.0121%" height="15" fill="rgb(206,98,19)" fg:x="5606" fg:w="2"/><text x="34.2402%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (5 samples, 0.03%)</title><rect x="34.0023%" y="581" width="0.0303%" height="15" fill="rgb(217,5,26)" fg:x="5608" fg:w="5"/><text x="34.2523%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (5 samples, 0.03%)</title><rect x="34.0326%" y="581" width="0.0303%" height="15" fill="rgb(235,190,38)" fg:x="5613" fg:w="5"/><text x="34.2826%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 0.02%)</title><rect x="34.0629%" y="581" width="0.0182%" height="15" fill="rgb(247,86,24)" fg:x="5618" fg:w="3"/><text x="34.3129%" y="591.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.02%)</title><rect x="34.0811%" y="581" width="0.0182%" height="15" fill="rgb(205,101,16)" fg:x="5621" fg:w="3"/><text x="34.3311%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 0.03%)</title><rect x="34.0993%" y="581" width="0.0303%" height="15" fill="rgb(246,168,33)" fg:x="5624" fg:w="5"/><text x="34.3493%" y="591.50"></text></g><g><title>yamux::chunks::Chunks::push (2 samples, 0.01%)</title><rect x="34.1296%" y="581" width="0.0121%" height="15" fill="rgb(231,114,1)" fg:x="5629" fg:w="2"/><text x="34.3796%" y="591.50"></text></g><g><title>yamux::connection::rtt::Rtt::next_ping (15 samples, 0.09%)</title><rect x="34.1478%" y="581" width="0.0909%" height="15" fill="rgb(207,184,53)" fg:x="5632" fg:w="15"/><text x="34.3978%" y="591.50"></text></g><g><title>[anon] (480 samples, 2.91%)</title><rect x="31.3406%" y="597" width="2.9103%" height="15" fill="rgb(224,95,51)" fg:x="5169" fg:w="480"/><text x="31.5906%" y="607.50">[a..</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.02%)</title><rect x="35.8031%" y="357" width="0.0182%" height="15" fill="rgb(212,188,45)" fg:x="5905" fg:w="3"/><text x="36.0531%" y="367.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.02%)</title><rect x="35.8031%" y="341" width="0.0182%" height="15" fill="rgb(223,154,38)" fg:x="5905" fg:w="3"/><text x="36.0531%" y="351.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.02%)</title><rect x="35.8031%" y="325" width="0.0182%" height="15" fill="rgb(251,22,52)" fg:x="5905" fg:w="3"/><text x="36.0531%" y="335.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (3 samples, 0.02%)</title><rect x="35.8031%" y="309" width="0.0182%" height="15" fill="rgb(229,209,22)" fg:x="5905" fg:w="3"/><text x="36.0531%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.02%)</title><rect x="35.8031%" y="293" width="0.0182%" height="15" fill="rgb(234,138,34)" fg:x="5905" fg:w="3"/><text x="36.0531%" y="303.50"></text></g><g><title>__floattidf (5 samples, 0.03%)</title><rect x="35.8213%" y="357" width="0.0303%" height="15" fill="rgb(212,95,11)" fg:x="5908" fg:w="5"/><text x="36.0713%" y="367.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (5 samples, 0.03%)</title><rect x="35.8213%" y="341" width="0.0303%" height="15" fill="rgb(240,179,47)" fg:x="5908" fg:w="5"/><text x="36.0713%" y="351.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (5 samples, 0.03%)</title><rect x="35.8213%" y="325" width="0.0303%" height="15" fill="rgb(240,163,11)" fg:x="5908" fg:w="5"/><text x="36.0713%" y="335.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (2 samples, 0.01%)</title><rect x="35.8394%" y="309" width="0.0121%" height="15" fill="rgb(236,37,12)" fg:x="5911" fg:w="2"/><text x="36.0894%" y="319.50"></text></g><g><title>pow (31 samples, 0.19%)</title><rect x="35.8516%" y="357" width="0.1880%" height="15" fill="rgb(232,164,16)" fg:x="5913" fg:w="31"/><text x="36.1016%" y="367.50"></text></g><g><title>[libm.so.6] (29 samples, 0.18%)</title><rect x="35.8637%" y="341" width="0.1758%" height="15" fill="rgb(244,205,15)" fg:x="5915" fg:w="29"/><text x="36.1137%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.02%)</title><rect x="36.0395%" y="357" width="0.0243%" height="15" fill="rgb(223,117,47)" fg:x="5944" fg:w="4"/><text x="36.2895%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (3 samples, 0.02%)</title><rect x="36.0456%" y="341" width="0.0182%" height="15" fill="rgb(244,107,35)" fg:x="5945" fg:w="3"/><text x="36.2956%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.01%)</title><rect x="36.0517%" y="325" width="0.0121%" height="15" fill="rgb(205,140,8)" fg:x="5946" fg:w="2"/><text x="36.3017%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="36.0517%" y="309" width="0.0121%" height="15" fill="rgb(228,84,46)" fg:x="5946" fg:w="2"/><text x="36.3017%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::now (34 samples, 0.21%)</title><rect x="36.0638%" y="357" width="0.2061%" height="15" fill="rgb(254,188,9)" fg:x="5948" fg:w="34"/><text x="36.3138%" y="367.50"></text></g><g><title>clock_gettime (33 samples, 0.20%)</title><rect x="36.0698%" y="341" width="0.2001%" height="15" fill="rgb(206,112,54)" fg:x="5949" fg:w="33"/><text x="36.3198%" y="351.50"></text></g><g><title>__vdso_clock_gettime (33 samples, 0.20%)</title><rect x="36.0698%" y="325" width="0.2001%" height="15" fill="rgb(216,84,49)" fg:x="5949" fg:w="33"/><text x="36.3198%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (5 samples, 0.03%)</title><rect x="36.2760%" y="357" width="0.0303%" height="15" fill="rgb(214,194,35)" fg:x="5983" fg:w="5"/><text x="36.5260%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (47 samples, 0.28%)</title><rect x="36.3063%" y="357" width="0.2850%" height="15" fill="rgb(249,28,3)" fg:x="5988" fg:w="47"/><text x="36.5563%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (11 samples, 0.07%)</title><rect x="36.5913%" y="357" width="0.0667%" height="15" fill="rgb(222,56,52)" fg:x="6035" fg:w="11"/><text x="36.8413%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (11 samples, 0.07%)</title><rect x="36.6580%" y="357" width="0.0667%" height="15" fill="rgb(245,217,50)" fg:x="6046" fg:w="11"/><text x="36.9080%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (8 samples, 0.05%)</title><rect x="36.6762%" y="341" width="0.0485%" height="15" fill="rgb(213,201,24)" fg:x="6049" fg:w="8"/><text x="36.9262%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (7 samples, 0.04%)</title><rect x="36.6822%" y="325" width="0.0424%" height="15" fill="rgb(248,116,28)" fg:x="6050" fg:w="7"/><text x="36.9322%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (7 samples, 0.04%)</title><rect x="36.6822%" y="309" width="0.0424%" height="15" fill="rgb(219,72,43)" fg:x="6050" fg:w="7"/><text x="36.9322%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (7 samples, 0.04%)</title><rect x="36.6822%" y="293" width="0.0424%" height="15" fill="rgb(209,138,14)" fg:x="6050" fg:w="7"/><text x="36.9322%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.04%)</title><rect x="36.6822%" y="277" width="0.0424%" height="15" fill="rgb(222,18,33)" fg:x="6050" fg:w="7"/><text x="36.9322%" y="287.50"></text></g><g><title>_ZN5tokio7runtime9scheduler12multi_thread4park8Unparker6unpark17h2dbacfbe16905bbdE.llvm.17757036233579673584 (3 samples, 0.02%)</title><rect x="36.7550%" y="341" width="0.0182%" height="15" fill="rgb(213,199,7)" fg:x="6062" fg:w="3"/><text x="37.0050%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (16 samples, 0.10%)</title><rect x="36.7732%" y="341" width="0.0970%" height="15" fill="rgb(250,110,10)" fg:x="6065" fg:w="16"/><text x="37.0232%" y="351.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="37.2704%" y="293" width="0.0182%" height="15" fill="rgb(248,123,6)" fg:x="6147" fg:w="3"/><text x="37.5204%" y="303.50"></text></g><g><title>mio::event::event::Event::is_write_closed (2 samples, 0.01%)</title><rect x="37.2885%" y="293" width="0.0121%" height="15" fill="rgb(206,91,31)" fg:x="6150" fg:w="2"/><text x="37.5385%" y="303.50"></text></g><g><title>[libc.so.6] (22 samples, 0.13%)</title><rect x="37.4583%" y="261" width="0.1334%" height="15" fill="rgb(211,154,13)" fg:x="6178" fg:w="22"/><text x="37.7083%" y="271.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (51 samples, 0.31%)</title><rect x="37.3007%" y="293" width="0.3092%" height="15" fill="rgb(225,148,7)" fg:x="6152" fg:w="51"/><text x="37.5507%" y="303.50"></text></g><g><title>epoll_wait (46 samples, 0.28%)</title><rect x="37.3310%" y="277" width="0.2789%" height="15" fill="rgb(220,160,43)" fg:x="6157" fg:w="46"/><text x="37.5810%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.5917%" y="261" width="0.0182%" height="15" fill="rgb(213,52,39)" fg:x="6200" fg:w="3"/><text x="37.8417%" y="271.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (22 samples, 0.13%)</title><rect x="38.0161%" y="261" width="0.1334%" height="15" fill="rgb(243,137,7)" fg:x="6270" fg:w="22"/><text x="38.2661%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (6 samples, 0.04%)</title><rect x="38.2101%" y="245" width="0.0364%" height="15" fill="rgb(230,79,13)" fg:x="6302" fg:w="6"/><text x="38.4601%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (6 samples, 0.04%)</title><rect x="38.2101%" y="229" width="0.0364%" height="15" fill="rgb(247,105,23)" fg:x="6302" fg:w="6"/><text x="38.4601%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (3 samples, 0.02%)</title><rect x="38.2283%" y="213" width="0.0182%" height="15" fill="rgb(223,179,41)" fg:x="6305" fg:w="3"/><text x="38.4783%" y="223.50"></text></g><g><title>alloc::task::raw_waker::wake (91 samples, 0.55%)</title><rect x="37.8282%" y="277" width="0.5517%" height="15" fill="rgb(218,9,34)" fg:x="6239" fg:w="91"/><text x="38.0782%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (38 samples, 0.23%)</title><rect x="38.1495%" y="261" width="0.2304%" height="15" fill="rgb(222,106,8)" fg:x="6292" fg:w="38"/><text x="38.3995%" y="271.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (21 samples, 0.13%)</title><rect x="38.2526%" y="245" width="0.1273%" height="15" fill="rgb(211,220,0)" fg:x="6309" fg:w="21"/><text x="38.5026%" y="255.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h9c7f8a2cd61440f7E.llvm.1871064024184203469 (210 samples, 1.27%)</title><rect x="37.1127%" y="309" width="1.2733%" height="15" fill="rgb(229,52,16)" fg:x="6121" fg:w="210"/><text x="37.3627%" y="319.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (128 samples, 0.78%)</title><rect x="37.6099%" y="293" width="0.7761%" height="15" fill="rgb(212,155,18)" fg:x="6203" fg:w="128"/><text x="37.8599%" y="303.50"></text></g><g><title>_ZN5tokio7runtime4time5wheel5Wheel15next_expiration17h884e52e322d4f93dE.llvm.6190752214243895883 (3 samples, 0.02%)</title><rect x="38.3860%" y="309" width="0.0182%" height="15" fill="rgb(242,21,14)" fg:x="6331" fg:w="3"/><text x="38.6360%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::now (16 samples, 0.10%)</title><rect x="38.4042%" y="309" width="0.0970%" height="15" fill="rgb(222,19,48)" fg:x="6334" fg:w="16"/><text x="38.6542%" y="319.50"></text></g><g><title>clock_gettime (16 samples, 0.10%)</title><rect x="38.4042%" y="293" width="0.0970%" height="15" fill="rgb(232,45,27)" fg:x="6334" fg:w="16"/><text x="38.6542%" y="303.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.09%)</title><rect x="38.4102%" y="277" width="0.0909%" height="15" fill="rgb(249,103,42)" fg:x="6335" fg:w="15"/><text x="38.6602%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (7 samples, 0.04%)</title><rect x="38.6891%" y="293" width="0.0424%" height="15" fill="rgb(246,81,33)" fg:x="6381" fg:w="7"/><text x="38.9391%" y="303.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hbbf06b9f73b6cd1bE.llvm.17073567277356765837 (281 samples, 1.70%)</title><rect x="37.0642%" y="325" width="1.7038%" height="15" fill="rgb(252,33,42)" fg:x="6113" fg:w="281"/><text x="37.3142%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (42 samples, 0.25%)</title><rect x="38.5133%" y="309" width="0.2547%" height="15" fill="rgb(209,212,41)" fg:x="6352" fg:w="42"/><text x="38.7633%" y="319.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (6 samples, 0.04%)</title><rect x="38.7316%" y="293" width="0.0364%" height="15" fill="rgb(207,154,6)" fg:x="6388" fg:w="6"/><text x="38.9816%" y="303.50"></text></g><g><title>_ZN5tokio7runtime4time5wheel5Wheel15next_expiration17h884e52e322d4f93dE.llvm.6190752214243895883 (4 samples, 0.02%)</title><rect x="38.7437%" y="277" width="0.0243%" height="15" fill="rgb(223,64,47)" fg:x="6390" fg:w="4"/><text x="38.9937%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wait (8 samples, 0.05%)</title><rect x="38.7680%" y="293" width="0.0485%" height="15" fill="rgb(211,161,38)" fg:x="6394" fg:w="8"/><text x="39.0180%" y="303.50"></text></g><g><title>syscall (5 samples, 0.03%)</title><rect x="38.7862%" y="277" width="0.0303%" height="15" fill="rgb(219,138,40)" fg:x="6397" fg:w="5"/><text x="39.0362%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (324 samples, 1.96%)</title><rect x="36.8702%" y="341" width="1.9645%" height="15" fill="rgb(241,228,46)" fg:x="6081" fg:w="324"/><text x="37.1202%" y="351.50">t..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (11 samples, 0.07%)</title><rect x="38.7680%" y="325" width="0.0667%" height="15" fill="rgb(223,209,38)" fg:x="6394" fg:w="11"/><text x="39.0180%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (11 samples, 0.07%)</title><rect x="38.7680%" y="309" width="0.0667%" height="15" fill="rgb(236,164,45)" fg:x="6394" fg:w="11"/><text x="39.0180%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.02%)</title><rect x="38.8165%" y="293" width="0.0182%" height="15" fill="rgb(231,15,5)" fg:x="6402" fg:w="3"/><text x="39.0665%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.02%)</title><rect x="38.8165%" y="277" width="0.0182%" height="15" fill="rgb(252,35,15)" fg:x="6402" fg:w="3"/><text x="39.0665%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="38.8165%" y="261" width="0.0182%" height="15" fill="rgb(248,181,18)" fg:x="6402" fg:w="3"/><text x="39.0665%" y="271.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (6 samples, 0.04%)</title><rect x="38.8710%" y="293" width="0.0364%" height="15" fill="rgb(233,39,42)" fg:x="6411" fg:w="6"/><text x="39.1210%" y="303.50"></text></g><g><title>epoll_wait (5 samples, 0.03%)</title><rect x="38.8771%" y="277" width="0.0303%" height="15" fill="rgb(238,110,33)" fg:x="6412" fg:w="5"/><text x="39.1271%" y="287.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (2 samples, 0.01%)</title><rect x="38.9256%" y="261" width="0.0121%" height="15" fill="rgb(233,195,10)" fg:x="6420" fg:w="2"/><text x="39.1756%" y="271.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h9c7f8a2cd61440f7E.llvm.1871064024184203469 (19 samples, 0.12%)</title><rect x="38.8468%" y="309" width="0.1152%" height="15" fill="rgb(254,105,3)" fg:x="6407" fg:w="19"/><text x="39.0968%" y="319.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (9 samples, 0.05%)</title><rect x="38.9074%" y="293" width="0.0546%" height="15" fill="rgb(221,225,9)" fg:x="6417" fg:w="9"/><text x="39.1574%" y="303.50"></text></g><g><title>alloc::task::raw_waker::wake (7 samples, 0.04%)</title><rect x="38.9195%" y="277" width="0.0424%" height="15" fill="rgb(224,227,45)" fg:x="6419" fg:w="7"/><text x="39.1695%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.02%)</title><rect x="38.9377%" y="261" width="0.0243%" height="15" fill="rgb(229,198,43)" fg:x="6422" fg:w="4"/><text x="39.1877%" y="271.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (4 samples, 0.02%)</title><rect x="38.9377%" y="245" width="0.0243%" height="15" fill="rgb(206,209,35)" fg:x="6422" fg:w="4"/><text x="39.1877%" y="255.50"></text></g><g><title>std::sys::unix::time::Timespec::now (3 samples, 0.02%)</title><rect x="38.9620%" y="309" width="0.0182%" height="15" fill="rgb(245,195,53)" fg:x="6426" fg:w="3"/><text x="39.2120%" y="319.50"></text></g><g><title>clock_gettime (3 samples, 0.02%)</title><rect x="38.9620%" y="293" width="0.0182%" height="15" fill="rgb(240,92,26)" fg:x="6426" fg:w="3"/><text x="39.2120%" y="303.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.02%)</title><rect x="38.9620%" y="277" width="0.0182%" height="15" fill="rgb(207,40,23)" fg:x="6426" fg:w="3"/><text x="39.2120%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (374 samples, 2.27%)</title><rect x="36.7247%" y="357" width="2.2676%" height="15" fill="rgb(223,111,35)" fg:x="6057" fg:w="374"/><text x="36.9747%" y="367.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (26 samples, 0.16%)</title><rect x="38.8347%" y="341" width="0.1576%" height="15" fill="rgb(229,147,28)" fg:x="6405" fg:w="26"/><text x="39.0847%" y="351.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hbbf06b9f73b6cd1bE.llvm.17073567277356765837 (25 samples, 0.15%)</title><rect x="38.8407%" y="325" width="0.1516%" height="15" fill="rgb(211,29,28)" fg:x="6406" fg:w="25"/><text x="39.0907%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.01%)</title><rect x="38.9802%" y="309" width="0.0121%" height="15" fill="rgb(228,72,33)" fg:x="6429" fg:w="2"/><text x="39.2302%" y="319.50"></text></g><g><title>_ZN5tokio7runtime9scheduler12multi_thread4park8Unparker6unpark17h2dbacfbe16905bbdE.llvm.17757036233579673584 (2 samples, 0.01%)</title><rect x="39.3985%" y="341" width="0.0121%" height="15" fill="rgb(205,214,31)" fg:x="6498" fg:w="2"/><text x="39.6485%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (20 samples, 0.12%)</title><rect x="39.4107%" y="341" width="0.1213%" height="15" fill="rgb(224,111,15)" fg:x="6500" fg:w="20"/><text x="39.6607%" y="351.50"></text></g><g><title>_ZN5tokio7runtime9scheduler12multi_thread4park8Unparker6unpark17h2dbacfbe16905bbdE.llvm.17757036233579673584 (4 samples, 0.02%)</title><rect x="39.6107%" y="293" width="0.0243%" height="15" fill="rgb(253,21,26)" fg:x="6533" fg:w="4"/><text x="39.8607%" y="303.50"></text></g><g><title>mio::sys::unix::waker::eventfd::WakerInternal::wake (3 samples, 0.02%)</title><rect x="39.6168%" y="277" width="0.0182%" height="15" fill="rgb(245,139,43)" fg:x="6534" fg:w="3"/><text x="39.8668%" y="287.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="39.6168%" y="261" width="0.0182%" height="15" fill="rgb(252,170,7)" fg:x="6534" fg:w="3"/><text x="39.8668%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::write (3 samples, 0.02%)</title><rect x="39.6168%" y="245" width="0.0182%" height="15" fill="rgb(231,118,14)" fg:x="6534" fg:w="3"/><text x="39.8668%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.02%)</title><rect x="39.6168%" y="229" width="0.0182%" height="15" fill="rgb(238,83,0)" fg:x="6534" fg:w="3"/><text x="39.8668%" y="239.50"></text></g><g><title>write (3 samples, 0.02%)</title><rect x="39.6168%" y="213" width="0.0182%" height="15" fill="rgb(221,39,39)" fg:x="6534" fg:w="3"/><text x="39.8668%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (162 samples, 0.98%)</title><rect x="39.5501%" y="325" width="0.9822%" height="15" fill="rgb(222,119,46)" fg:x="6523" fg:w="162"/><text x="39.8001%" y="335.50"></text></g><g><title>tokio::runtime::context::with_scheduler (161 samples, 0.98%)</title><rect x="39.5562%" y="309" width="0.9762%" height="15" fill="rgb(222,165,49)" fg:x="6524" fg:w="161"/><text x="39.8062%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (148 samples, 0.90%)</title><rect x="39.6350%" y="293" width="0.8974%" height="15" fill="rgb(219,113,52)" fg:x="6537" fg:w="148"/><text x="39.8850%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (126 samples, 0.76%)</title><rect x="39.7684%" y="277" width="0.7640%" height="15" fill="rgb(214,7,15)" fg:x="6559" fg:w="126"/><text x="40.0184%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.02%)</title><rect x="40.5081%" y="261" width="0.0243%" height="15" fill="rgb(235,32,4)" fg:x="6681" fg:w="4"/><text x="40.7581%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (3 samples, 0.02%)</title><rect x="40.5142%" y="245" width="0.0182%" height="15" fill="rgb(238,90,54)" fg:x="6682" fg:w="3"/><text x="40.7642%" y="255.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="40.5748%" y="309" width="0.0182%" height="15" fill="rgb(213,208,19)" fg:x="6692" fg:w="3"/><text x="40.8248%" y="319.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17ha08917d031e96be3E.llvm.6402655284677190421 (69 samples, 0.42%)</title><rect x="40.8961%" y="277" width="0.4184%" height="15" fill="rgb(233,156,4)" fg:x="6745" fg:w="69"/><text x="41.1461%" y="287.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (156 samples, 0.95%)</title><rect x="40.8416%" y="293" width="0.9459%" height="15" fill="rgb(207,194,5)" fg:x="6736" fg:w="156"/><text x="41.0916%" y="303.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (78 samples, 0.47%)</title><rect x="41.3145%" y="277" width="0.4729%" height="15" fill="rgb(206,111,30)" fg:x="6814" fg:w="78"/><text x="41.5645%" y="287.50"></text></g><g><title>alloc::task::raw_waker::clone_waker (22 samples, 0.13%)</title><rect x="42.0663%" y="229" width="0.1334%" height="15" fill="rgb(243,70,54)" fg:x="6938" fg:w="22"/><text x="42.3163%" y="239.50"></text></g><g><title>alloc::task::raw_waker::drop_waker (17 samples, 0.10%)</title><rect x="42.1997%" y="229" width="0.1031%" height="15" fill="rgb(242,28,8)" fg:x="6960" fg:w="17"/><text x="42.4497%" y="239.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h8f52052b5843b097E.llvm.6402655284677190421 (52 samples, 0.32%)</title><rect x="43.1274%" y="165" width="0.3153%" height="15" fill="rgb(219,106,18)" fg:x="7113" fg:w="52"/><text x="43.3774%" y="175.50"></text></g><g><title>cfree (10 samples, 0.06%)</title><rect x="43.3820%" y="149" width="0.0606%" height="15" fill="rgb(244,222,10)" fg:x="7155" fg:w="10"/><text x="43.6320%" y="159.50"></text></g><g><title>[libc.so.6] (10 samples, 0.06%)</title><rect x="43.3820%" y="133" width="0.0606%" height="15" fill="rgb(236,179,52)" fg:x="7155" fg:w="10"/><text x="43.6320%" y="143.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (67 samples, 0.41%)</title><rect x="43.0546%" y="197" width="0.4062%" height="15" fill="rgb(213,23,39)" fg:x="7101" fg:w="67"/><text x="43.3046%" y="207.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (58 samples, 0.35%)</title><rect x="43.1092%" y="181" width="0.3517%" height="15" fill="rgb(238,48,10)" fg:x="7110" fg:w="58"/><text x="43.3592%" y="191.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (3 samples, 0.02%)</title><rect x="43.4427%" y="165" width="0.0182%" height="15" fill="rgb(251,196,23)" fg:x="7165" fg:w="3"/><text x="43.6927%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.02%)</title><rect x="43.4851%" y="181" width="0.0243%" height="15" fill="rgb(250,152,24)" fg:x="7172" fg:w="4"/><text x="43.7351%" y="191.50"></text></g><g><title>_ZN12futures_util6stream17futures_unordered27FuturesUnordered$LT$Fut$GT$12release_task17h3885e75e0a83ebfdE.llvm.317715505389412407 (10 samples, 0.06%)</title><rect x="43.4609%" y="197" width="0.0606%" height="15" fill="rgb(209,150,17)" fg:x="7168" fg:w="10"/><text x="43.7109%" y="207.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="43.5094%" y="181" width="0.0121%" height="15" fill="rgb(234,202,34)" fg:x="7176" fg:w="2"/><text x="43.7594%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="43.5094%" y="165" width="0.0121%" height="15" fill="rgb(253,148,53)" fg:x="7176" fg:w="2"/><text x="43.7594%" y="175.50"></text></g><g><title>alloc::task::raw_waker::wake_by_ref (2 samples, 0.01%)</title><rect x="43.5276%" y="197" width="0.0121%" height="15" fill="rgb(218,129,16)" fg:x="7179" fg:w="2"/><text x="43.7776%" y="207.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (222 samples, 1.35%)</title><rect x="42.6181%" y="213" width="1.3460%" height="15" fill="rgb(216,85,19)" fg:x="7029" fg:w="222"/><text x="42.8681%" y="223.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (70 samples, 0.42%)</title><rect x="43.5397%" y="197" width="0.4244%" height="15" fill="rgb(235,228,7)" fg:x="7181" fg:w="70"/><text x="43.7897%" y="207.50"></text></g><g><title>alloc::task::raw_waker::clone_waker (6 samples, 0.04%)</title><rect x="43.9277%" y="181" width="0.0364%" height="15" fill="rgb(245,175,0)" fg:x="7245" fg:w="6"/><text x="44.1777%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="44.0187%" y="53" width="0.0303%" height="15" fill="rgb(208,168,36)" fg:x="7260" fg:w="5"/><text x="44.2687%" y="63.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (8 samples, 0.05%)</title><rect x="44.0065%" y="117" width="0.0485%" height="15" fill="rgb(246,171,24)" fg:x="7258" fg:w="8"/><text x="44.2565%" y="127.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (8 samples, 0.05%)</title><rect x="44.0065%" y="101" width="0.0485%" height="15" fill="rgb(215,142,24)" fg:x="7258" fg:w="8"/><text x="44.2565%" y="111.50"></text></g><g><title>std::sys_common::net::TcpStream::write (7 samples, 0.04%)</title><rect x="44.0126%" y="85" width="0.0424%" height="15" fill="rgb(250,187,7)" fg:x="7259" fg:w="7"/><text x="44.2626%" y="95.50"></text></g><g><title>__send (7 samples, 0.04%)</title><rect x="44.0126%" y="69" width="0.0424%" height="15" fill="rgb(228,66,33)" fg:x="7259" fg:w="7"/><text x="44.2626%" y="79.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (9 samples, 0.05%)</title><rect x="44.0065%" y="181" width="0.0546%" height="15" fill="rgb(234,215,21)" fg:x="7258" fg:w="9"/><text x="44.2565%" y="191.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (9 samples, 0.05%)</title><rect x="44.0065%" y="165" width="0.0546%" height="15" fill="rgb(222,191,20)" fg:x="7258" fg:w="9"/><text x="44.2565%" y="175.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (9 samples, 0.05%)</title><rect x="44.0065%" y="149" width="0.0546%" height="15" fill="rgb(245,79,54)" fg:x="7258" fg:w="9"/><text x="44.2565%" y="159.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (9 samples, 0.05%)</title><rect x="44.0065%" y="133" width="0.0546%" height="15" fill="rgb(240,10,37)" fg:x="7258" fg:w="9"/><text x="44.2565%" y="143.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (14 samples, 0.08%)</title><rect x="43.9823%" y="197" width="0.0849%" height="15" fill="rgb(214,192,32)" fg:x="7254" fg:w="14"/><text x="44.2323%" y="207.50"></text></g><g><title>chacha20_poly1305_seal_avx2 (46 samples, 0.28%)</title><rect x="44.0854%" y="133" width="0.2789%" height="15" fill="rgb(209,36,54)" fg:x="7271" fg:w="46"/><text x="44.3354%" y="143.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (72 samples, 0.44%)</title><rect x="43.9641%" y="213" width="0.4365%" height="15" fill="rgb(220,10,11)" fg:x="7251" fg:w="72"/><text x="44.2141%" y="223.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (54 samples, 0.33%)</title><rect x="44.0732%" y="197" width="0.3274%" height="15" fill="rgb(221,106,17)" fg:x="7269" fg:w="54"/><text x="44.3232%" y="207.50"></text></g><g><title>snow::transportstate::TransportState::write_message (53 samples, 0.32%)</title><rect x="44.0793%" y="181" width="0.3213%" height="15" fill="rgb(251,142,44)" fg:x="7270" fg:w="53"/><text x="44.3293%" y="191.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (52 samples, 0.32%)</title><rect x="44.0854%" y="165" width="0.3153%" height="15" fill="rgb(238,13,15)" fg:x="7271" fg:w="52"/><text x="44.3354%" y="175.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (52 samples, 0.32%)</title><rect x="44.0854%" y="149" width="0.3153%" height="15" fill="rgb(208,107,27)" fg:x="7271" fg:w="52"/><text x="44.3354%" y="159.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (6 samples, 0.04%)</title><rect x="44.3643%" y="133" width="0.0364%" height="15" fill="rgb(205,136,37)" fg:x="7317" fg:w="6"/><text x="44.6143%" y="143.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.02%)</title><rect x="44.5219%" y="181" width="0.0182%" height="15" fill="rgb(250,205,27)" fg:x="7343" fg:w="3"/><text x="44.7719%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.01%)</title><rect x="44.5401%" y="181" width="0.0121%" height="15" fill="rgb(210,80,43)" fg:x="7346" fg:w="2"/><text x="44.7901%" y="191.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (26 samples, 0.16%)</title><rect x="44.4007%" y="213" width="0.1576%" height="15" fill="rgb(247,160,36)" fg:x="7323" fg:w="26"/><text x="44.6507%" y="223.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (12 samples, 0.07%)</title><rect x="44.4855%" y="197" width="0.0728%" height="15" fill="rgb(234,13,49)" fg:x="7337" fg:w="12"/><text x="44.7355%" y="207.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (12 samples, 0.07%)</title><rect x="44.6371%" y="197" width="0.0728%" height="15" fill="rgb(234,122,0)" fg:x="7362" fg:w="12"/><text x="44.8871%" y="207.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (12 samples, 0.07%)</title><rect x="44.6371%" y="181" width="0.0728%" height="15" fill="rgb(207,146,38)" fg:x="7362" fg:w="12"/><text x="44.8871%" y="191.50"></text></g><g><title>[libc.so.6] (11 samples, 0.07%)</title><rect x="44.6432%" y="165" width="0.0667%" height="15" fill="rgb(207,177,25)" fg:x="7363" fg:w="11"/><text x="44.8932%" y="175.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (32 samples, 0.19%)</title><rect x="44.5583%" y="213" width="0.1940%" height="15" fill="rgb(211,178,42)" fg:x="7349" fg:w="32"/><text x="44.8083%" y="223.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="44.7159%" y="197" width="0.0364%" height="15" fill="rgb(230,69,54)" fg:x="7375" fg:w="6"/><text x="44.9659%" y="207.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="44.7220%" y="181" width="0.0303%" height="15" fill="rgb(214,135,41)" fg:x="7376" fg:w="5"/><text x="44.9720%" y="191.50"></text></g><g><title>[libc.so.6] (103 samples, 0.62%)</title><rect x="44.7523%" y="213" width="0.6245%" height="15" fill="rgb(237,67,25)" fg:x="7381" fg:w="103"/><text x="45.0023%" y="223.50"></text></g><g><title>futures_task::waker::wake_arc_raw (2 samples, 0.01%)</title><rect x="45.3829%" y="213" width="0.0121%" height="15" fill="rgb(222,189,50)" fg:x="7485" fg:w="2"/><text x="45.6329%" y="223.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (2 samples, 0.01%)</title><rect x="45.3829%" y="197" width="0.0121%" height="15" fill="rgb(245,148,34)" fg:x="7485" fg:w="2"/><text x="45.6329%" y="207.50"></text></g><g><title>std::sys::unix::time::Timespec::now (75 samples, 0.45%)</title><rect x="45.7103%" y="197" width="0.4547%" height="15" fill="rgb(222,29,6)" fg:x="7539" fg:w="75"/><text x="45.9603%" y="207.50"></text></g><g><title>clock_gettime (75 samples, 0.45%)</title><rect x="45.7103%" y="181" width="0.4547%" height="15" fill="rgb(221,189,43)" fg:x="7539" fg:w="75"/><text x="45.9603%" y="191.50"></text></g><g><title>__vdso_clock_gettime (75 samples, 0.45%)</title><rect x="45.7103%" y="165" width="0.4547%" height="15" fill="rgb(207,36,27)" fg:x="7539" fg:w="75"/><text x="45.9603%" y="175.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (692 samples, 4.20%)</title><rect x="41.9754%" y="277" width="4.1957%" height="15" fill="rgb(217,90,24)" fg:x="6923" fg:w="692"/><text x="42.2254%" y="287.50">&lt;libp..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (691 samples, 4.19%)</title><rect x="41.9814%" y="261" width="4.1897%" height="15" fill="rgb(224,66,35)" fg:x="6924" fg:w="691"/><text x="42.2314%" y="271.50">&lt;libp..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (685 samples, 4.15%)</title><rect x="42.0178%" y="245" width="4.1533%" height="15" fill="rgb(221,13,50)" fg:x="6930" fg:w="685"/><text x="42.2678%" y="255.50">&lt;libp..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (638 samples, 3.87%)</title><rect x="42.3028%" y="229" width="3.8683%" height="15" fill="rgb(236,68,49)" fg:x="6977" fg:w="638"/><text x="42.5528%" y="239.50">yamu..</text></g><g><title>yamux::connection::rtt::Rtt::next_ping (126 samples, 0.76%)</title><rect x="45.4071%" y="213" width="0.7640%" height="15" fill="rgb(229,146,28)" fg:x="7489" fg:w="126"/><text x="45.6571%" y="223.50"></text></g><g><title>_ZN15futures_channel4mpsc5queue14Queue$LT$T$GT$8pop_spin17h28ece2548749fa32E.llvm.6402655284677190421 (15 samples, 0.09%)</title><rect x="56.8544%" y="165" width="0.0909%" height="15" fill="rgb(225,31,38)" fg:x="9377" fg:w="15"/><text x="57.1044%" y="175.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="56.9514%" y="165" width="0.0121%" height="15" fill="rgb(250,208,3)" fg:x="9393" fg:w="2"/><text x="57.2014%" y="175.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h8f52052b5843b097E.llvm.6402655284677190421 (703 samples, 4.26%)</title><rect x="53.6834%" y="181" width="4.2624%" height="15" fill="rgb(246,54,23)" fg:x="8854" fg:w="703"/><text x="53.9334%" y="191.50">_ZN15..</text></g><g><title>cfree (162 samples, 0.98%)</title><rect x="56.9636%" y="165" width="0.9822%" height="15" fill="rgb(243,76,11)" fg:x="9395" fg:w="162"/><text x="57.2136%" y="175.50"></text></g><g><title>[libc.so.6] (145 samples, 0.88%)</title><rect x="57.0666%" y="149" width="0.8792%" height="15" fill="rgb(245,21,50)" fg:x="9412" fg:w="145"/><text x="57.3166%" y="159.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (947 samples, 5.74%)</title><rect x="52.5738%" y="213" width="5.7418%" height="15" fill="rgb(228,9,43)" fg:x="8671" fg:w="947"/><text x="52.8238%" y="223.50">&lt;future..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (823 samples, 4.99%)</title><rect x="53.3257%" y="197" width="4.9900%" height="15" fill="rgb(208,100,47)" fg:x="8795" fg:w="823"/><text x="53.5757%" y="207.50">&lt;futur..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (61 samples, 0.37%)</title><rect x="57.9458%" y="181" width="0.3699%" height="15" fill="rgb(232,26,8)" fg:x="9557" fg:w="61"/><text x="58.1958%" y="191.50"></text></g><g><title>futures_task::waker::clone_arc_raw (13 samples, 0.08%)</title><rect x="58.2368%" y="165" width="0.0788%" height="15" fill="rgb(216,166,38)" fg:x="9605" fg:w="13"/><text x="58.4868%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (68 samples, 0.41%)</title><rect x="58.8310%" y="197" width="0.4123%" height="15" fill="rgb(251,202,51)" fg:x="9703" fg:w="68"/><text x="59.0810%" y="207.50"></text></g><g><title>_ZN12futures_util6stream17futures_unordered27FuturesUnordered$LT$Fut$GT$12release_task17h3885e75e0a83ebfdE.llvm.317715505389412407 (192 samples, 1.16%)</title><rect x="58.3156%" y="213" width="1.1641%" height="15" fill="rgb(254,216,34)" fg:x="9618" fg:w="192"/><text x="58.5656%" y="223.50"></text></g><g><title>cfree (39 samples, 0.24%)</title><rect x="59.2433%" y="197" width="0.2365%" height="15" fill="rgb(251,32,27)" fg:x="9771" fg:w="39"/><text x="59.4933%" y="207.50"></text></g><g><title>[libc.so.6] (18 samples, 0.11%)</title><rect x="59.3706%" y="181" width="0.1091%" height="15" fill="rgb(208,127,28)" fg:x="9792" fg:w="18"/><text x="59.6206%" y="191.50"></text></g><g><title>alloc::task::raw_waker::wake_by_ref (17 samples, 0.10%)</title><rect x="59.4798%" y="213" width="0.1031%" height="15" fill="rgb(224,137,22)" fg:x="9810" fg:w="17"/><text x="59.7298%" y="223.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (232 samples, 1.41%)</title><rect x="59.5829%" y="213" width="1.4067%" height="15" fill="rgb(254,70,32)" fg:x="9827" fg:w="232"/><text x="59.8329%" y="223.50"></text></g><g><title>alloc::task::raw_waker::clone_waker (23 samples, 0.14%)</title><rect x="60.8501%" y="197" width="0.1395%" height="15" fill="rgb(229,75,37)" fg:x="10036" fg:w="23"/><text x="61.1001%" y="207.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (15 samples, 0.09%)</title><rect x="60.9895%" y="213" width="0.0909%" height="15" fill="rgb(252,64,23)" fg:x="10059" fg:w="15"/><text x="61.2395%" y="223.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1,773 samples, 10.75%)</title><rect x="50.3668%" y="229" width="10.7500%" height="15" fill="rgb(232,162,48)" fg:x="8307" fg:w="1773"/><text x="50.6168%" y="239.50">&lt;futures_util::s..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (6 samples, 0.04%)</title><rect x="61.0805%" y="213" width="0.0364%" height="15" fill="rgb(246,160,12)" fg:x="10074" fg:w="6"/><text x="61.3305%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (6 samples, 0.04%)</title><rect x="61.0805%" y="197" width="0.0364%" height="15" fill="rgb(247,166,0)" fg:x="10074" fg:w="6"/><text x="61.3305%" y="207.50"></text></g><g><title>[libc.so.6] (101 samples, 0.61%)</title><rect x="61.8262%" y="69" width="0.6124%" height="15" fill="rgb(249,219,21)" fg:x="10197" fg:w="101"/><text x="62.0762%" y="79.50"></text></g><g><title>__send (183 samples, 1.11%)</title><rect x="61.5231%" y="85" width="1.1096%" height="15" fill="rgb(205,209,3)" fg:x="10147" fg:w="183"/><text x="61.7731%" y="95.50"></text></g><g><title>[unknown] (32 samples, 0.19%)</title><rect x="62.4386%" y="69" width="0.1940%" height="15" fill="rgb(243,44,1)" fg:x="10298" fg:w="32"/><text x="62.6886%" y="79.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (193 samples, 1.17%)</title><rect x="61.4685%" y="133" width="1.1702%" height="15" fill="rgb(206,159,16)" fg:x="10138" fg:w="193"/><text x="61.7185%" y="143.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (192 samples, 1.16%)</title><rect x="61.4746%" y="117" width="1.1641%" height="15" fill="rgb(244,77,30)" fg:x="10139" fg:w="192"/><text x="61.7246%" y="127.50"></text></g><g><title>std::sys_common::net::TcpStream::write (186 samples, 1.13%)</title><rect x="61.5109%" y="101" width="1.1278%" height="15" fill="rgb(218,69,12)" fg:x="10145" fg:w="186"/><text x="61.7609%" y="111.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (257 samples, 1.56%)</title><rect x="61.3109%" y="197" width="1.5582%" height="15" fill="rgb(212,87,7)" fg:x="10112" fg:w="257"/><text x="61.5609%" y="207.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (251 samples, 1.52%)</title><rect x="61.3472%" y="181" width="1.5219%" height="15" fill="rgb(245,114,25)" fg:x="10118" fg:w="251"/><text x="61.5972%" y="191.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (251 samples, 1.52%)</title><rect x="61.3472%" y="165" width="1.5219%" height="15" fill="rgb(210,61,42)" fg:x="10118" fg:w="251"/><text x="61.5972%" y="175.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (251 samples, 1.52%)</title><rect x="61.3472%" y="149" width="1.5219%" height="15" fill="rgb(211,52,33)" fg:x="10118" fg:w="251"/><text x="61.5972%" y="159.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (38 samples, 0.23%)</title><rect x="62.6387%" y="133" width="0.2304%" height="15" fill="rgb(234,58,33)" fg:x="10331" fg:w="38"/><text x="62.8887%" y="143.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (19 samples, 0.12%)</title><rect x="62.7539%" y="117" width="0.1152%" height="15" fill="rgb(220,115,36)" fg:x="10350" fg:w="19"/><text x="63.0039%" y="127.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (298 samples, 1.81%)</title><rect x="61.1653%" y="213" width="1.8068%" height="15" fill="rgb(243,153,54)" fg:x="10088" fg:w="298"/><text x="61.4153%" y="223.50">&lt;..</text></g><g><title>bytes::bytes_mut::BytesMut::set_start (17 samples, 0.10%)</title><rect x="62.8691%" y="197" width="0.1031%" height="15" fill="rgb(251,47,18)" fg:x="10369" fg:w="17"/><text x="63.1191%" y="207.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_ready (6 samples, 0.04%)</title><rect x="62.9722%" y="213" width="0.0364%" height="15" fill="rgb(242,102,42)" fg:x="10386" fg:w="6"/><text x="63.2222%" y="223.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (4 samples, 0.02%)</title><rect x="63.0874%" y="197" width="0.0243%" height="15" fill="rgb(234,31,38)" fg:x="10405" fg:w="4"/><text x="63.3374%" y="207.50"></text></g><g><title>[libc.so.6] (8 samples, 0.05%)</title><rect x="63.1480%" y="181" width="0.0485%" height="15" fill="rgb(221,117,51)" fg:x="10415" fg:w="8"/><text x="63.3980%" y="191.50"></text></g><g><title>libp2p_noise::io::framed::encode_length_prefixed (15 samples, 0.09%)</title><rect x="63.1116%" y="197" width="0.0909%" height="15" fill="rgb(212,20,18)" fg:x="10409" fg:w="15"/><text x="63.3616%" y="207.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="63.3420%" y="165" width="0.0303%" height="15" fill="rgb(245,133,36)" fg:x="10447" fg:w="5"/><text x="63.5920%" y="175.50"></text></g><g><title>chacha20_poly1305_seal_avx2 (688 samples, 4.17%)</title><rect x="63.7422%" y="149" width="4.1715%" height="15" fill="rgb(212,6,19)" fg:x="10513" fg:w="688"/><text x="63.9922%" y="159.50">chach..</text></g><g><title>poly_hash_ad_internal (12 samples, 0.07%)</title><rect x="67.8409%" y="133" width="0.0728%" height="15" fill="rgb(218,1,36)" fg:x="11189" fg:w="12"/><text x="68.0909%" y="143.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (1,197 samples, 7.26%)</title><rect x="61.1168%" y="229" width="7.2576%" height="15" fill="rgb(246,84,54)" fg:x="10080" fg:w="1197"/><text x="61.3668%" y="239.50">&lt;libp2p_no..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (885 samples, 5.37%)</title><rect x="63.0085%" y="213" width="5.3659%" height="15" fill="rgb(242,110,6)" fg:x="10392" fg:w="885"/><text x="63.2585%" y="223.50">&lt;libp2p..</text></g><g><title>snow::transportstate::TransportState::write_message (853 samples, 5.17%)</title><rect x="63.2026%" y="197" width="5.1719%" height="15" fill="rgb(214,47,5)" fg:x="10424" fg:w="853"/><text x="63.4526%" y="207.50">snow::..</text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (840 samples, 5.09%)</title><rect x="63.2814%" y="181" width="5.0931%" height="15" fill="rgb(218,159,25)" fg:x="10437" fg:w="840"/><text x="63.5314%" y="191.50">&lt;snow:..</text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (825 samples, 5.00%)</title><rect x="63.3723%" y="165" width="5.0021%" height="15" fill="rgb(215,211,28)" fg:x="10452" fg:w="825"/><text x="63.6223%" y="175.50">ring::..</text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (76 samples, 0.46%)</title><rect x="67.9137%" y="149" width="0.4608%" height="15" fill="rgb(238,59,32)" fg:x="11201" fg:w="76"/><text x="68.1637%" y="159.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.03%)</title><rect x="69.0353%" y="197" width="0.0303%" height="15" fill="rgb(226,82,3)" fg:x="11386" fg:w="5"/><text x="69.2853%" y="207.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="69.0657%" y="197" width="0.0546%" height="15" fill="rgb(240,164,32)" fg:x="11391" fg:w="9"/><text x="69.3157%" y="207.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="69.1202%" y="197" width="0.0182%" height="15" fill="rgb(232,46,7)" fg:x="11400" fg:w="3"/><text x="69.3702%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.02%)</title><rect x="69.1202%" y="181" width="0.0182%" height="15" fill="rgb(229,129,53)" fg:x="11400" fg:w="3"/><text x="69.3702%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (89 samples, 0.54%)</title><rect x="69.1445%" y="197" width="0.5396%" height="15" fill="rgb(234,188,29)" fg:x="11404" fg:w="89"/><text x="69.3945%" y="207.50"></text></g><g><title>cfree (36 samples, 0.22%)</title><rect x="69.4658%" y="181" width="0.2183%" height="15" fill="rgb(246,141,4)" fg:x="11457" fg:w="36"/><text x="69.7158%" y="191.50"></text></g><g><title>[libc.so.6] (22 samples, 0.13%)</title><rect x="69.5507%" y="165" width="0.1334%" height="15" fill="rgb(229,23,39)" fg:x="11471" fg:w="22"/><text x="69.8007%" y="175.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (306 samples, 1.86%)</title><rect x="68.3745%" y="229" width="1.8553%" height="15" fill="rgb(206,12,3)" fg:x="11277" fg:w="306"/><text x="68.6245%" y="239.50">&lt;..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (265 samples, 1.61%)</title><rect x="68.6231%" y="213" width="1.6067%" height="15" fill="rgb(252,226,20)" fg:x="11318" fg:w="265"/><text x="68.8731%" y="223.50"></text></g><g><title>cfree (90 samples, 0.55%)</title><rect x="69.6841%" y="197" width="0.5457%" height="15" fill="rgb(216,123,35)" fg:x="11493" fg:w="90"/><text x="69.9341%" y="207.50"></text></g><g><title>[libc.so.6] (74 samples, 0.45%)</title><rect x="69.7811%" y="181" width="0.4487%" height="15" fill="rgb(212,68,40)" fg:x="11509" fg:w="74"/><text x="70.0311%" y="191.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (197 samples, 1.19%)</title><rect x="70.8725%" y="213" width="1.1944%" height="15" fill="rgb(254,125,32)" fg:x="11689" fg:w="197"/><text x="71.1225%" y="223.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (181 samples, 1.10%)</title><rect x="70.9695%" y="197" width="1.0974%" height="15" fill="rgb(253,97,22)" fg:x="11705" fg:w="181"/><text x="71.2195%" y="207.50"></text></g><g><title>[libc.so.6] (163 samples, 0.99%)</title><rect x="71.0786%" y="181" width="0.9883%" height="15" fill="rgb(241,101,14)" fg:x="11723" fg:w="163"/><text x="71.3286%" y="191.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="72.0669%" y="213" width="0.0121%" height="15" fill="rgb(238,103,29)" fg:x="11886" fg:w="2"/><text x="72.3169%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="72.0669%" y="197" width="0.0121%" height="15" fill="rgb(233,195,47)" fg:x="11886" fg:w="2"/><text x="72.3169%" y="207.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="72.0791%" y="213" width="0.0121%" height="15" fill="rgb(246,218,30)" fg:x="11888" fg:w="2"/><text x="72.3291%" y="223.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (516 samples, 3.13%)</title><rect x="70.2298%" y="229" width="3.1286%" height="15" fill="rgb(219,145,47)" fg:x="11583" fg:w="516"/><text x="70.4798%" y="239.50">&lt;ya..</text></g><g><title>cfree (209 samples, 1.27%)</title><rect x="72.0912%" y="213" width="1.2672%" height="15" fill="rgb(243,12,26)" fg:x="11890" fg:w="209"/><text x="72.3412%" y="223.50"></text></g><g><title>[libc.so.6] (190 samples, 1.15%)</title><rect x="72.2064%" y="197" width="1.1520%" height="15" fill="rgb(214,87,16)" fg:x="11909" fg:w="190"/><text x="72.4564%" y="207.50"></text></g><g><title>[libc.so.6] (124 samples, 0.75%)</title><rect x="73.3584%" y="229" width="0.7518%" height="15" fill="rgb(208,99,42)" fg:x="12099" fg:w="124"/><text x="73.6084%" y="239.50"></text></g><g><title>__libc_calloc (180 samples, 1.09%)</title><rect x="74.1102%" y="229" width="1.0914%" height="15" fill="rgb(253,99,2)" fg:x="12223" fg:w="180"/><text x="74.3602%" y="239.50"></text></g><g><title>[libc.so.6] (70 samples, 0.42%)</title><rect x="74.7772%" y="213" width="0.4244%" height="15" fill="rgb(220,168,23)" fg:x="12333" fg:w="70"/><text x="75.0272%" y="223.50"></text></g><g><title>__rdl_alloc (5 samples, 0.03%)</title><rect x="75.2016%" y="229" width="0.0303%" height="15" fill="rgb(242,38,24)" fg:x="12403" fg:w="5"/><text x="75.4516%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.03%)</title><rect x="75.2016%" y="213" width="0.0303%" height="15" fill="rgb(225,182,9)" fg:x="12403" fg:w="5"/><text x="75.4516%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (6 samples, 0.04%)</title><rect x="75.2319%" y="229" width="0.0364%" height="15" fill="rgb(243,178,37)" fg:x="12408" fg:w="6"/><text x="75.4819%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (3 samples, 0.02%)</title><rect x="75.2501%" y="213" width="0.0182%" height="15" fill="rgb(232,139,19)" fg:x="12411" fg:w="3"/><text x="75.5001%" y="223.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (79 samples, 0.48%)</title><rect x="76.1717%" y="197" width="0.4790%" height="15" fill="rgb(225,201,24)" fg:x="12563" fg:w="79"/><text x="76.4217%" y="207.50"></text></g><g><title>_ZN5tokio7runtime4park5Inner6unpark17hca359ebcdbebede2E.llvm.16602884379669939123 (6 samples, 0.04%)</title><rect x="77.0630%" y="149" width="0.0364%" height="15" fill="rgb(221,47,46)" fg:x="12710" fg:w="6"/><text x="77.3130%" y="159.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (2 samples, 0.01%)</title><rect x="77.0994%" y="149" width="0.0121%" height="15" fill="rgb(249,23,13)" fg:x="12716" fg:w="2"/><text x="77.3494%" y="159.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::notify_one (2 samples, 0.01%)</title><rect x="77.0994%" y="133" width="0.0121%" height="15" fill="rgb(219,9,5)" fg:x="12716" fg:w="2"/><text x="77.3494%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (2 samples, 0.01%)</title><rect x="77.0994%" y="117" width="0.0121%" height="15" fill="rgb(254,171,16)" fg:x="12716" fg:w="2"/><text x="77.3494%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.01%)</title><rect x="77.0994%" y="101" width="0.0121%" height="15" fill="rgb(230,171,20)" fg:x="12716" fg:w="2"/><text x="77.3494%" y="111.50"></text></g><g><title>_ZN5tokio7runtime4park4wake17h70d6e43b0cf0f3a8E.llvm.16602884379669939123 (15 samples, 0.09%)</title><rect x="77.0448%" y="165" width="0.0909%" height="15" fill="rgb(210,71,41)" fg:x="12707" fg:w="15"/><text x="77.2948%" y="175.50"></text></g><g><title>syscall (4 samples, 0.02%)</title><rect x="77.1115%" y="149" width="0.0243%" height="15" fill="rgb(206,173,20)" fg:x="12718" fg:w="4"/><text x="77.3615%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="77.1236%" y="133" width="0.0121%" height="15" fill="rgb(233,88,34)" fg:x="12720" fg:w="2"/><text x="77.3736%" y="143.50"></text></g><g><title>futures_task::waker::wake_arc_raw (355 samples, 2.15%)</title><rect x="75.2804%" y="229" width="2.1524%" height="15" fill="rgb(223,209,46)" fg:x="12416" fg:w="355"/><text x="75.5304%" y="239.50">f..</text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (348 samples, 2.11%)</title><rect x="75.3229%" y="213" width="2.1100%" height="15" fill="rgb(250,43,18)" fg:x="12423" fg:w="348"/><text x="75.5729%" y="223.50">&lt;..</text></g><g><title>futures_task::waker::wake_arc_raw (129 samples, 0.78%)</title><rect x="76.6507%" y="197" width="0.7822%" height="15" fill="rgb(208,13,10)" fg:x="12642" fg:w="129"/><text x="76.9007%" y="207.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (114 samples, 0.69%)</title><rect x="76.7416%" y="181" width="0.6912%" height="15" fill="rgb(212,200,36)" fg:x="12657" fg:w="114"/><text x="76.9916%" y="191.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (49 samples, 0.30%)</title><rect x="77.1358%" y="165" width="0.2971%" height="15" fill="rgb(225,90,30)" fg:x="12722" fg:w="49"/><text x="77.3858%" y="175.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="77.4329%" y="229" width="0.0243%" height="15" fill="rgb(236,182,39)" fg:x="12771" fg:w="4"/><text x="77.6829%" y="239.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (17 samples, 0.10%)</title><rect x="77.4571%" y="229" width="0.1031%" height="15" fill="rgb(212,144,35)" fg:x="12775" fg:w="17"/><text x="77.7071%" y="239.50"></text></g><g><title>yamux::chunks::Chunks::push (11 samples, 0.07%)</title><rect x="77.5602%" y="229" width="0.0667%" height="15" fill="rgb(228,63,44)" fg:x="12792" fg:w="11"/><text x="77.8102%" y="239.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::convert::From&lt;libc::unix::timespec&gt;&gt;::from (2 samples, 0.01%)</title><rect x="79.3609%" y="197" width="0.0121%" height="15" fill="rgb(228,109,6)" fg:x="13089" fg:w="2"/><text x="79.6109%" y="207.50"></text></g><g><title>std::sys::unix::time::Timespec::new (2 samples, 0.01%)</title><rect x="79.3609%" y="181" width="0.0121%" height="15" fill="rgb(238,117,24)" fg:x="13089" fg:w="2"/><text x="79.6109%" y="191.50"></text></g><g><title>std::sys::unix::time::Timespec::now (278 samples, 1.69%)</title><rect x="79.3488%" y="213" width="1.6856%" height="15" fill="rgb(242,26,26)" fg:x="13087" fg:w="278"/><text x="79.5988%" y="223.50"></text></g><g><title>clock_gettime (274 samples, 1.66%)</title><rect x="79.3731%" y="197" width="1.6613%" height="15" fill="rgb(221,92,48)" fg:x="13091" fg:w="274"/><text x="79.6231%" y="207.50"></text></g><g><title>__vdso_clock_gettime (264 samples, 1.60%)</title><rect x="79.4337%" y="181" width="1.6007%" height="15" fill="rgb(209,209,32)" fg:x="13101" fg:w="264"/><text x="79.6837%" y="191.50"></text></g><g><title>yamux::connection::rtt::Rtt::next_ping (566 samples, 3.43%)</title><rect x="77.6269%" y="229" width="3.4318%" height="15" fill="rgb(221,70,22)" fg:x="12803" fg:w="566"/><text x="77.8769%" y="239.50">yam..</text></g><g><title>std::time::Instant::now (4 samples, 0.02%)</title><rect x="81.0344%" y="213" width="0.0243%" height="15" fill="rgb(248,145,5)" fg:x="13365" fg:w="4"/><text x="81.2844%" y="223.50"></text></g><g><title>std::sys::unix::time::Instant::now (4 samples, 0.02%)</title><rect x="81.0344%" y="197" width="0.0243%" height="15" fill="rgb(226,116,26)" fg:x="13365" fg:w="4"/><text x="81.2844%" y="207.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (5,760 samples, 34.92%)</title><rect x="46.1711%" y="277" width="34.9239%" height="15" fill="rgb(244,5,17)" fg:x="7615" fg:w="5760"/><text x="46.4211%" y="287.50">&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxi..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (5,754 samples, 34.89%)</title><rect x="46.2075%" y="261" width="34.8875%" height="15" fill="rgb(252,159,33)" fg:x="7621" fg:w="5754"/><text x="46.4575%" y="271.50">&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMux..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (5,737 samples, 34.78%)</title><rect x="46.3106%" y="245" width="34.7845%" height="15" fill="rgb(206,71,0)" fg:x="7638" fg:w="5737"/><text x="46.5606%" y="255.50">yamux::connection::Connection&lt;T&gt;::poll_next_inbound</text></g><g><title>yamux::frame::header::decode (6 samples, 0.04%)</title><rect x="81.0586%" y="229" width="0.0364%" height="15" fill="rgb(233,118,54)" fg:x="13369" fg:w="6"/><text x="81.3086%" y="239.50"></text></g><g><title>alloc::task::raw_waker::drop_waker (25 samples, 0.15%)</title><rect x="81.0950%" y="277" width="0.1516%" height="15" fill="rgb(234,83,48)" fg:x="13375" fg:w="25"/><text x="81.3450%" y="287.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (103 samples, 0.62%)</title><rect x="81.2466%" y="277" width="0.6245%" height="15" fill="rgb(228,3,54)" fg:x="13400" fg:w="103"/><text x="81.4966%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (18 samples, 0.11%)</title><rect x="81.7620%" y="261" width="0.1091%" height="15" fill="rgb(226,155,13)" fg:x="13485" fg:w="18"/><text x="82.0120%" y="271.50"></text></g><g><title>libp2p_swarm::connection::delegation::DelegatedWakerScope::guard (106 samples, 0.64%)</title><rect x="81.8711%" y="277" width="0.6427%" height="15" fill="rgb(241,28,37)" fg:x="13503" fg:w="106"/><text x="82.1211%" y="287.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (6,925 samples, 41.99%)</title><rect x="40.5930%" y="309" width="41.9875%" height="15" fill="rgb(233,93,10)" fg:x="6695" fg:w="6925"/><text x="40.8430%" y="319.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future..</text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (6,728 samples, 40.79%)</title><rect x="41.7874%" y="293" width="40.7931%" height="15" fill="rgb(225,113,19)" fg:x="6892" fg:w="6728"/><text x="42.0374%" y="303.50">libp2p_swarm::connection::Connection&lt;THandler&gt;::poll</text></g><g><title>libp2p_swarm::stream::ActiveStreamCounter::has_no_active_streams (11 samples, 0.07%)</title><rect x="82.5138%" y="277" width="0.0667%" height="15" fill="rgb(241,2,18)" fg:x="13609" fg:w="11"/><text x="82.7638%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,942 samples, 42.09%)</title><rect x="40.5323%" y="325" width="42.0906%" height="15" fill="rgb(228,207,21)" fg:x="6685" fg:w="6942"/><text x="40.7823%" y="335.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (7 samples, 0.04%)</title><rect x="82.5805%" y="309" width="0.0424%" height="15" fill="rgb(213,211,35)" fg:x="13620" fg:w="7"/><text x="82.8305%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (9 samples, 0.05%)</title><rect x="82.6229%" y="325" width="0.0546%" height="15" fill="rgb(209,83,10)" fg:x="13627" fg:w="9"/><text x="82.8729%" y="335.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (41 samples, 0.25%)</title><rect x="82.6775%" y="325" width="0.2486%" height="15" fill="rgb(209,164,1)" fg:x="13636" fg:w="41"/><text x="82.9275%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (7,187 samples, 43.58%)</title><rect x="39.5319%" y="341" width="43.5761%" height="15" fill="rgb(213,184,43)" fg:x="6520" fg:w="7187"/><text x="39.7819%" y="351.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (30 samples, 0.18%)</title><rect x="82.9261%" y="325" width="0.1819%" height="15" fill="rgb(231,61,34)" fg:x="13677" fg:w="30"/><text x="83.1761%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (7,277 samples, 44.12%)</title><rect x="38.9923%" y="357" width="44.1217%" height="15" fill="rgb(235,75,3)" fg:x="6431" fg:w="7277"/><text x="39.2423%" y="367.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>core::hint::spin_loop (4 samples, 0.02%)</title><rect x="83.2353%" y="309" width="0.0243%" height="15" fill="rgb(220,106,47)" fg:x="13728" fg:w="4"/><text x="83.4853%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4 samples, 0.02%)</title><rect x="83.2353%" y="293" width="0.0243%" height="15" fill="rgb(210,196,33)" fg:x="13728" fg:w="4"/><text x="83.4853%" y="303.50"></text></g><g><title>[libc.so.6] (8,084 samples, 49.01%)</title><rect x="34.2509%" y="597" width="49.0147%" height="15" fill="rgb(229,154,42)" fg:x="5649" fg:w="8084"/><text x="34.5009%" y="607.50">[libc.so.6]</text></g><g><title>[libc.so.6] (8,082 samples, 49.00%)</title><rect x="34.2630%" y="581" width="49.0026%" height="15" fill="rgb(228,114,26)" fg:x="5651" fg:w="8082"/><text x="34.5130%" y="591.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,081 samples, 49.00%)</title><rect x="34.2691%" y="565" width="48.9965%" height="15" fill="rgb(208,144,1)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="575.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,081 samples, 49.00%)</title><rect x="34.2691%" y="549" width="48.9965%" height="15" fill="rgb(239,112,37)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,081 samples, 49.00%)</title><rect x="34.2691%" y="533" width="48.9965%" height="15" fill="rgb(210,96,50)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,081 samples, 49.00%)</title><rect x="34.2691%" y="517" width="48.9965%" height="15" fill="rgb(222,178,2)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,081 samples, 49.00%)</title><rect x="34.2691%" y="501" width="48.9965%" height="15" fill="rgb(226,74,18)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (8,081 samples, 49.00%)</title><rect x="34.2691%" y="485" width="48.9965%" height="15" fill="rgb(225,67,54)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="495.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8,081 samples, 49.00%)</title><rect x="34.2691%" y="469" width="48.9965%" height="15" fill="rgb(251,92,32)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="479.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8,081 samples, 49.00%)</title><rect x="34.2691%" y="453" width="48.9965%" height="15" fill="rgb(228,149,22)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="463.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (8,081 samples, 49.00%)</title><rect x="34.2691%" y="437" width="48.9965%" height="15" fill="rgb(243,54,13)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="447.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (8,081 samples, 49.00%)</title><rect x="34.2691%" y="421" width="48.9965%" height="15" fill="rgb(243,180,28)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="431.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (8,081 samples, 49.00%)</title><rect x="34.2691%" y="405" width="48.9965%" height="15" fill="rgb(208,167,24)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="415.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::set_scheduler (8,081 samples, 49.00%)</title><rect x="34.2691%" y="389" width="48.9965%" height="15" fill="rgb(245,73,45)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="399.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (8,081 samples, 49.00%)</title><rect x="34.2691%" y="373" width="48.9965%" height="15" fill="rgb(237,203,48)" fg:x="5652" fg:w="8081"/><text x="34.5191%" y="383.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (25 samples, 0.15%)</title><rect x="83.1140%" y="357" width="0.1516%" height="15" fill="rgb(211,197,16)" fg:x="13708" fg:w="25"/><text x="83.3640%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (5 samples, 0.03%)</title><rect x="83.2353%" y="341" width="0.0303%" height="15" fill="rgb(243,99,51)" fg:x="13728" fg:w="5"/><text x="83.4853%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (5 samples, 0.03%)</title><rect x="83.2353%" y="325" width="0.0303%" height="15" fill="rgb(215,123,29)" fg:x="13728" fg:w="5"/><text x="83.4853%" y="335.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (15 samples, 0.09%)</title><rect x="83.2656%" y="581" width="0.0909%" height="15" fill="rgb(239,186,37)" fg:x="13733" fg:w="15"/><text x="83.5156%" y="591.50"></text></g><g><title>[opt] (12 samples, 0.07%)</title><rect x="83.3687%" y="581" width="0.0728%" height="15" fill="rgb(252,136,39)" fg:x="13750" fg:w="12"/><text x="83.6187%" y="591.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (12 samples, 0.07%)</title><rect x="83.3687%" y="565" width="0.0728%" height="15" fill="rgb(223,213,32)" fg:x="13750" fg:w="12"/><text x="83.6187%" y="575.50"></text></g><g><title>_ZN15futures_channel4mpsc5queue14Queue$LT$T$GT$8pop_spin17h28ece2548749fa32E.llvm.6402655284677190421 (3 samples, 0.02%)</title><rect x="83.4415%" y="581" width="0.0182%" height="15" fill="rgb(233,115,5)" fg:x="13762" fg:w="3"/><text x="83.6915%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (8 samples, 0.05%)</title><rect x="83.4657%" y="581" width="0.0485%" height="15" fill="rgb(207,226,44)" fg:x="13766" fg:w="8"/><text x="83.7157%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.01%)</title><rect x="83.5142%" y="581" width="0.0121%" height="15" fill="rgb(208,126,0)" fg:x="13774" fg:w="2"/><text x="83.7642%" y="591.50"></text></g><g><title>[opt] (50 samples, 0.30%)</title><rect x="83.2656%" y="597" width="0.3032%" height="15" fill="rgb(244,66,21)" fg:x="13733" fg:w="50"/><text x="83.5156%" y="607.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (7 samples, 0.04%)</title><rect x="83.5263%" y="581" width="0.0424%" height="15" fill="rgb(222,97,12)" fg:x="13776" fg:w="7"/><text x="83.7763%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.08%)</title><rect x="83.5809%" y="581" width="0.0788%" height="15" fill="rgb(219,213,19)" fg:x="13785" fg:w="13"/><text x="83.8309%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (16 samples, 0.10%)</title><rect x="83.6597%" y="581" width="0.0970%" height="15" fill="rgb(252,169,30)" fg:x="13798" fg:w="16"/><text x="83.9097%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_ready (12 samples, 0.07%)</title><rect x="83.7567%" y="581" width="0.0728%" height="15" fill="rgb(206,32,51)" fg:x="13814" fg:w="12"/><text x="84.0067%" y="591.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 0.07%)</title><rect x="83.8356%" y="581" width="0.0667%" height="15" fill="rgb(250,172,42)" fg:x="13827" fg:w="11"/><text x="84.0856%" y="591.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (2 samples, 0.01%)</title><rect x="83.9023%" y="581" width="0.0121%" height="15" fill="rgb(209,34,43)" fg:x="13838" fg:w="2"/><text x="84.1523%" y="591.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (2 samples, 0.01%)</title><rect x="83.9205%" y="581" width="0.0121%" height="15" fill="rgb(223,11,35)" fg:x="13841" fg:w="2"/><text x="84.1705%" y="591.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThenFuture&lt;TFut,TMap,TMapOut&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="83.9326%" y="581" width="0.0303%" height="15" fill="rgb(251,219,26)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="591.50"></text></g><g><title>&lt;libp2p_core::upgrade::apply::InboundUpgradeApply&lt;C,U&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="83.9326%" y="565" width="0.0303%" height="15" fill="rgb(231,119,3)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="575.50"></text></g><g><title>_ZN96_$LT$libp2p_noise..Config$u20$as$u20$libp2p_core..upgrade..InboundConnectionUpgrade$LT$T$GT$$GT$15upgrade_inbound28_$u7b$$u7b$closure$u7d$$u7d$17h60f936cf881109dcE.llvm.17575803960194080569 (5 samples, 0.03%)</title><rect x="83.9326%" y="549" width="0.0303%" height="15" fill="rgb(216,97,11)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="559.50"></text></g><g><title>libp2p_noise::io::handshake::send_identity::_{{closure}} (5 samples, 0.03%)</title><rect x="83.9326%" y="533" width="0.0303%" height="15" fill="rgb(223,59,9)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="543.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (5 samples, 0.03%)</title><rect x="83.9326%" y="517" width="0.0303%" height="15" fill="rgb(233,93,31)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="527.50"></text></g><g><title>snow::handshakestate::HandshakeState::write_message (5 samples, 0.03%)</title><rect x="83.9326%" y="501" width="0.0303%" height="15" fill="rgb(239,81,33)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="511.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (5 samples, 0.03%)</title><rect x="83.9326%" y="485" width="0.0303%" height="15" fill="rgb(213,120,34)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="495.50"></text></g><g><title>x25519_dalek::x25519::x25519 (5 samples, 0.03%)</title><rect x="83.9326%" y="469" width="0.0303%" height="15" fill="rgb(243,49,53)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="479.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (5 samples, 0.03%)</title><rect x="83.9326%" y="453" width="0.0303%" height="15" fill="rgb(247,216,33)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="463.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (5 samples, 0.03%)</title><rect x="83.9326%" y="437" width="0.0303%" height="15" fill="rgb(226,26,14)" fg:x="13843" fg:w="5"/><text x="84.1826%" y="447.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (4 samples, 0.02%)</title><rect x="83.9386%" y="421" width="0.0243%" height="15" fill="rgb(215,49,53)" fg:x="13844" fg:w="4"/><text x="84.1886%" y="431.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (4 samples, 0.02%)</title><rect x="83.9386%" y="405" width="0.0243%" height="15" fill="rgb(245,162,40)" fg:x="13844" fg:w="4"/><text x="84.1886%" y="415.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (18 samples, 0.11%)</title><rect x="83.9629%" y="581" width="0.1091%" height="15" fill="rgb(229,68,17)" fg:x="13848" fg:w="18"/><text x="84.2129%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (12 samples, 0.07%)</title><rect x="84.0781%" y="581" width="0.0728%" height="15" fill="rgb(213,182,10)" fg:x="13867" fg:w="12"/><text x="84.3281%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (13 samples, 0.08%)</title><rect x="84.1509%" y="581" width="0.0788%" height="15" fill="rgb(245,125,30)" fg:x="13879" fg:w="13"/><text x="84.4009%" y="591.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="84.2297%" y="581" width="0.0121%" height="15" fill="rgb(232,202,2)" fg:x="13892" fg:w="2"/><text x="84.4797%" y="591.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (62 samples, 0.38%)</title><rect x="84.2418%" y="581" width="0.3759%" height="15" fill="rgb(237,140,51)" fg:x="13894" fg:w="62"/><text x="84.4918%" y="591.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (53 samples, 0.32%)</title><rect x="84.2964%" y="565" width="0.3213%" height="15" fill="rgb(236,157,25)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="575.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (53 samples, 0.32%)</title><rect x="84.2964%" y="549" width="0.3213%" height="15" fill="rgb(219,209,0)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="559.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (53 samples, 0.32%)</title><rect x="84.2964%" y="533" width="0.3213%" height="15" fill="rgb(240,116,54)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="543.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (53 samples, 0.32%)</title><rect x="84.2964%" y="517" width="0.3213%" height="15" fill="rgb(216,10,36)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="527.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (53 samples, 0.32%)</title><rect x="84.2964%" y="501" width="0.3213%" height="15" fill="rgb(222,72,44)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="511.50"></text></g><g><title>snow::transportstate::TransportState::read_message (53 samples, 0.32%)</title><rect x="84.2964%" y="485" width="0.3213%" height="15" fill="rgb(232,159,9)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="495.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (53 samples, 0.32%)</title><rect x="84.2964%" y="469" width="0.3213%" height="15" fill="rgb(210,39,32)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="479.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (53 samples, 0.32%)</title><rect x="84.2964%" y="453" width="0.3213%" height="15" fill="rgb(216,194,45)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="463.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (53 samples, 0.32%)</title><rect x="84.2964%" y="437" width="0.3213%" height="15" fill="rgb(218,18,35)" fg:x="13903" fg:w="53"/><text x="84.5464%" y="447.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (14 samples, 0.08%)</title><rect x="84.6177%" y="581" width="0.0849%" height="15" fill="rgb(207,83,51)" fg:x="13956" fg:w="14"/><text x="84.8677%" y="591.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (4 samples, 0.02%)</title><rect x="84.6783%" y="565" width="0.0243%" height="15" fill="rgb(225,63,43)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="575.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="84.6783%" y="549" width="0.0243%" height="15" fill="rgb(207,57,36)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="559.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="84.6783%" y="533" width="0.0243%" height="15" fill="rgb(216,99,33)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="543.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.02%)</title><rect x="84.6783%" y="517" width="0.0243%" height="15" fill="rgb(225,42,16)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="527.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (4 samples, 0.02%)</title><rect x="84.6783%" y="501" width="0.0243%" height="15" fill="rgb(220,201,45)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="511.50"></text></g><g><title>snow::transportstate::TransportState::read_message (4 samples, 0.02%)</title><rect x="84.6783%" y="485" width="0.0243%" height="15" fill="rgb(225,33,4)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="495.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (4 samples, 0.02%)</title><rect x="84.6783%" y="469" width="0.0243%" height="15" fill="rgb(224,33,50)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="479.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (4 samples, 0.02%)</title><rect x="84.6783%" y="453" width="0.0243%" height="15" fill="rgb(246,198,51)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="463.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (4 samples, 0.02%)</title><rect x="84.6783%" y="437" width="0.0243%" height="15" fill="rgb(205,22,4)" fg:x="13966" fg:w="4"/><text x="84.9283%" y="447.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (25 samples, 0.15%)</title><rect x="84.7026%" y="581" width="0.1516%" height="15" fill="rgb(206,3,8)" fg:x="13970" fg:w="25"/><text x="84.9526%" y="591.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (9 samples, 0.05%)</title><rect x="84.8542%" y="581" width="0.0546%" height="15" fill="rgb(251,23,15)" fg:x="13995" fg:w="9"/><text x="85.1042%" y="591.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (3 samples, 0.02%)</title><rect x="84.9087%" y="581" width="0.0182%" height="15" fill="rgb(252,88,28)" fg:x="14004" fg:w="3"/><text x="85.1587%" y="591.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="85.0543%" y="421" width="0.0121%" height="15" fill="rgb(212,127,14)" fg:x="14028" fg:w="2"/><text x="85.3043%" y="431.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (4 samples, 0.02%)</title><rect x="85.0725%" y="421" width="0.0243%" height="15" fill="rgb(247,145,37)" fg:x="14031" fg:w="4"/><text x="85.3225%" y="431.50"></text></g><g><title>__libc_calloc (4 samples, 0.02%)</title><rect x="85.0725%" y="405" width="0.0243%" height="15" fill="rgb(209,117,53)" fg:x="14031" fg:w="4"/><text x="85.3225%" y="415.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="85.0785%" y="389" width="0.0182%" height="15" fill="rgb(212,90,42)" fg:x="14032" fg:w="3"/><text x="85.3285%" y="399.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (13 samples, 0.08%)</title><rect x="85.0421%" y="437" width="0.0788%" height="15" fill="rgb(218,164,37)" fg:x="14026" fg:w="13"/><text x="85.2921%" y="447.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (4 samples, 0.02%)</title><rect x="85.0967%" y="421" width="0.0243%" height="15" fill="rgb(246,65,34)" fg:x="14035" fg:w="4"/><text x="85.3467%" y="431.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (128 samples, 0.78%)</title><rect x="84.9573%" y="549" width="0.7761%" height="15" fill="rgb(231,100,33)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="559.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (128 samples, 0.78%)</title><rect x="84.9573%" y="533" width="0.7761%" height="15" fill="rgb(228,126,14)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="543.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (128 samples, 0.78%)</title><rect x="84.9573%" y="517" width="0.7761%" height="15" fill="rgb(215,173,21)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="527.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (128 samples, 0.78%)</title><rect x="84.9573%" y="501" width="0.7761%" height="15" fill="rgb(210,6,40)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="511.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (128 samples, 0.78%)</title><rect x="84.9573%" y="485" width="0.7761%" height="15" fill="rgb(212,48,18)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="495.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (128 samples, 0.78%)</title><rect x="84.9573%" y="469" width="0.7761%" height="15" fill="rgb(230,214,11)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="479.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (128 samples, 0.78%)</title><rect x="84.9573%" y="453" width="0.7761%" height="15" fill="rgb(254,105,39)" fg:x="14012" fg:w="128"/><text x="85.2073%" y="463.50"></text></g><g><title>[libc.so.6] (101 samples, 0.61%)</title><rect x="85.1210%" y="437" width="0.6124%" height="15" fill="rgb(245,158,5)" fg:x="14039" fg:w="101"/><text x="85.3710%" y="447.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (22 samples, 0.13%)</title><rect x="86.2123%" y="437" width="0.1334%" height="15" fill="rgb(249,208,11)" fg:x="14219" fg:w="22"/><text x="86.4623%" y="447.50"></text></g><g><title>__libc_calloc (117 samples, 0.71%)</title><rect x="86.4427%" y="421" width="0.7094%" height="15" fill="rgb(210,39,28)" fg:x="14257" fg:w="117"/><text x="86.6927%" y="431.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="87.1218%" y="405" width="0.0303%" height="15" fill="rgb(211,56,53)" fg:x="14369" fg:w="5"/><text x="87.3718%" y="415.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (137 samples, 0.83%)</title><rect x="86.3457%" y="437" width="0.8307%" height="15" fill="rgb(226,201,30)" fg:x="14241" fg:w="137"/><text x="86.5957%" y="447.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.02%)</title><rect x="87.1521%" y="421" width="0.0243%" height="15" fill="rgb(239,101,34)" fg:x="14374" fg:w="4"/><text x="87.4021%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (3 samples, 0.02%)</title><rect x="87.1582%" y="405" width="0.0182%" height="15" fill="rgb(226,209,5)" fg:x="14375" fg:w="3"/><text x="87.4082%" y="415.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (28 samples, 0.17%)</title><rect x="87.1764%" y="437" width="0.1698%" height="15" fill="rgb(250,105,47)" fg:x="14378" fg:w="28"/><text x="87.4264%" y="447.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (276 samples, 1.67%)</title><rect x="85.8789%" y="453" width="1.6734%" height="15" fill="rgb(230,72,3)" fg:x="14164" fg:w="276"/><text x="86.1289%" y="463.50"></text></g><g><title>snow::transportstate::TransportState::read_message (34 samples, 0.21%)</title><rect x="87.3461%" y="437" width="0.2061%" height="15" fill="rgb(232,218,39)" fg:x="14406" fg:w="34"/><text x="87.5961%" y="447.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (611 samples, 3.70%)</title><rect x="84.9330%" y="581" width="3.7046%" height="15" fill="rgb(248,166,6)" fg:x="14008" fg:w="611"/><text x="85.1830%" y="591.50">&lt;tra..</text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (607 samples, 3.68%)</title><rect x="84.9573%" y="565" width="3.6803%" height="15" fill="rgb(247,89,20)" fg:x="14012" fg:w="607"/><text x="85.2073%" y="575.50">libp..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (479 samples, 2.90%)</title><rect x="85.7333%" y="549" width="2.9043%" height="15" fill="rgb(248,130,54)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="559.50">&lt;l..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (479 samples, 2.90%)</title><rect x="85.7333%" y="533" width="2.9043%" height="15" fill="rgb(234,196,4)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="543.50">&lt;l..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (479 samples, 2.90%)</title><rect x="85.7333%" y="517" width="2.9043%" height="15" fill="rgb(250,143,31)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="527.50">ya..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (479 samples, 2.90%)</title><rect x="85.7333%" y="501" width="2.9043%" height="15" fill="rgb(211,110,34)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="511.50">&lt;m..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (479 samples, 2.90%)</title><rect x="85.7333%" y="485" width="2.9043%" height="15" fill="rgb(215,124,48)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="495.50">&lt;l..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (479 samples, 2.90%)</title><rect x="85.7333%" y="469" width="2.9043%" height="15" fill="rgb(216,46,13)" fg:x="14140" fg:w="479"/><text x="85.9833%" y="479.50">&lt;a..</text></g><g><title>[libc.so.6] (179 samples, 1.09%)</title><rect x="87.5523%" y="453" width="1.0853%" height="15" fill="rgb(205,184,25)" fg:x="14440" fg:w="179"/><text x="87.8023%" y="463.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (24 samples, 0.15%)</title><rect x="88.6376%" y="581" width="0.1455%" height="15" fill="rgb(228,1,10)" fg:x="14619" fg:w="24"/><text x="88.8876%" y="591.50"></text></g><g><title>[libc.so.6] (17 samples, 0.10%)</title><rect x="88.7831%" y="581" width="0.1031%" height="15" fill="rgb(213,116,27)" fg:x="14643" fg:w="17"/><text x="89.0331%" y="591.50"></text></g><g><title>&lt;asynchronous_codec::framed_write::FramedWrite2&lt;T&gt; as futures_sink::Sink&lt;&lt;T as asynchronous_codec::encoder::Encoder&gt;::Item&gt;&gt;::poll_flush (2 samples, 0.01%)</title><rect x="88.8862%" y="565" width="0.0121%" height="15" fill="rgb(241,95,50)" fg:x="14660" fg:w="2"/><text x="89.1362%" y="575.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (3 samples, 0.02%)</title><rect x="88.8983%" y="565" width="0.0182%" height="15" fill="rgb(238,48,32)" fg:x="14662" fg:w="3"/><text x="89.1483%" y="575.50"></text></g><g><title>[opt] (10 samples, 0.06%)</title><rect x="88.8862%" y="581" width="0.0606%" height="15" fill="rgb(235,113,49)" fg:x="14660" fg:w="10"/><text x="89.1362%" y="591.50"></text></g><g><title>yamux::chunks::Chunks::push (4 samples, 0.02%)</title><rect x="88.9226%" y="565" width="0.0243%" height="15" fill="rgb(205,127,43)" fg:x="14666" fg:w="4"/><text x="89.1726%" y="575.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h8f52052b5843b097E.llvm.6402655284677190421 (3 samples, 0.02%)</title><rect x="88.9468%" y="581" width="0.0182%" height="15" fill="rgb(250,162,2)" fg:x="14670" fg:w="3"/><text x="89.1968%" y="591.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17ha08917d031e96be3E.llvm.6402655284677190421 (5 samples, 0.03%)</title><rect x="88.9650%" y="581" width="0.0303%" height="15" fill="rgb(220,13,41)" fg:x="14673" fg:w="5"/><text x="89.2150%" y="591.50"></text></g><g><title>__send (2 samples, 0.01%)</title><rect x="89.0256%" y="581" width="0.0121%" height="15" fill="rgb(249,221,25)" fg:x="14683" fg:w="2"/><text x="89.2756%" y="591.50"></text></g><g><title>alloc::task::raw_waker::wake (3 samples, 0.02%)</title><rect x="89.0560%" y="581" width="0.0182%" height="15" fill="rgb(215,208,19)" fg:x="14688" fg:w="3"/><text x="89.3060%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (2 samples, 0.01%)</title><rect x="89.0863%" y="581" width="0.0121%" height="15" fill="rgb(236,175,2)" fg:x="14693" fg:w="2"/><text x="89.3363%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (14 samples, 0.08%)</title><rect x="89.0984%" y="581" width="0.0849%" height="15" fill="rgb(241,52,2)" fg:x="14695" fg:w="14"/><text x="89.3484%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (7 samples, 0.04%)</title><rect x="89.1833%" y="581" width="0.0424%" height="15" fill="rgb(248,140,14)" fg:x="14709" fg:w="7"/><text x="89.4333%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (3 samples, 0.02%)</title><rect x="89.2257%" y="581" width="0.0182%" height="15" fill="rgb(253,22,42)" fg:x="14716" fg:w="3"/><text x="89.4757%" y="591.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.01%)</title><rect x="89.2439%" y="581" width="0.0121%" height="15" fill="rgb(234,61,47)" fg:x="14719" fg:w="2"/><text x="89.4939%" y="591.50"></text></g><g><title>cfree (12 samples, 0.07%)</title><rect x="89.2560%" y="581" width="0.0728%" height="15" fill="rgb(208,226,15)" fg:x="14721" fg:w="12"/><text x="89.5060%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.01%)</title><rect x="89.3288%" y="581" width="0.0121%" height="15" fill="rgb(217,221,4)" fg:x="14733" fg:w="2"/><text x="89.5788%" y="591.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (11 samples, 0.07%)</title><rect x="89.3470%" y="581" width="0.0667%" height="15" fill="rgb(212,174,34)" fg:x="14736" fg:w="11"/><text x="89.5970%" y="591.50"></text></g><g><title>libp2p_noise::io::framed::encode_length_prefixed (4 samples, 0.02%)</title><rect x="89.4137%" y="581" width="0.0243%" height="15" fill="rgb(253,83,4)" fg:x="14747" fg:w="4"/><text x="89.6637%" y="591.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (2 samples, 0.01%)</title><rect x="89.5410%" y="453" width="0.0121%" height="15" fill="rgb(250,195,49)" fg:x="14768" fg:w="2"/><text x="89.7910%" y="463.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (109 samples, 0.66%)</title><rect x="89.5410%" y="565" width="0.6609%" height="15" fill="rgb(241,192,25)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="575.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (109 samples, 0.66%)</title><rect x="89.5410%" y="549" width="0.6609%" height="15" fill="rgb(208,124,10)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="559.50"></text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (109 samples, 0.66%)</title><rect x="89.5410%" y="533" width="0.6609%" height="15" fill="rgb(222,33,0)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="543.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (109 samples, 0.66%)</title><rect x="89.5410%" y="517" width="0.6609%" height="15" fill="rgb(234,209,28)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="527.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (109 samples, 0.66%)</title><rect x="89.5410%" y="501" width="0.6609%" height="15" fill="rgb(224,11,23)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="511.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (109 samples, 0.66%)</title><rect x="89.5410%" y="485" width="0.6609%" height="15" fill="rgb(232,99,1)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="495.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (109 samples, 0.66%)</title><rect x="89.5410%" y="469" width="0.6609%" height="15" fill="rgb(237,95,45)" fg:x="14768" fg:w="109"/><text x="89.7910%" y="479.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (107 samples, 0.65%)</title><rect x="89.5531%" y="453" width="0.6488%" height="15" fill="rgb(208,109,11)" fg:x="14770" fg:w="107"/><text x="89.8031%" y="463.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (102 samples, 0.62%)</title><rect x="89.5835%" y="437" width="0.6184%" height="15" fill="rgb(216,190,48)" fg:x="14775" fg:w="102"/><text x="89.8335%" y="447.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (100 samples, 0.61%)</title><rect x="89.5956%" y="421" width="0.6063%" height="15" fill="rgb(251,171,36)" fg:x="14777" fg:w="100"/><text x="89.8456%" y="431.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (91 samples, 0.55%)</title><rect x="89.6502%" y="405" width="0.5517%" height="15" fill="rgb(230,62,22)" fg:x="14786" fg:w="91"/><text x="89.9002%" y="415.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (71 samples, 0.43%)</title><rect x="89.7714%" y="389" width="0.4305%" height="15" fill="rgb(225,114,35)" fg:x="14806" fg:w="71"/><text x="90.0214%" y="399.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="90.6930%" y="437" width="0.0121%" height="15" fill="rgb(215,118,42)" fg:x="14958" fg:w="2"/><text x="90.9430%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.01%)</title><rect x="90.6930%" y="421" width="0.0121%" height="15" fill="rgb(243,119,21)" fg:x="14958" fg:w="2"/><text x="90.9430%" y="431.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="90.7051%" y="437" width="0.0121%" height="15" fill="rgb(252,177,53)" fg:x="14960" fg:w="2"/><text x="90.9551%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (10 samples, 0.06%)</title><rect x="90.7173%" y="437" width="0.0606%" height="15" fill="rgb(237,209,29)" fg:x="14962" fg:w="10"/><text x="90.9673%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (114 samples, 0.69%)</title><rect x="90.2019%" y="453" width="0.6912%" height="15" fill="rgb(212,65,23)" fg:x="14877" fg:w="114"/><text x="90.4519%" y="463.50"></text></g><g><title>malloc (19 samples, 0.12%)</title><rect x="90.7779%" y="437" width="0.1152%" height="15" fill="rgb(230,222,46)" fg:x="14972" fg:w="19"/><text x="91.0279%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (72 samples, 0.44%)</title><rect x="90.8931%" y="453" width="0.4365%" height="15" fill="rgb(215,135,32)" fg:x="14991" fg:w="72"/><text x="91.1431%" y="463.50"></text></g><g><title>__libc_calloc (72 samples, 0.44%)</title><rect x="90.8931%" y="437" width="0.4365%" height="15" fill="rgb(246,101,22)" fg:x="14991" fg:w="72"/><text x="91.1431%" y="447.50"></text></g><g><title>[libc.so.6] (72 samples, 0.44%)</title><rect x="90.8931%" y="421" width="0.4365%" height="15" fill="rgb(206,107,13)" fg:x="14991" fg:w="72"/><text x="91.1431%" y="431.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (5 samples, 0.03%)</title><rect x="91.4509%" y="437" width="0.0303%" height="15" fill="rgb(250,100,44)" fg:x="15083" fg:w="5"/><text x="91.7009%" y="447.50"></text></g><g><title>libp2p_noise::io::framed::decode_length_prefixed (126 samples, 0.76%)</title><rect x="91.3297%" y="453" width="0.7640%" height="15" fill="rgb(231,147,38)" fg:x="15063" fg:w="126"/><text x="91.5797%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (101 samples, 0.61%)</title><rect x="91.4812%" y="437" width="0.6124%" height="15" fill="rgb(229,8,40)" fg:x="15088" fg:w="101"/><text x="91.7312%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (8 samples, 0.05%)</title><rect x="92.0451%" y="421" width="0.0485%" height="15" fill="rgb(221,135,30)" fg:x="15181" fg:w="8"/><text x="92.2951%" y="431.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (4 samples, 0.02%)</title><rect x="92.2331%" y="405" width="0.0243%" height="15" fill="rgb(249,193,18)" fg:x="15212" fg:w="4"/><text x="92.4831%" y="415.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (365 samples, 2.21%)</title><rect x="90.2019%" y="469" width="2.2131%" height="15" fill="rgb(209,133,39)" fg:x="14877" fg:w="365"/><text x="90.4519%" y="479.50">&lt;..</text></g><g><title>snow::transportstate::TransportState::read_message (53 samples, 0.32%)</title><rect x="92.0936%" y="453" width="0.3213%" height="15" fill="rgb(232,100,14)" fg:x="15189" fg:w="53"/><text x="92.3436%" y="463.50"></text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (53 samples, 0.32%)</title><rect x="92.0936%" y="437" width="0.3213%" height="15" fill="rgb(224,185,1)" fg:x="15189" fg:w="53"/><text x="92.3436%" y="447.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (37 samples, 0.22%)</title><rect x="92.1906%" y="421" width="0.2243%" height="15" fill="rgb(223,139,8)" fg:x="15205" fg:w="37"/><text x="92.4406%" y="431.50"></text></g><g><title>ring_core_0_17_5_CRYPTO_memcmp (26 samples, 0.16%)</title><rect x="92.2573%" y="405" width="0.1576%" height="15" fill="rgb(232,213,38)" fg:x="15216" fg:w="26"/><text x="92.5073%" y="415.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="92.5059%" y="437" width="0.0121%" height="15" fill="rgb(207,94,22)" fg:x="15257" fg:w="2"/><text x="92.7559%" y="447.50"></text></g><g><title>[libc.so.6] (39 samples, 0.24%)</title><rect x="92.8454%" y="325" width="0.2365%" height="15" fill="rgb(219,183,54)" fg:x="15313" fg:w="39"/><text x="93.0954%" y="335.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (67 samples, 0.41%)</title><rect x="92.7060%" y="421" width="0.4062%" height="15" fill="rgb(216,185,54)" fg:x="15290" fg:w="67"/><text x="92.9560%" y="431.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (66 samples, 0.40%)</title><rect x="92.7121%" y="405" width="0.4002%" height="15" fill="rgb(254,217,39)" fg:x="15291" fg:w="66"/><text x="92.9621%" y="415.50"></text></g><g><title>std::sys_common::net::TcpStream::read (64 samples, 0.39%)</title><rect x="92.7242%" y="389" width="0.3880%" height="15" fill="rgb(240,178,23)" fg:x="15293" fg:w="64"/><text x="92.9742%" y="399.50"></text></g><g><title>std::sys::unix::net::Socket::read (64 samples, 0.39%)</title><rect x="92.7242%" y="373" width="0.3880%" height="15" fill="rgb(218,11,47)" fg:x="15293" fg:w="64"/><text x="92.9742%" y="383.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (64 samples, 0.39%)</title><rect x="92.7242%" y="357" width="0.3880%" height="15" fill="rgb(218,51,51)" fg:x="15293" fg:w="64"/><text x="92.9742%" y="367.50"></text></g><g><title>recv (64 samples, 0.39%)</title><rect x="92.7242%" y="341" width="0.3880%" height="15" fill="rgb(238,126,27)" fg:x="15293" fg:w="64"/><text x="92.9742%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="93.0819%" y="325" width="0.0303%" height="15" fill="rgb(249,202,22)" fg:x="15352" fg:w="5"/><text x="93.3319%" y="335.50"></text></g><g><title>libp2p_swarm::connection::Connection&lt;THandler&gt;::poll (784 samples, 4.75%)</title><rect x="89.4379%" y="581" width="4.7535%" height="15" fill="rgb(254,195,49)" fg:x="14751" fg:w="784"/><text x="89.6879%" y="591.50">libp2p..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (658 samples, 3.99%)</title><rect x="90.2019%" y="565" width="3.9896%" height="15" fill="rgb(208,123,14)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="575.50">&lt;lib..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (658 samples, 3.99%)</title><rect x="90.2019%" y="549" width="3.9896%" height="15" fill="rgb(224,200,8)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="559.50">&lt;lib..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (658 samples, 3.99%)</title><rect x="90.2019%" y="533" width="3.9896%" height="15" fill="rgb(217,61,36)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="543.50">yamu..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (658 samples, 3.99%)</title><rect x="90.2019%" y="517" width="3.9896%" height="15" fill="rgb(206,35,45)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="527.50">&lt;mul..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (658 samples, 3.99%)</title><rect x="90.2019%" y="501" width="3.9896%" height="15" fill="rgb(217,65,33)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="511.50">&lt;lib..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (658 samples, 3.99%)</title><rect x="90.2019%" y="485" width="3.9896%" height="15" fill="rgb(222,158,48)" fg:x="14877" fg:w="658"/><text x="90.4519%" y="495.50">&lt;asy..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (293 samples, 1.78%)</title><rect x="92.4150%" y="469" width="1.7765%" height="15" fill="rgb(254,2,54)" fg:x="15242" fg:w="293"/><text x="92.6650%" y="479.50">&lt;..</text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (279 samples, 1.69%)</title><rect x="92.4998%" y="453" width="1.6916%" height="15" fill="rgb(250,143,38)" fg:x="15256" fg:w="279"/><text x="92.7498%" y="463.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (276 samples, 1.67%)</title><rect x="92.5180%" y="437" width="1.6734%" height="15" fill="rgb(248,25,0)" fg:x="15259" fg:w="276"/><text x="92.7680%" y="447.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (178 samples, 1.08%)</title><rect x="93.1122%" y="421" width="1.0792%" height="15" fill="rgb(206,152,27)" fg:x="15357" fg:w="178"/><text x="93.3622%" y="431.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (159 samples, 0.96%)</title><rect x="93.2274%" y="405" width="0.9640%" height="15" fill="rgb(240,77,30)" fg:x="15376" fg:w="159"/><text x="93.4774%" y="415.50"></text></g><g><title>alloc::task::raw_waker::clone_waker (13 samples, 0.08%)</title><rect x="94.1127%" y="389" width="0.0788%" height="15" fill="rgb(231,5,3)" fg:x="15522" fg:w="13"/><text x="94.3627%" y="399.50"></text></g><g><title>libp2p_swarm::connection::delegation::DelegatedWakerScope::guard (3 samples, 0.02%)</title><rect x="94.1915%" y="581" width="0.0182%" height="15" fill="rgb(207,226,32)" fg:x="15535" fg:w="3"/><text x="94.4415%" y="591.50"></text></g><g><title>malloc (6 samples, 0.04%)</title><rect x="94.2157%" y="581" width="0.0364%" height="15" fill="rgb(222,207,47)" fg:x="15539" fg:w="6"/><text x="94.4657%" y="591.50"></text></g><g><title>poly_hash_ad_internal (2 samples, 0.01%)</title><rect x="94.2521%" y="581" width="0.0121%" height="15" fill="rgb(229,115,45)" fg:x="15545" fg:w="2"/><text x="94.5021%" y="591.50"></text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (5 samples, 0.03%)</title><rect x="94.2642%" y="581" width="0.0303%" height="15" fill="rgb(224,191,6)" fg:x="15547" fg:w="5"/><text x="94.5142%" y="591.50"></text></g><g><title>ring_core_0_17_5_CRYPTO_memcmp (4 samples, 0.02%)</title><rect x="94.3006%" y="581" width="0.0243%" height="15" fill="rgb(230,227,24)" fg:x="15553" fg:w="4"/><text x="94.5506%" y="591.50"></text></g><g><title>ring_core_0_17_5_chacha20_poly1305_seal (2 samples, 0.01%)</title><rect x="94.3249%" y="581" width="0.0121%" height="15" fill="rgb(228,80,19)" fg:x="15557" fg:w="2"/><text x="94.5749%" y="591.50"></text></g><g><title>snow::transportstate::TransportState::read_message (2 samples, 0.01%)</title><rect x="94.3370%" y="581" width="0.0121%" height="15" fill="rgb(247,229,0)" fg:x="15559" fg:w="2"/><text x="94.5870%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::now (5 samples, 0.03%)</title><rect x="94.3552%" y="581" width="0.0303%" height="15" fill="rgb(237,194,15)" fg:x="15562" fg:w="5"/><text x="94.6052%" y="591.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (4 samples, 0.02%)</title><rect x="94.3976%" y="581" width="0.0243%" height="15" fill="rgb(219,203,20)" fg:x="15569" fg:w="4"/><text x="94.6476%" y="591.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (7 samples, 0.04%)</title><rect x="94.4219%" y="581" width="0.0424%" height="15" fill="rgb(234,128,8)" fg:x="15573" fg:w="7"/><text x="94.6719%" y="591.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (15 samples, 0.09%)</title><rect x="94.4643%" y="581" width="0.0909%" height="15" fill="rgb(248,202,8)" fg:x="15580" fg:w="15"/><text x="94.7143%" y="591.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (2 samples, 0.01%)</title><rect x="94.5553%" y="581" width="0.0121%" height="15" fill="rgb(206,104,37)" fg:x="15595" fg:w="2"/><text x="94.8053%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (2 samples, 0.01%)</title><rect x="94.5674%" y="581" width="0.0121%" height="15" fill="rgb(223,8,27)" fg:x="15597" fg:w="2"/><text x="94.8174%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (2 samples, 0.01%)</title><rect x="94.5856%" y="581" width="0.0121%" height="15" fill="rgb(216,217,28)" fg:x="15600" fg:w="2"/><text x="94.8356%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (7 samples, 0.04%)</title><rect x="94.6098%" y="581" width="0.0424%" height="15" fill="rgb(249,199,1)" fg:x="15604" fg:w="7"/><text x="94.8598%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6 samples, 0.04%)</title><rect x="94.6523%" y="581" width="0.0364%" height="15" fill="rgb(240,85,17)" fg:x="15611" fg:w="6"/><text x="94.9023%" y="591.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.02%)</title><rect x="94.6887%" y="581" width="0.0243%" height="15" fill="rgb(206,108,45)" fg:x="15617" fg:w="4"/><text x="94.9387%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.02%)</title><rect x="94.7129%" y="581" width="0.0182%" height="15" fill="rgb(245,210,41)" fg:x="15621" fg:w="3"/><text x="94.9629%" y="591.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (2 samples, 0.01%)</title><rect x="94.7372%" y="581" width="0.0121%" height="15" fill="rgb(206,13,37)" fg:x="15625" fg:w="2"/><text x="94.9872%" y="591.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (2 samples, 0.01%)</title><rect x="94.7493%" y="581" width="0.0121%" height="15" fill="rgb(250,61,18)" fg:x="15627" fg:w="2"/><text x="94.9993%" y="591.50"></text></g><g><title>chacha20_poly1305_open_avx2 (673 samples, 4.08%)</title><rect x="95.2404%" y="437" width="4.0805%" height="15" fill="rgb(235,172,48)" fg:x="15708" fg:w="673"/><text x="95.4904%" y="447.50">chac..</text></g><g><title>poly_hash_ad_internal (5 samples, 0.03%)</title><rect x="99.2906%" y="421" width="0.0303%" height="15" fill="rgb(249,201,17)" fg:x="16376" fg:w="5"/><text x="99.5406%" y="431.50"></text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (828 samples, 5.02%)</title><rect x="94.7735%" y="581" width="5.0203%" height="15" fill="rgb(219,208,6)" fg:x="15631" fg:w="828"/><text x="95.0235%" y="591.50">yamux:..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (751 samples, 4.55%)</title><rect x="95.2404%" y="565" width="4.5534%" height="15" fill="rgb(248,31,23)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="575.50">&lt;mult..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (751 samples, 4.55%)</title><rect x="95.2404%" y="549" width="4.5534%" height="15" fill="rgb(245,15,42)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="559.50">&lt;libp..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (751 samples, 4.55%)</title><rect x="95.2404%" y="533" width="4.5534%" height="15" fill="rgb(222,217,39)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="543.50">&lt;asyn..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (751 samples, 4.55%)</title><rect x="95.2404%" y="517" width="4.5534%" height="15" fill="rgb(210,219,27)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="527.50">&lt;libp..</text></g><g><title>snow::transportstate::TransportState::read_message (751 samples, 4.55%)</title><rect x="95.2404%" y="501" width="4.5534%" height="15" fill="rgb(252,166,36)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="511.50">snow:..</text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (751 samples, 4.55%)</title><rect x="95.2404%" y="485" width="4.5534%" height="15" fill="rgb(245,132,34)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="495.50">&lt;snow..</text></g><g><title>ring::aead::less_safe_key::open_within_ (751 samples, 4.55%)</title><rect x="95.2404%" y="469" width="4.5534%" height="15" fill="rgb(236,54,3)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="479.50">ring:..</text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (751 samples, 4.55%)</title><rect x="95.2404%" y="453" width="4.5534%" height="15" fill="rgb(241,173,43)" fg:x="15708" fg:w="751"/><text x="95.4904%" y="463.50">ring:..</text></g><g><title>ring_core_0_17_5_chacha20_poly1305_open (78 samples, 0.47%)</title><rect x="99.3209%" y="437" width="0.4729%" height="15" fill="rgb(215,190,9)" fg:x="16381" fg:w="78"/><text x="99.5709%" y="447.50"></text></g><g><title>[unknown] (2,693 samples, 16.33%)</title><rect x="83.5688%" y="597" width="16.3281%" height="15" fill="rgb(242,101,16)" fg:x="13783" fg:w="2693"/><text x="83.8188%" y="607.50">[unknown]</text></g><g><title>yamux::connection::rtt::Rtt::next_ping (17 samples, 0.10%)</title><rect x="99.7939%" y="581" width="0.1031%" height="15" fill="rgb(223,190,21)" fg:x="16459" fg:w="17"/><text x="100.0439%" y="591.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.01%)</title><rect x="99.9091%" y="597" width="0.0121%" height="15" fill="rgb(215,228,25)" fg:x="16478" fg:w="2"/><text x="100.1591%" y="607.50"></text></g><g><title>all (16,493 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(225,36,22)" fg:x="0" fg:w="16493"/><text x="0.2500%" y="639.50"></text></g><g><title>tokio-runtime-w (11,329 samples, 68.69%)</title><rect x="31.3103%" y="613" width="68.6897%" height="15" fill="rgb(251,106,46)" fg:x="5164" fg:w="11329"/><text x="31.5603%" y="623.50">tokio-runtime-w</text></g><g><title>tracing_core::dispatcher::GLOBAL_DISPATCH (10 samples, 0.06%)</title><rect x="99.9394%" y="597" width="0.0606%" height="15" fill="rgb(208,90,1)" fg:x="16483" fg:w="10"/><text x="100.1894%" y="607.50"></text></g><g><title>snow::transportstate::TransportState::read_message (9 samples, 0.05%)</title><rect x="99.9454%" y="581" width="0.0546%" height="15" fill="rgb(243,10,4)" fg:x="16484" fg:w="9"/><text x="100.1954%" y="591.50"></text></g></svg></svg>