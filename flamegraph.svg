<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="84"><g><title>[ld-linux-x86-64.so.2] (4 samples, 4.76%)</title><rect x="0.0000%" y="725" width="4.7619%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50">[ld-li..</text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 3.57%)</title><rect x="1.1905%" y="709" width="3.5714%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="1.4405%" y="719.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 1.19%)</title><rect x="3.5714%" y="693" width="1.1905%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="3.8214%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 1.19%)</title><rect x="3.5714%" y="677" width="1.1905%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="3.8214%" y="687.50"></text></g><g><title>[libc.so.6] (3 samples, 3.57%)</title><rect x="4.7619%" y="725" width="3.5714%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="3"/><text x="5.0119%" y="735.50">[lib..</text></g><g><title>[libc.so.6] (2 samples, 2.38%)</title><rect x="5.9524%" y="709" width="2.3810%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="6.2024%" y="719.50">[l..</text></g><g><title>[unknown] (3 samples, 3.57%)</title><rect x="8.3333%" y="725" width="3.5714%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="3"/><text x="8.5833%" y="735.50">[unk..</text></g><g><title>rpc-c016c51e17d (11 samples, 13.10%)</title><rect x="0.0000%" y="741" width="13.0952%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="11"/><text x="0.2500%" y="751.50">rpc-c016c51e17d</text></g><g><title>_start (1 samples, 1.19%)</title><rect x="11.9048%" y="725" width="1.1905%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="12.1548%" y="735.50"></text></g><g><title>__libc_start_main (1 samples, 1.19%)</title><rect x="11.9048%" y="709" width="1.1905%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="12.1548%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="11.9048%" y="693" width="1.1905%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="12.1548%" y="703.50"></text></g><g><title>std::rt::lang_start (1 samples, 1.19%)</title><rect x="11.9048%" y="677" width="1.1905%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="12.1548%" y="687.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 1.19%)</title><rect x="11.9048%" y="661" width="1.1905%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="12.1548%" y="671.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="11.9048%" y="645" width="1.1905%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="12.1548%" y="655.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="11.9048%" y="629" width="1.1905%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="12.1548%" y="639.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="11.9048%" y="613" width="1.1905%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="1"/><text x="12.1548%" y="623.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 1.19%)</title><rect x="11.9048%" y="597" width="1.1905%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="1"/><text x="12.1548%" y="607.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="11.9048%" y="581" width="1.1905%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="1"/><text x="12.1548%" y="591.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="11.9048%" y="565" width="1.1905%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="1"/><text x="12.1548%" y="575.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="11.9048%" y="549" width="1.1905%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="1"/><text x="12.1548%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 1.19%)</title><rect x="11.9048%" y="533" width="1.1905%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="1"/><text x="12.1548%" y="543.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 1.19%)</title><rect x="11.9048%" y="517" width="1.1905%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="12.1548%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="11.9048%" y="501" width="1.1905%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="12.1548%" y="511.50"></text></g><g><title>test::test_main_static (1 samples, 1.19%)</title><rect x="11.9048%" y="485" width="1.1905%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="12.1548%" y="495.50"></text></g><g><title>test::test_main (1 samples, 1.19%)</title><rect x="11.9048%" y="469" width="1.1905%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="12.1548%" y="479.50"></text></g><g><title>test::console::run_tests_console (1 samples, 1.19%)</title><rect x="11.9048%" y="453" width="1.1905%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="12.1548%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn test::formatters::OutputFormatter&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="437" width="1.1905%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="12.1548%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;test::formatters::pretty::PrettyFormatter&lt;std::io::stdio::Stdout&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="421" width="1.1905%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="12.1548%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;test::console::OutputLocation&lt;std::io::stdio::Stdout&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="405" width="1.1905%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="12.1548%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn test::term::Terminal+core::marker::Send&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="389" width="1.1905%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="12.1548%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="373" width="1.1905%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="12.1548%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;u8&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="357" width="1.1905%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="12.1548%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::vec::Vec&lt;u8&gt;)&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="341" width="1.1905%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="12.1548%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.19%)</title><rect x="11.9048%" y="325" width="1.1905%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="12.1548%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.19%)</title><rect x="11.9048%" y="309" width="1.1905%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="12.1548%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.19%)</title><rect x="11.9048%" y="293" width="1.1905%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="12.1548%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 1.19%)</title><rect x="11.9048%" y="277" width="1.1905%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="12.1548%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 1.19%)</title><rect x="11.9048%" y="261" width="1.1905%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="12.1548%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::vec::Vec&lt;u8&gt;)&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="245" width="1.1905%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="12.1548%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="229" width="1.1905%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="12.1548%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 1.19%)</title><rect x="11.9048%" y="213" width="1.1905%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="12.1548%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.19%)</title><rect x="11.9048%" y="197" width="1.1905%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="12.1548%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 1.19%)</title><rect x="11.9048%" y="181" width="1.1905%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="12.1548%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 1.19%)</title><rect x="11.9048%" y="165" width="1.1905%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="12.1548%" y="175.50"></text></g><g><title>cfree (1 samples, 1.19%)</title><rect x="11.9048%" y="149" width="1.1905%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="12.1548%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="11.9048%" y="133" width="1.1905%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="12.1548%" y="143.50"></text></g><g><title>[rpc-c016c51e17dc6c68] (1 samples, 1.19%)</title><rect x="13.0952%" y="709" width="1.1905%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="13.3452%" y="719.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 1.19%)</title><rect x="13.0952%" y="693" width="1.1905%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="1"/><text x="13.3452%" y="703.50"></text></g><g><title>[anon] (2 samples, 2.38%)</title><rect x="13.0952%" y="725" width="2.3810%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="2"/><text x="13.3452%" y="735.50">[a..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 1.19%)</title><rect x="14.2857%" y="709" width="1.1905%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="14.5357%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 1.19%)</title><rect x="19.0476%" y="629" width="1.1905%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="1"/><text x="19.2976%" y="639.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 1.19%)</title><rect x="19.0476%" y="613" width="1.1905%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="1"/><text x="19.2976%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="19.0476%" y="597" width="1.1905%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="1"/><text x="19.2976%" y="607.50"></text></g><g><title>tokio::runtime::builder::Builder::new_current_thread (1 samples, 1.19%)</title><rect x="20.2381%" y="325" width="1.1905%" height="15" fill="rgb(231,138,38)" fg:x="17" fg:w="1"/><text x="20.4881%" y="335.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 1.19%)</title><rect x="20.2381%" y="309" width="1.1905%" height="15" fill="rgb(231,145,46)" fg:x="17" fg:w="1"/><text x="20.4881%" y="319.50"></text></g><g><title>_ZN3std3sys6common12thread_local10fast_local12Key$LT$T$GT$14try_initialize17hb342075c4c8df6e1E.llvm.9536189733210133663 (1 samples, 1.19%)</title><rect x="20.2381%" y="293" width="1.1905%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="1"/><text x="20.4881%" y="303.50"></text></g><g><title>std::sys::unix::rand::hashmap_random_keys (1 samples, 1.19%)</title><rect x="20.2381%" y="277" width="1.1905%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="20.4881%" y="287.50"></text></g><g><title>std::sys::unix::rand::imp::fill_bytes (1 samples, 1.19%)</title><rect x="20.2381%" y="261" width="1.1905%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="20.4881%" y="271.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom_fill_bytes (1 samples, 1.19%)</title><rect x="20.2381%" y="245" width="1.1905%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="1"/><text x="20.4881%" y="255.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom (1 samples, 1.19%)</title><rect x="20.2381%" y="229" width="1.1905%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="1"/><text x="20.4881%" y="239.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom::getrandom (1 samples, 1.19%)</title><rect x="20.2381%" y="213" width="1.1905%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="1"/><text x="20.4881%" y="223.50"></text></g><g><title>getrandom (1 samples, 1.19%)</title><rect x="20.2381%" y="197" width="1.1905%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="1"/><text x="20.4881%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="20.2381%" y="181" width="1.1905%" height="15" fill="rgb(210,229,1)" fg:x="17" fg:w="1"/><text x="20.4881%" y="191.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (1 samples, 1.19%)</title><rect x="21.4286%" y="213" width="1.1905%" height="15" fill="rgb(222,148,37)" fg:x="18" fg:w="1"/><text x="21.6786%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="21.4286%" y="197" width="1.1905%" height="15" fill="rgb(234,67,33)" fg:x="18" fg:w="1"/><text x="21.6786%" y="207.50"></text></g><g><title>rpc::Behaviour::request (2 samples, 2.38%)</title><rect x="22.6190%" y="213" width="2.3810%" height="15" fill="rgb(247,98,35)" fg:x="19" fg:w="2"/><text x="22.8690%" y="223.50">rp..</text></g><g><title>rpc::Stream::write (2 samples, 2.38%)</title><rect x="22.6190%" y="197" width="2.3810%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="2"/><text x="22.8690%" y="207.50">rp..</text></g><g><title>component_utils::stream::PacketWriter::packet (2 samples, 2.38%)</title><rect x="22.6190%" y="181" width="2.3810%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="2"/><text x="22.8690%" y="191.50">co..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 1.19%)</title><rect x="23.8095%" y="165" width="1.1905%" height="15" fill="rgb(246,177,23)" fg:x="20" fg:w="1"/><text x="24.0595%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (4 samples, 4.76%)</title><rect x="21.4286%" y="261" width="4.7619%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="4"/><text x="21.6786%" y="271.50">tokio:..</text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (4 samples, 4.76%)</title><rect x="21.4286%" y="245" width="4.7619%" height="15" fill="rgb(216,154,8)" fg:x="18" fg:w="4"/><text x="21.6786%" y="255.50">_ZN3rp..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (4 samples, 4.76%)</title><rect x="21.4286%" y="229" width="4.7619%" height="15" fill="rgb(244,35,45)" fg:x="18" fg:w="4"/><text x="21.6786%" y="239.50">future..</text></g><g><title>rpc::Behaviour::respond (1 samples, 1.19%)</title><rect x="25.0000%" y="213" width="1.1905%" height="15" fill="rgb(251,115,12)" fg:x="21" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>rpc::Stream::write (1 samples, 1.19%)</title><rect x="25.0000%" y="197" width="1.1905%" height="15" fill="rgb(240,54,50)" fg:x="21" fg:w="1"/><text x="25.2500%" y="207.50"></text></g><g><title>component_utils::stream::PacketWriter::packet (1 samples, 1.19%)</title><rect x="25.0000%" y="181" width="1.1905%" height="15" fill="rgb(233,84,52)" fg:x="21" fg:w="1"/><text x="25.2500%" y="191.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 1.19%)</title><rect x="25.0000%" y="165" width="1.1905%" height="15" fill="rgb(207,117,47)" fg:x="21" fg:w="1"/><text x="25.2500%" y="175.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17ha9c1daf2f4df1448E.llvm.5514608431303175687 (1 samples, 1.19%)</title><rect x="26.1905%" y="229" width="1.1905%" height="15" fill="rgb(249,43,39)" fg:x="22" fg:w="1"/><text x="26.4405%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 1.19%)</title><rect x="26.1905%" y="213" width="1.1905%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="1"/><text x="26.4405%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 1.19%)</title><rect x="26.1905%" y="197" width="1.1905%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="1"/><text x="26.4405%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (2 samples, 2.38%)</title><rect x="26.1905%" y="261" width="2.3810%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="2"/><text x="26.4405%" y="271.50">to..</text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17h1199d9f3b022ea24E.llvm.5514608431303175687 (2 samples, 2.38%)</title><rect x="26.1905%" y="245" width="2.3810%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="2"/><text x="26.4405%" y="255.50">_Z..</text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 1.19%)</title><rect x="27.3810%" y="229" width="1.1905%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="1"/><text x="27.6310%" y="239.50"></text></g><g><title>clock_gettime (1 samples, 1.19%)</title><rect x="27.3810%" y="213" width="1.1905%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="1"/><text x="27.6310%" y="223.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 1.19%)</title><rect x="27.3810%" y="197" width="1.1905%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="1"/><text x="27.6310%" y="207.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="29.7619%" y="165" width="1.1905%" height="15" fill="rgb(235,213,38)" fg:x="25" fg:w="1"/><text x="30.0119%" y="175.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 1.19%)</title><rect x="29.7619%" y="149" width="1.1905%" height="15" fill="rgb(237,122,38)" fg:x="25" fg:w="1"/><text x="30.0119%" y="159.50"></text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (1 samples, 1.19%)</title><rect x="35.7143%" y="85" width="1.1905%" height="15" fill="rgb(244,218,35)" fg:x="30" fg:w="1"/><text x="35.9643%" y="95.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="35.7143%" y="69" width="1.1905%" height="15" fill="rgb(240,68,47)" fg:x="30" fg:w="1"/><text x="35.9643%" y="79.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17hab744a7cd195e690E.llvm.10030110265137562609 (1 samples, 1.19%)</title><rect x="35.7143%" y="53" width="1.1905%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="1"/><text x="35.9643%" y="63.50"></text></g><g><title>cfree (1 samples, 1.19%)</title><rect x="35.7143%" y="37" width="1.1905%" height="15" fill="rgb(235,124,12)" fg:x="30" fg:w="1"/><text x="35.9643%" y="47.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 4.76%)</title><rect x="33.3333%" y="117" width="4.7619%" height="15" fill="rgb(224,169,11)" fg:x="28" fg:w="4"/><text x="33.5833%" y="127.50">&lt;futur..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 4.76%)</title><rect x="33.3333%" y="101" width="4.7619%" height="15" fill="rgb(250,166,2)" fg:x="28" fg:w="4"/><text x="33.5833%" y="111.50">&lt;futur..</text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 1.19%)</title><rect x="36.9048%" y="85" width="1.1905%" height="15" fill="rgb(242,216,29)" fg:x="31" fg:w="1"/><text x="37.1548%" y="95.50"></text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_flush (2 samples, 2.38%)</title><rect x="38.0952%" y="117" width="2.3810%" height="15" fill="rgb(230,116,27)" fg:x="32" fg:w="2"/><text x="38.3452%" y="127.50">&lt;l..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::encoder::Encoder&gt;::encode (2 samples, 2.38%)</title><rect x="38.0952%" y="101" width="2.3810%" height="15" fill="rgb(228,99,48)" fg:x="32" fg:w="2"/><text x="38.3452%" y="111.50">&lt;l..</text></g><g><title>snow::transportstate::TransportState::write_message (2 samples, 2.38%)</title><rect x="38.0952%" y="85" width="2.3810%" height="15" fill="rgb(253,11,6)" fg:x="32" fg:w="2"/><text x="38.3452%" y="95.50">sn..</text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::encrypt (2 samples, 2.38%)</title><rect x="38.0952%" y="69" width="2.3810%" height="15" fill="rgb(247,143,39)" fg:x="32" fg:w="2"/><text x="38.3452%" y="79.50">&lt;s..</text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_seal (2 samples, 2.38%)</title><rect x="38.0952%" y="53" width="2.3810%" height="15" fill="rgb(236,97,10)" fg:x="32" fg:w="2"/><text x="38.3452%" y="63.50">ri..</text></g><g><title>chacha20_poly1305_seal_avx2 (2 samples, 2.38%)</title><rect x="38.0952%" y="37" width="2.3810%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="2"/><text x="38.3452%" y="47.50">ch..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 2.38%)</title><rect x="40.4762%" y="117" width="2.3810%" height="15" fill="rgb(216,164,2)" fg:x="34" fg:w="2"/><text x="40.7262%" y="127.50">&lt;y..</text></g><g><title>__libc_calloc (1 samples, 1.19%)</title><rect x="41.6667%" y="101" width="1.1905%" height="15" fill="rgb(220,129,5)" fg:x="35" fg:w="1"/><text x="41.9167%" y="111.50"></text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_sink::Sink&lt;yamux::frame::Frame&lt;()&gt;&gt;&gt;::poll_ready (1 samples, 1.19%)</title><rect x="42.8571%" y="117" width="1.1905%" height="15" fill="rgb(242,17,10)" fg:x="36" fg:w="1"/><text x="43.1071%" y="127.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (12 samples, 14.29%)</title><rect x="30.9524%" y="165" width="14.2857%" height="15" fill="rgb(242,107,0)" fg:x="26" fg:w="12"/><text x="31.2024%" y="175.50">&lt;libp2p_core::muxing::..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (12 samples, 14.29%)</title><rect x="30.9524%" y="149" width="14.2857%" height="15" fill="rgb(251,28,31)" fg:x="26" fg:w="12"/><text x="31.2024%" y="159.50">&lt;libp2p_yamux::Muxer&lt;C..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (12 samples, 14.29%)</title><rect x="30.9524%" y="133" width="14.2857%" height="15" fill="rgb(233,223,10)" fg:x="26" fg:w="12"/><text x="31.2024%" y="143.50">yamux::connection::Con..</text></g><g><title>yamux::chunks::Chunks::push (1 samples, 1.19%)</title><rect x="44.0476%" y="117" width="1.1905%" height="15" fill="rgb(215,21,27)" fg:x="37" fg:w="1"/><text x="44.2976%" y="127.50"></text></g><g><title>&lt;libp2p_swarm::handler::select::ConnectionHandlerSelect&lt;TProto1,TProto2&gt; as libp2p_swarm::handler::ConnectionHandler&gt;::poll (1 samples, 1.19%)</title><rect x="45.2381%" y="165" width="1.1905%" height="15" fill="rgb(232,23,21)" fg:x="38" fg:w="1"/><text x="45.4881%" y="175.50"></text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::poll (1 samples, 1.19%)</title><rect x="45.2381%" y="149" width="1.1905%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="1"/><text x="45.4881%" y="159.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="45.2381%" y="133" width="1.1905%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="1"/><text x="45.4881%" y="143.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="45.2381%" y="117" width="1.1905%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="1"/><text x="45.4881%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.19%)</title><rect x="46.4286%" y="117" width="1.1905%" height="15" fill="rgb(212,68,19)" fg:x="39" fg:w="1"/><text x="46.6786%" y="127.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17ha40de531eade8bd0E.llvm.10303680963570972473 (1 samples, 1.19%)</title><rect x="46.4286%" y="101" width="1.1905%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="1"/><text x="46.6786%" y="111.50"></text></g><g><title>malloc (1 samples, 1.19%)</title><rect x="46.4286%" y="85" width="1.1905%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="1"/><text x="46.6786%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.38%)</title><rect x="46.4286%" y="149" width="2.3810%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="2"/><text x="46.6786%" y="159.50">&lt;c..</text></g><g><title>_ZN4core4iter8adapters10filter_map15filter_map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h9baa4b27e9257077E.llvm.12356678812529253373 (2 samples, 2.38%)</title><rect x="46.4286%" y="133" width="2.3810%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="2"/><text x="46.6786%" y="143.50">_Z..</text></g><g><title>libp2p_swarm::stream_protocol::StreamProtocol::try_from_owned (1 samples, 1.19%)</title><rect x="47.6190%" y="117" width="1.1905%" height="15" fill="rgb(247,173,49)" fg:x="40" fg:w="1"/><text x="47.8690%" y="127.50"></text></g><g><title>cfree (1 samples, 1.19%)</title><rect x="47.6190%" y="101" width="1.1905%" height="15" fill="rgb(224,114,35)" fg:x="40" fg:w="1"/><text x="47.8690%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="47.6190%" y="85" width="1.1905%" height="15" fill="rgb(245,159,27)" fg:x="40" fg:w="1"/><text x="47.8690%" y="95.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (18 samples, 21.43%)</title><rect x="28.5714%" y="181" width="21.4286%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="18"/><text x="28.8214%" y="191.50">futures_util::future::future::Futu..</text></g><g><title>libp2p_swarm::connection::gather_supported_protocols (3 samples, 3.57%)</title><rect x="46.4286%" y="165" width="3.5714%" height="15" fill="rgb(236,23,11)" fg:x="39" fg:w="3"/><text x="46.6786%" y="175.50">libp..</text></g><g><title>&lt;libp2p_kad::handler::Handler as libp2p_swarm::handler::ConnectionHandler&gt;::listen_protocol (1 samples, 1.19%)</title><rect x="48.8095%" y="149" width="1.1905%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="1"/><text x="49.0595%" y="159.50"></text></g><g><title>[libc.so.6] (30 samples, 35.71%)</title><rect x="15.4762%" y="725" width="35.7143%" height="15" fill="rgb(237,72,25)" fg:x="13" fg:w="30"/><text x="15.7262%" y="735.50">[libc.so.6]</text></g><g><title>[libc.so.6] (29 samples, 34.52%)</title><rect x="16.6667%" y="709" width="34.5238%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="29"/><text x="16.9167%" y="719.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (27 samples, 32.14%)</title><rect x="19.0476%" y="693" width="32.1429%" height="15" fill="rgb(217,125,39)" fg:x="16" fg:w="27"/><text x="19.2976%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (27 samples, 32.14%)</title><rect x="19.0476%" y="677" width="32.1429%" height="15" fill="rgb(235,36,10)" fg:x="16" fg:w="27"/><text x="19.2976%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (27 samples, 32.14%)</title><rect x="19.0476%" y="661" width="32.1429%" height="15" fill="rgb(251,123,47)" fg:x="16" fg:w="27"/><text x="19.2976%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (27 samples, 32.14%)</title><rect x="19.0476%" y="645" width="32.1429%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="27"/><text x="19.2976%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (26 samples, 30.95%)</title><rect x="20.2381%" y="629" width="30.9524%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="26"/><text x="20.4881%" y="639.50">std::thread::Builder::spawn_unchecked_::_{{closure..</text></g><g><title>std::panic::catch_unwind (26 samples, 30.95%)</title><rect x="20.2381%" y="613" width="30.9524%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="26"/><text x="20.4881%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26 samples, 30.95%)</title><rect x="20.2381%" y="597" width="30.9524%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="26"/><text x="20.4881%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26 samples, 30.95%)</title><rect x="20.2381%" y="581" width="30.9524%" height="15" fill="rgb(242,14,37)" fg:x="17" fg:w="26"/><text x="20.4881%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 30.95%)</title><rect x="20.2381%" y="565" width="30.9524%" height="15" fill="rgb(246,228,12)" fg:x="17" fg:w="26"/><text x="20.4881%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as ..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (26 samples, 30.95%)</title><rect x="20.2381%" y="549" width="30.9524%" height="15" fill="rgb(213,55,15)" fg:x="17" fg:w="26"/><text x="20.4881%" y="559.50">std::thread::Builder::spawn_unchecked_::_{{closure..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26 samples, 30.95%)</title><rect x="20.2381%" y="533" width="30.9524%" height="15" fill="rgb(209,9,3)" fg:x="17" fg:w="26"/><text x="20.4881%" y="543.50">std::sys_common::backtrace::__rust_begin_short_bac..</text></g><g><title>test::run_test::_{{closure}} (26 samples, 30.95%)</title><rect x="20.2381%" y="517" width="30.9524%" height="15" fill="rgb(230,59,30)" fg:x="17" fg:w="26"/><text x="20.4881%" y="527.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (26 samples, 30.95%)</title><rect x="20.2381%" y="501" width="30.9524%" height="15" fill="rgb(209,121,21)" fg:x="17" fg:w="26"/><text x="20.4881%" y="511.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (26 samples, 30.95%)</title><rect x="20.2381%" y="485" width="30.9524%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="26"/><text x="20.4881%" y="495.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (26 samples, 30.95%)</title><rect x="20.2381%" y="469" width="30.9524%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="26"/><text x="20.4881%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26 samples, 30.95%)</title><rect x="20.2381%" y="453" width="30.9524%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="26"/><text x="20.4881%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (26 samples, 30.95%)</title><rect x="20.2381%" y="437" width="30.9524%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="26"/><text x="20.4881%" y="447.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 30.95%)</title><rect x="20.2381%" y="421" width="30.9524%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="26"/><text x="20.4881%" y="431.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as ..</text></g><g><title>test::run_test_in_process::_{{closure}} (26 samples, 30.95%)</title><rect x="20.2381%" y="405" width="30.9524%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="26"/><text x="20.4881%" y="415.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (26 samples, 30.95%)</title><rect x="20.2381%" y="389" width="30.9524%" height="15" fill="rgb(205,185,37)" fg:x="17" fg:w="26"/><text x="20.4881%" y="399.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (26 samples, 30.95%)</title><rect x="20.2381%" y="373" width="30.9524%" height="15" fill="rgb(238,207,15)" fg:x="17" fg:w="26"/><text x="20.4881%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (26 samples, 30.95%)</title><rect x="20.2381%" y="357" width="30.9524%" height="15" fill="rgb(213,199,42)" fg:x="17" fg:w="26"/><text x="20.4881%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>rpc::test::test_random_rpc_calls (26 samples, 30.95%)</title><rect x="20.2381%" y="341" width="30.9524%" height="15" fill="rgb(235,201,11)" fg:x="17" fg:w="26"/><text x="20.4881%" y="351.50">rpc::test::test_random_rpc_calls</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (25 samples, 29.76%)</title><rect x="21.4286%" y="325" width="29.7619%" height="15" fill="rgb(207,46,11)" fg:x="18" fg:w="25"/><text x="21.6786%" y="335.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (25 samples, 29.76%)</title><rect x="21.4286%" y="309" width="29.7619%" height="15" fill="rgb(241,35,35)" fg:x="18" fg:w="25"/><text x="21.6786%" y="319.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (25 samples, 29.76%)</title><rect x="21.4286%" y="293" width="29.7619%" height="15" fill="rgb(243,32,47)" fg:x="18" fg:w="25"/><text x="21.6786%" y="303.50">tokio::runtime::scheduler::current_thread::CoreG..</text></g><g><title>tokio::runtime::context::set_scheduler (25 samples, 29.76%)</title><rect x="21.4286%" y="277" width="29.7619%" height="15" fill="rgb(247,202,23)" fg:x="18" fg:w="25"/><text x="21.6786%" y="287.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task (19 samples, 22.62%)</title><rect x="28.5714%" y="261" width="22.6190%" height="15" fill="rgb(219,102,11)" fg:x="24" fg:w="19"/><text x="28.8214%" y="271.50">tokio::runtime::scheduler::current_t..</text></g><g><title>tokio::runtime::task::raw::poll (19 samples, 22.62%)</title><rect x="28.5714%" y="245" width="22.6190%" height="15" fill="rgb(243,110,44)" fg:x="24" fg:w="19"/><text x="28.8214%" y="255.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 22.62%)</title><rect x="28.5714%" y="229" width="22.6190%" height="15" fill="rgb(222,74,54)" fg:x="24" fg:w="19"/><text x="28.8214%" y="239.50">tokio::runtime::task::core::Core&lt;T,S..</text></g><g><title>_ZN91_$LT$tracing..instrument..Instrumented$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$4poll17h90a30e26b36b2356E.llvm.10030110265137562609 (19 samples, 22.62%)</title><rect x="28.5714%" y="213" width="22.6190%" height="15" fill="rgb(216,99,12)" fg:x="24" fg:w="19"/><text x="28.8214%" y="223.50">_ZN91_$LT$tracing..instrument..Instr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (19 samples, 22.62%)</title><rect x="28.5714%" y="197" width="22.6190%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="19"/><text x="28.8214%" y="207.50">&lt;futures_util::future::select::Selec..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 1.19%)</title><rect x="50.0000%" y="181" width="1.1905%" height="15" fill="rgb(217,163,10)" fg:x="42" fg:w="1"/><text x="50.2500%" y="191.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17hc4c68a53e2772edbE.llvm.10030110265137562609 (1 samples, 1.19%)</title><rect x="50.0000%" y="165" width="1.1905%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="1"/><text x="50.2500%" y="175.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as core::iter::traits::collect::FromIterator&lt;Fut&gt;&gt;::from_iter (1 samples, 1.19%)</title><rect x="52.3810%" y="709" width="1.1905%" height="15" fill="rgb(252,105,26)" fg:x="44" fg:w="1"/><text x="52.6310%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.19%)</title><rect x="52.3810%" y="693" width="1.1905%" height="15" fill="rgb(220,39,43)" fg:x="44" fg:w="1"/><text x="52.6310%" y="703.50"></text></g><g><title>libp2p_noise::Config::new (1 samples, 1.19%)</title><rect x="52.3810%" y="677" width="1.1905%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="1"/><text x="52.6310%" y="687.50"></text></g><g><title>libp2p_noise::protocol::Keypair::new (1 samples, 1.19%)</title><rect x="52.3810%" y="661" width="1.1905%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="1"/><text x="52.6310%" y="671.50"></text></g><g><title>x25519_dalek::x25519::x25519 (1 samples, 1.19%)</title><rect x="52.3810%" y="645" width="1.1905%" height="15" fill="rgb(223,20,43)" fg:x="44" fg:w="1"/><text x="52.6310%" y="655.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (1 samples, 1.19%)</title><rect x="52.3810%" y="629" width="1.1905%" height="15" fill="rgb(229,81,49)" fg:x="44" fg:w="1"/><text x="52.6310%" y="639.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="52.3810%" y="613" width="1.1905%" height="15" fill="rgb(236,28,36)" fg:x="44" fg:w="1"/><text x="52.6310%" y="623.50"></text></g><g><title>subtle::black_box (1 samples, 1.19%)</title><rect x="52.3810%" y="597" width="1.1905%" height="15" fill="rgb(249,185,26)" fg:x="44" fg:w="1"/><text x="52.6310%" y="607.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="53.5714%" y="709" width="1.1905%" height="15" fill="rgb(249,174,33)" fg:x="45" fg:w="1"/><text x="53.8214%" y="719.50"></text></g><g><title>&lt;libp2p_core::transport::and_then::AndThenFuture&lt;TFut,TMap,TMapOut&gt; as core::future::future::Future&gt;::poll (1 samples, 1.19%)</title><rect x="54.7619%" y="709" width="1.1905%" height="15" fill="rgb(233,201,37)" fg:x="46" fg:w="1"/><text x="55.0119%" y="719.50"></text></g><g><title>&lt;libp2p_core::upgrade::apply::OutboundUpgradeApply&lt;C,U&gt; as core::future::future::Future&gt;::poll (1 samples, 1.19%)</title><rect x="54.7619%" y="693" width="1.1905%" height="15" fill="rgb(221,78,26)" fg:x="46" fg:w="1"/><text x="55.0119%" y="703.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::OutboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_outbound::_{{closure}} (1 samples, 1.19%)</title><rect x="54.7619%" y="677" width="1.1905%" height="15" fill="rgb(250,127,30)" fg:x="46" fg:w="1"/><text x="55.0119%" y="687.50"></text></g><g><title>snow::builder::Builder::build_initiator (1 samples, 1.19%)</title><rect x="54.7619%" y="661" width="1.1905%" height="15" fill="rgb(230,49,44)" fg:x="46" fg:w="1"/><text x="55.0119%" y="671.50"></text></g><g><title>snow::builder::Builder::build (1 samples, 1.19%)</title><rect x="54.7619%" y="645" width="1.1905%" height="15" fill="rgb(229,67,23)" fg:x="46" fg:w="1"/><text x="55.0119%" y="655.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::set (1 samples, 1.19%)</title><rect x="54.7619%" y="629" width="1.1905%" height="15" fill="rgb(249,83,47)" fg:x="46" fg:w="1"/><text x="55.0119%" y="639.50"></text></g><g><title>x25519_dalek::x25519::x25519 (1 samples, 1.19%)</title><rect x="54.7619%" y="613" width="1.1905%" height="15" fill="rgb(215,43,3)" fg:x="46" fg:w="1"/><text x="55.0119%" y="623.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (1 samples, 1.19%)</title><rect x="54.7619%" y="597" width="1.1905%" height="15" fill="rgb(238,154,13)" fg:x="46" fg:w="1"/><text x="55.0119%" y="607.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="54.7619%" y="581" width="1.1905%" height="15" fill="rgb(219,56,2)" fg:x="46" fg:w="1"/><text x="55.0119%" y="591.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (1 samples, 1.19%)</title><rect x="54.7619%" y="565" width="1.1905%" height="15" fill="rgb(233,0,4)" fg:x="46" fg:w="1"/><text x="55.0119%" y="575.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="54.7619%" y="549" width="1.1905%" height="15" fill="rgb(235,30,7)" fg:x="46" fg:w="1"/><text x="55.0119%" y="559.50"></text></g><g><title>&lt;libp2p_kad::behaviour::Behaviour&lt;TStore&gt; as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (1 samples, 1.19%)</title><rect x="55.9524%" y="709" width="1.1905%" height="15" fill="rgb(250,79,13)" fg:x="47" fg:w="1"/><text x="56.2024%" y="719.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::InboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_inbound::_{{closure}} (1 samples, 1.19%)</title><rect x="57.1429%" y="709" width="1.1905%" height="15" fill="rgb(211,146,34)" fg:x="48" fg:w="1"/><text x="57.3929%" y="719.50"></text></g><g><title>libp2p_noise::io::handshake::recv_identity::_{{closure}} (1 samples, 1.19%)</title><rect x="57.1429%" y="693" width="1.1905%" height="15" fill="rgb(228,22,38)" fg:x="48" fg:w="1"/><text x="57.3929%" y="703.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="57.1429%" y="677" width="1.1905%" height="15" fill="rgb(235,168,5)" fg:x="48" fg:w="1"/><text x="57.3929%" y="687.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (1 samples, 1.19%)</title><rect x="57.1429%" y="661" width="1.1905%" height="15" fill="rgb(221,155,16)" fg:x="48" fg:w="1"/><text x="57.3929%" y="671.50"></text></g><g><title>snow::handshakestate::HandshakeState::read_message (1 samples, 1.19%)</title><rect x="57.1429%" y="645" width="1.1905%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="1"/><text x="57.3929%" y="655.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (1 samples, 1.19%)</title><rect x="57.1429%" y="629" width="1.1905%" height="15" fill="rgb(223,4,10)" fg:x="48" fg:w="1"/><text x="57.3929%" y="639.50"></text></g><g><title>x25519_dalek::x25519::x25519 (1 samples, 1.19%)</title><rect x="57.1429%" y="613" width="1.1905%" height="15" fill="rgb(234,103,6)" fg:x="48" fg:w="1"/><text x="57.3929%" y="623.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (1 samples, 1.19%)</title><rect x="57.1429%" y="597" width="1.1905%" height="15" fill="rgb(227,97,0)" fg:x="48" fg:w="1"/><text x="57.3929%" y="607.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="57.1429%" y="581" width="1.1905%" height="15" fill="rgb(234,150,53)" fg:x="48" fg:w="1"/><text x="57.3929%" y="591.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (1 samples, 1.19%)</title><rect x="57.1429%" y="565" width="1.1905%" height="15" fill="rgb(228,201,54)" fg:x="48" fg:w="1"/><text x="57.3929%" y="575.50"></text></g><g><title>curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 1.19%)</title><rect x="57.1429%" y="549" width="1.1905%" height="15" fill="rgb(222,22,37)" fg:x="48" fg:w="1"/><text x="57.3929%" y="559.50"></text></g><g><title>&lt;libp2p_noise::Config as libp2p_core::upgrade::OutboundConnectionUpgrade&lt;T&gt;&gt;::upgrade_outbound::_{{closure}} (1 samples, 1.19%)</title><rect x="58.3333%" y="709" width="1.1905%" height="15" fill="rgb(237,53,32)" fg:x="49" fg:w="1"/><text x="58.5833%" y="719.50"></text></g><g><title>libp2p_noise::io::handshake::recv_identity::_{{closure}} (1 samples, 1.19%)</title><rect x="58.3333%" y="693" width="1.1905%" height="15" fill="rgb(233,25,53)" fg:x="49" fg:w="1"/><text x="58.5833%" y="703.50"></text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="58.3333%" y="677" width="1.1905%" height="15" fill="rgb(210,40,34)" fg:x="49" fg:w="1"/><text x="58.5833%" y="687.50"></text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::handshakestate::HandshakeState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (1 samples, 1.19%)</title><rect x="58.3333%" y="661" width="1.1905%" height="15" fill="rgb(241,220,44)" fg:x="49" fg:w="1"/><text x="58.5833%" y="671.50"></text></g><g><title>snow::handshakestate::HandshakeState::read_message (1 samples, 1.19%)</title><rect x="58.3333%" y="645" width="1.1905%" height="15" fill="rgb(235,28,35)" fg:x="49" fg:w="1"/><text x="58.5833%" y="655.50"></text></g><g><title>&lt;libp2p_noise::protocol::Keypair as snow::types::Dh&gt;::dh (1 samples, 1.19%)</title><rect x="58.3333%" y="629" width="1.1905%" height="15" fill="rgb(210,56,17)" fg:x="49" fg:w="1"/><text x="58.5833%" y="639.50"></text></g><g><title>x25519_dalek::x25519::x25519 (1 samples, 1.19%)</title><rect x="58.3333%" y="613" width="1.1905%" height="15" fill="rgb(224,130,29)" fg:x="49" fg:w="1"/><text x="58.5833%" y="623.50"></text></g><g><title>curve25519_dalek::montgomery::MontgomeryPoint::mul_clamped (1 samples, 1.19%)</title><rect x="58.3333%" y="597" width="1.1905%" height="15" fill="rgb(235,212,8)" fg:x="49" fg:w="1"/><text x="58.5833%" y="607.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="58.3333%" y="581" width="1.1905%" height="15" fill="rgb(223,33,50)" fg:x="49" fg:w="1"/><text x="58.5833%" y="591.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (1 samples, 1.19%)</title><rect x="58.3333%" y="565" width="1.1905%" height="15" fill="rgb(219,149,13)" fg:x="49" fg:w="1"/><text x="58.5833%" y="575.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 1.19%)</title><rect x="58.3333%" y="549" width="1.1905%" height="15" fill="rgb(250,156,29)" fg:x="49" fg:w="1"/><text x="58.5833%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="59.5238%" y="709" width="1.1905%" height="15" fill="rgb(216,193,19)" fg:x="50" fg:w="1"/><text x="59.7738%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 1.19%)</title><rect x="59.5238%" y="693" width="1.1905%" height="15" fill="rgb(216,135,14)" fg:x="50" fg:w="1"/><text x="59.7738%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="677" width="1.1905%" height="15" fill="rgb(241,47,5)" fg:x="50" fg:w="1"/><text x="59.7738%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="661" width="1.1905%" height="15" fill="rgb(233,42,35)" fg:x="50" fg:w="1"/><text x="59.7738%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.19%)</title><rect x="59.5238%" y="645" width="1.1905%" height="15" fill="rgb(231,13,6)" fg:x="50" fg:w="1"/><text x="59.7738%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1 samples, 1.19%)</title><rect x="59.5238%" y="629" width="1.1905%" height="15" fill="rgb(207,181,40)" fg:x="50" fg:w="1"/><text x="59.7738%" y="639.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="59.5238%" y="613" width="1.1905%" height="15" fill="rgb(254,173,49)" fg:x="50" fg:w="1"/><text x="59.7738%" y="623.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="59.5238%" y="597" width="1.1905%" height="15" fill="rgb(221,1,38)" fg:x="50" fg:w="1"/><text x="59.7738%" y="607.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="59.5238%" y="581" width="1.1905%" height="15" fill="rgb(206,124,46)" fg:x="50" fg:w="1"/><text x="59.7738%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="565" width="1.1905%" height="15" fill="rgb(249,21,11)" fg:x="50" fg:w="1"/><text x="59.7738%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1 samples, 1.19%)</title><rect x="59.5238%" y="549" width="1.1905%" height="15" fill="rgb(222,201,40)" fg:x="50" fg:w="1"/><text x="59.7738%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="59.5238%" y="533" width="1.1905%" height="15" fill="rgb(235,61,29)" fg:x="50" fg:w="1"/><text x="59.7738%" y="543.50"></text></g><g><title>test::run_test::_{{closure}} (1 samples, 1.19%)</title><rect x="59.5238%" y="517" width="1.1905%" height="15" fill="rgb(219,207,3)" fg:x="50" fg:w="1"/><text x="59.7738%" y="527.50"></text></g><g><title>test::run_test::_{{closure}} (1 samples, 1.19%)</title><rect x="59.5238%" y="501" width="1.1905%" height="15" fill="rgb(222,56,46)" fg:x="50" fg:w="1"/><text x="59.7738%" y="511.50"></text></g><g><title>test::run_test_in_process (1 samples, 1.19%)</title><rect x="59.5238%" y="485" width="1.1905%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="1"/><text x="59.7738%" y="495.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="59.5238%" y="469" width="1.1905%" height="15" fill="rgb(231,124,27)" fg:x="50" fg:w="1"/><text x="59.7738%" y="479.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="59.5238%" y="453" width="1.1905%" height="15" fill="rgb(249,195,6)" fg:x="50" fg:w="1"/><text x="59.7738%" y="463.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="59.5238%" y="437" width="1.1905%" height="15" fill="rgb(237,174,47)" fg:x="50" fg:w="1"/><text x="59.7738%" y="447.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="421" width="1.1905%" height="15" fill="rgb(206,201,31)" fg:x="50" fg:w="1"/><text x="59.7738%" y="431.50"></text></g><g><title>test::run_test_in_process::_{{closure}} (1 samples, 1.19%)</title><rect x="59.5238%" y="405" width="1.1905%" height="15" fill="rgb(231,57,52)" fg:x="50" fg:w="1"/><text x="59.7738%" y="415.50"></text></g><g><title>test::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="59.5238%" y="389" width="1.1905%" height="15" fill="rgb(248,177,22)" fg:x="50" fg:w="1"/><text x="59.7738%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="373" width="1.1905%" height="15" fill="rgb(215,211,37)" fg:x="50" fg:w="1"/><text x="59.7738%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="59.5238%" y="357" width="1.1905%" height="15" fill="rgb(241,128,51)" fg:x="50" fg:w="1"/><text x="59.7738%" y="367.50"></text></g><g><title>rpc::test::test_random_rpc_calls (1 samples, 1.19%)</title><rect x="59.5238%" y="341" width="1.1905%" height="15" fill="rgb(227,165,31)" fg:x="50" fg:w="1"/><text x="59.7738%" y="351.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 1.19%)</title><rect x="59.5238%" y="325" width="1.1905%" height="15" fill="rgb(228,167,24)" fg:x="50" fg:w="1"/><text x="59.7738%" y="335.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.19%)</title><rect x="59.5238%" y="309" width="1.1905%" height="15" fill="rgb(228,143,12)" fg:x="50" fg:w="1"/><text x="59.7738%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (1 samples, 1.19%)</title><rect x="59.5238%" y="293" width="1.1905%" height="15" fill="rgb(249,149,8)" fg:x="50" fg:w="1"/><text x="59.7738%" y="303.50"></text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 1.19%)</title><rect x="59.5238%" y="277" width="1.1905%" height="15" fill="rgb(243,35,44)" fg:x="50" fg:w="1"/><text x="59.7738%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 1.19%)</title><rect x="59.5238%" y="261" width="1.1905%" height="15" fill="rgb(246,89,9)" fg:x="50" fg:w="1"/><text x="59.7738%" y="271.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (1 samples, 1.19%)</title><rect x="59.5238%" y="245" width="1.1905%" height="15" fill="rgb(233,213,13)" fg:x="50" fg:w="1"/><text x="59.7738%" y="255.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 1.19%)</title><rect x="59.5238%" y="229" width="1.1905%" height="15" fill="rgb(233,141,41)" fg:x="50" fg:w="1"/><text x="59.7738%" y="239.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (1 samples, 1.19%)</title><rect x="59.5238%" y="213" width="1.1905%" height="15" fill="rgb(239,167,4)" fg:x="50" fg:w="1"/><text x="59.7738%" y="223.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h53647953b95789fdE.llvm.5338016803958221381 (1 samples, 1.19%)</title><rect x="59.5238%" y="197" width="1.1905%" height="15" fill="rgb(209,217,16)" fg:x="50" fg:w="1"/><text x="59.7738%" y="207.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 1.19%)</title><rect x="59.5238%" y="181" width="1.1905%" height="15" fill="rgb(219,88,35)" fg:x="50" fg:w="1"/><text x="59.7738%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="60.7143%" y="565" width="1.1905%" height="15" fill="rgb(220,193,23)" fg:x="51" fg:w="1"/><text x="60.9643%" y="575.50"></text></g><g><title>component_utils::stream::PacketReader::poll_packet (1 samples, 1.19%)</title><rect x="63.0952%" y="549" width="1.1905%" height="15" fill="rgb(230,90,52)" fg:x="53" fg:w="1"/><text x="63.3452%" y="559.50"></text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="63.0952%" y="533" width="1.1905%" height="15" fill="rgb(252,106,19)" fg:x="53" fg:w="1"/><text x="63.3452%" y="543.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="63.0952%" y="517" width="1.1905%" height="15" fill="rgb(206,74,20)" fg:x="53" fg:w="1"/><text x="63.3452%" y="527.50"></text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="63.0952%" y="501" width="1.1905%" height="15" fill="rgb(230,138,44)" fg:x="53" fg:w="1"/><text x="63.3452%" y="511.50"></text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="63.0952%" y="485" width="1.1905%" height="15" fill="rgb(235,182,43)" fg:x="53" fg:w="1"/><text x="63.3452%" y="495.50"></text></g><g><title>yamux::connection::stream::Stream::send_window_update (1 samples, 1.19%)</title><rect x="63.0952%" y="469" width="1.1905%" height="15" fill="rgb(242,16,51)" fg:x="53" fg:w="1"/><text x="63.3452%" y="479.50"></text></g><g><title>__rust_alloc (1 samples, 1.19%)</title><rect x="69.0476%" y="469" width="1.1905%" height="15" fill="rgb(248,9,4)" fg:x="58" fg:w="1"/><text x="69.2976%" y="479.50"></text></g><g><title>component_utils::stream::PacketWriter::poll (6 samples, 7.14%)</title><rect x="64.2857%" y="549" width="7.1429%" height="15" fill="rgb(210,31,22)" fg:x="54" fg:w="6"/><text x="64.5357%" y="559.50">component_..</text></g><g><title>&lt;libp2p_swarm::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (6 samples, 7.14%)</title><rect x="64.2857%" y="533" width="7.1429%" height="15" fill="rgb(239,54,39)" fg:x="54" fg:w="6"/><text x="64.5357%" y="543.50">&lt;libp2p_sw..</text></g><g><title>&lt;libp2p_core::muxing::boxed::SubstreamBox as futures_io::if_std::AsyncWrite&gt;::poll_write (6 samples, 7.14%)</title><rect x="64.2857%" y="517" width="7.1429%" height="15" fill="rgb(230,99,41)" fg:x="54" fg:w="6"/><text x="64.5357%" y="527.50">&lt;libp2p_co..</text></g><g><title>&lt;libp2p_yamux::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (6 samples, 7.14%)</title><rect x="64.2857%" y="501" width="7.1429%" height="15" fill="rgb(253,106,12)" fg:x="54" fg:w="6"/><text x="64.5357%" y="511.50">&lt;libp2p_ya..</text></g><g><title>&lt;yamux::connection::stream::Stream as futures_io::if_std::AsyncWrite&gt;::poll_write (6 samples, 7.14%)</title><rect x="64.2857%" y="485" width="7.1429%" height="15" fill="rgb(213,46,41)" fg:x="54" fg:w="6"/><text x="64.5357%" y="495.50">&lt;yamux::co..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (1 samples, 1.19%)</title><rect x="70.2381%" y="469" width="1.1905%" height="15" fill="rgb(215,133,35)" fg:x="59" fg:w="1"/><text x="70.4881%" y="479.50"></text></g><g><title>futures_task::waker::wake_arc_raw (1 samples, 1.19%)</title><rect x="70.2381%" y="453" width="1.1905%" height="15" fill="rgb(213,28,5)" fg:x="59" fg:w="1"/><text x="70.4881%" y="463.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (1 samples, 1.19%)</title><rect x="70.2381%" y="437" width="1.1905%" height="15" fill="rgb(215,77,49)" fg:x="59" fg:w="1"/><text x="70.4881%" y="447.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 1.19%)</title><rect x="70.2381%" y="421" width="1.1905%" height="15" fill="rgb(248,100,22)" fg:x="59" fg:w="1"/><text x="70.4881%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 1.19%)</title><rect x="70.2381%" y="405" width="1.1905%" height="15" fill="rgb(208,67,9)" fg:x="59" fg:w="1"/><text x="70.4881%" y="415.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (10 samples, 11.90%)</title><rect x="60.7143%" y="597" width="11.9048%" height="15" fill="rgb(219,133,21)" fg:x="51" fg:w="10"/><text x="60.9643%" y="607.50">&lt;futures_util::str..</text></g><g><title>&lt;futures_util::stream::stream::into_future::StreamFuture&lt;St&gt; as core::future::future::Future&gt;::poll (10 samples, 11.90%)</title><rect x="60.7143%" y="581" width="11.9048%" height="15" fill="rgb(246,46,29)" fg:x="51" fg:w="10"/><text x="60.9643%" y="591.50">&lt;futures_util::str..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (9 samples, 10.71%)</title><rect x="61.9048%" y="565" width="10.7143%" height="15" fill="rgb(246,185,52)" fg:x="52" fg:w="9"/><text x="62.1548%" y="575.50">futures_util::st..</text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 1.19%)</title><rect x="71.4286%" y="549" width="1.1905%" height="15" fill="rgb(252,136,11)" fg:x="60" fg:w="1"/><text x="71.6786%" y="559.50"></text></g><g><title>clock_gettime (1 samples, 1.19%)</title><rect x="71.4286%" y="533" width="1.1905%" height="15" fill="rgb(219,138,53)" fg:x="60" fg:w="1"/><text x="71.6786%" y="543.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 1.19%)</title><rect x="71.4286%" y="517" width="1.1905%" height="15" fill="rgb(211,51,23)" fg:x="60" fg:w="1"/><text x="71.6786%" y="527.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (12 samples, 14.29%)</title><rect x="60.7143%" y="709" width="14.2857%" height="15" fill="rgb(247,221,28)" fg:x="51" fg:w="12"/><text x="60.9643%" y="719.50">_ZN3rpc4test21test_ran..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (12 samples, 14.29%)</title><rect x="60.7143%" y="693" width="14.2857%" height="15" fill="rgb(251,222,45)" fg:x="51" fg:w="12"/><text x="60.9643%" y="703.50">futures_util::stream::..</text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (12 samples, 14.29%)</title><rect x="60.7143%" y="677" width="14.2857%" height="15" fill="rgb(217,162,53)" fg:x="51" fg:w="12"/><text x="60.9643%" y="687.50">_ZN3rpc4test21test_ran..</text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h53647953b95789fdE.llvm.5338016803958221381 (12 samples, 14.29%)</title><rect x="60.7143%" y="661" width="14.2857%" height="15" fill="rgb(229,93,14)" fg:x="51" fg:w="12"/><text x="60.9643%" y="671.50">_ZN12libp2p_swarm23Swa..</text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (12 samples, 14.29%)</title><rect x="60.7143%" y="645" width="14.2857%" height="15" fill="rgb(209,67,49)" fg:x="51" fg:w="12"/><text x="60.9643%" y="655.50">&lt;rpc::test::TestBehati..</text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (12 samples, 14.29%)</title><rect x="60.7143%" y="629" width="14.2857%" height="15" fill="rgb(213,87,29)" fg:x="51" fg:w="12"/><text x="60.9643%" y="639.50">&lt;rpc::Behaviour as lib..</text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 14.29%)</title><rect x="60.7143%" y="613" width="14.2857%" height="15" fill="rgb(205,151,52)" fg:x="51" fg:w="12"/><text x="60.9643%" y="623.50">&lt;futures_util::stream:..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (2 samples, 2.38%)</title><rect x="72.6190%" y="597" width="2.3810%" height="15" fill="rgb(253,215,39)" fg:x="61" fg:w="2"/><text x="72.8690%" y="607.50">fu..</text></g><g><title>[libc.so.6] (2 samples, 2.38%)</title><rect x="72.6190%" y="581" width="2.3810%" height="15" fill="rgb(221,220,41)" fg:x="61" fg:w="2"/><text x="72.8690%" y="591.50">[l..</text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 1.19%)</title><rect x="75.0000%" y="709" width="1.1905%" height="15" fill="rgb(218,133,21)" fg:x="63" fg:w="1"/><text x="75.2500%" y="719.50"></text></g><g><title>&lt;libp2p_core::muxing::boxed::StreamMuxerBox as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (3 samples, 3.57%)</title><rect x="76.1905%" y="693" width="3.5714%" height="15" fill="rgb(221,193,43)" fg:x="64" fg:w="3"/><text x="76.4405%" y="703.50">&lt;lib..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (3 samples, 3.57%)</title><rect x="76.1905%" y="677" width="3.5714%" height="15" fill="rgb(240,128,52)" fg:x="64" fg:w="3"/><text x="76.4405%" y="687.50">&lt;lib..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll_inbound (3 samples, 3.57%)</title><rect x="76.1905%" y="661" width="3.5714%" height="15" fill="rgb(253,114,12)" fg:x="64" fg:w="3"/><text x="76.4405%" y="671.50">&lt;lib..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (3 samples, 3.57%)</title><rect x="76.1905%" y="645" width="3.5714%" height="15" fill="rgb(215,223,47)" fg:x="64" fg:w="3"/><text x="76.4405%" y="655.50">yamu..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 3.57%)</title><rect x="76.1905%" y="629" width="3.5714%" height="15" fill="rgb(248,225,23)" fg:x="64" fg:w="3"/><text x="76.4405%" y="639.50">&lt;yam..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (3 samples, 3.57%)</title><rect x="76.1905%" y="613" width="3.5714%" height="15" fill="rgb(250,108,0)" fg:x="64" fg:w="3"/><text x="76.4405%" y="623.50">&lt;mul..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (3 samples, 3.57%)</title><rect x="76.1905%" y="597" width="3.5714%" height="15" fill="rgb(228,208,7)" fg:x="64" fg:w="3"/><text x="76.4405%" y="607.50">&lt;lib..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 3.57%)</title><rect x="76.1905%" y="581" width="3.5714%" height="15" fill="rgb(244,45,10)" fg:x="64" fg:w="3"/><text x="76.4405%" y="591.50">&lt;asy..</text></g><g><title>[libc.so.6] (2 samples, 2.38%)</title><rect x="77.3810%" y="565" width="2.3810%" height="15" fill="rgb(207,125,25)" fg:x="65" fg:w="2"/><text x="77.6310%" y="575.50">[l..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (1 samples, 1.19%)</title><rect x="79.7619%" y="581" width="1.1905%" height="15" fill="rgb(210,195,18)" fg:x="67" fg:w="1"/><text x="80.0119%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::zeroed (1 samples, 1.19%)</title><rect x="79.7619%" y="565" width="1.1905%" height="15" fill="rgb(249,80,12)" fg:x="67" fg:w="1"/><text x="80.0119%" y="575.50"></text></g><g><title>__libc_calloc (1 samples, 1.19%)</title><rect x="79.7619%" y="549" width="1.1905%" height="15" fill="rgb(221,65,9)" fg:x="67" fg:w="1"/><text x="80.0119%" y="559.50"></text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="80.9524%" y="581" width="1.1905%" height="15" fill="rgb(235,49,36)" fg:x="68" fg:w="1"/><text x="81.2024%" y="591.50"></text></g><g><title>&lt;libp2p_tcp::provider::tokio::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 1.19%)</title><rect x="80.9524%" y="565" width="1.1905%" height="15" fill="rgb(225,32,20)" fg:x="68" fg:w="1"/><text x="81.2024%" y="575.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 1.19%)</title><rect x="80.9524%" y="549" width="1.1905%" height="15" fill="rgb(215,141,46)" fg:x="68" fg:w="1"/><text x="81.2024%" y="559.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 1.19%)</title><rect x="80.9524%" y="533" width="1.1905%" height="15" fill="rgb(250,160,47)" fg:x="68" fg:w="1"/><text x="81.2024%" y="543.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.19%)</title><rect x="80.9524%" y="517" width="1.1905%" height="15" fill="rgb(216,222,40)" fg:x="68" fg:w="1"/><text x="81.2024%" y="527.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 1.19%)</title><rect x="80.9524%" y="501" width="1.1905%" height="15" fill="rgb(234,217,39)" fg:x="68" fg:w="1"/><text x="81.2024%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 1.19%)</title><rect x="80.9524%" y="485" width="1.1905%" height="15" fill="rgb(207,178,40)" fg:x="68" fg:w="1"/><text x="81.2024%" y="495.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 1.19%)</title><rect x="80.9524%" y="469" width="1.1905%" height="15" fill="rgb(221,136,13)" fg:x="68" fg:w="1"/><text x="81.2024%" y="479.50"></text></g><g><title>recv (1 samples, 1.19%)</title><rect x="80.9524%" y="453" width="1.1905%" height="15" fill="rgb(249,199,10)" fg:x="68" fg:w="1"/><text x="81.2024%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (11 samples, 13.10%)</title><rect x="76.1905%" y="709" width="13.0952%" height="15" fill="rgb(249,222,13)" fg:x="64" fg:w="11"/><text x="76.4405%" y="719.50">futures_util::future..</text></g><g><title>&lt;libp2p_core::muxing::boxed::Wrap&lt;T&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (8 samples, 9.52%)</title><rect x="79.7619%" y="693" width="9.5238%" height="15" fill="rgb(244,185,38)" fg:x="67" fg:w="8"/><text x="80.0119%" y="703.50">&lt;libp2p_core::..</text></g><g><title>&lt;libp2p_yamux::Muxer&lt;C&gt; as libp2p_core::muxing::StreamMuxer&gt;::poll (8 samples, 9.52%)</title><rect x="79.7619%" y="677" width="9.5238%" height="15" fill="rgb(236,202,9)" fg:x="67" fg:w="8"/><text x="80.0119%" y="687.50">&lt;libp2p_yamux:..</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (8 samples, 9.52%)</title><rect x="79.7619%" y="661" width="9.5238%" height="15" fill="rgb(250,229,37)" fg:x="67" fg:w="8"/><text x="80.0119%" y="671.50">yamux::connect..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 9.52%)</title><rect x="79.7619%" y="645" width="9.5238%" height="15" fill="rgb(206,174,23)" fg:x="67" fg:w="8"/><text x="80.0119%" y="655.50">&lt;yamux::frame:..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (8 samples, 9.52%)</title><rect x="79.7619%" y="629" width="9.5238%" height="15" fill="rgb(211,33,43)" fg:x="67" fg:w="8"/><text x="80.0119%" y="639.50">&lt;multistream_s..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (8 samples, 9.52%)</title><rect x="79.7619%" y="613" width="9.5238%" height="15" fill="rgb(245,58,50)" fg:x="67" fg:w="8"/><text x="80.0119%" y="623.50">&lt;libp2p_noise:..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 9.52%)</title><rect x="79.7619%" y="597" width="9.5238%" height="15" fill="rgb(244,68,36)" fg:x="67" fg:w="8"/><text x="80.0119%" y="607.50">&lt;asynchronous_..</text></g><g><title>[libc.so.6] (6 samples, 7.14%)</title><rect x="82.1429%" y="581" width="7.1429%" height="15" fill="rgb(232,229,15)" fg:x="69" fg:w="6"/><text x="82.3929%" y="591.50">[libc.so.6]</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (1 samples, 1.19%)</title><rect x="89.2857%" y="709" width="1.1905%" height="15" fill="rgb(254,30,23)" fg:x="75" fg:w="1"/><text x="89.5357%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="90.4762%" y="709" width="1.1905%" height="15" fill="rgb(235,160,14)" fg:x="76" fg:w="1"/><text x="90.7262%" y="719.50"></text></g><g><title>test::run_test::_{{closure}} (1 samples, 1.19%)</title><rect x="90.4762%" y="693" width="1.1905%" height="15" fill="rgb(212,155,44)" fg:x="76" fg:w="1"/><text x="90.7262%" y="703.50"></text></g><g><title>test::run_test::_{{closure}} (1 samples, 1.19%)</title><rect x="90.4762%" y="677" width="1.1905%" height="15" fill="rgb(226,2,50)" fg:x="76" fg:w="1"/><text x="90.7262%" y="687.50"></text></g><g><title>test::run_test_in_process (1 samples, 1.19%)</title><rect x="90.4762%" y="661" width="1.1905%" height="15" fill="rgb(234,177,6)" fg:x="76" fg:w="1"/><text x="90.7262%" y="671.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="90.4762%" y="645" width="1.1905%" height="15" fill="rgb(217,24,9)" fg:x="76" fg:w="1"/><text x="90.7262%" y="655.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="90.4762%" y="629" width="1.1905%" height="15" fill="rgb(220,13,46)" fg:x="76" fg:w="1"/><text x="90.7262%" y="639.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="90.4762%" y="613" width="1.1905%" height="15" fill="rgb(239,221,27)" fg:x="76" fg:w="1"/><text x="90.7262%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="90.4762%" y="597" width="1.1905%" height="15" fill="rgb(222,198,25)" fg:x="76" fg:w="1"/><text x="90.7262%" y="607.50"></text></g><g><title>test::run_test_in_process::_{{closure}} (1 samples, 1.19%)</title><rect x="90.4762%" y="581" width="1.1905%" height="15" fill="rgb(211,99,13)" fg:x="76" fg:w="1"/><text x="90.7262%" y="591.50"></text></g><g><title>test::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="90.4762%" y="565" width="1.1905%" height="15" fill="rgb(232,111,31)" fg:x="76" fg:w="1"/><text x="90.7262%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="90.4762%" y="549" width="1.1905%" height="15" fill="rgb(245,82,37)" fg:x="76" fg:w="1"/><text x="90.7262%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="90.4762%" y="533" width="1.1905%" height="15" fill="rgb(227,149,46)" fg:x="76" fg:w="1"/><text x="90.7262%" y="543.50"></text></g><g><title>rpc::test::test_random_rpc_calls (1 samples, 1.19%)</title><rect x="90.4762%" y="517" width="1.1905%" height="15" fill="rgb(218,36,50)" fg:x="76" fg:w="1"/><text x="90.7262%" y="527.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 1.19%)</title><rect x="90.4762%" y="501" width="1.1905%" height="15" fill="rgb(226,80,48)" fg:x="76" fg:w="1"/><text x="90.7262%" y="511.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.19%)</title><rect x="90.4762%" y="485" width="1.1905%" height="15" fill="rgb(238,224,15)" fg:x="76" fg:w="1"/><text x="90.7262%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (1 samples, 1.19%)</title><rect x="90.4762%" y="469" width="1.1905%" height="15" fill="rgb(241,136,10)" fg:x="76" fg:w="1"/><text x="90.7262%" y="479.50"></text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 1.19%)</title><rect x="90.4762%" y="453" width="1.1905%" height="15" fill="rgb(208,32,45)" fg:x="76" fg:w="1"/><text x="90.7262%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 1.19%)</title><rect x="90.4762%" y="437" width="1.1905%" height="15" fill="rgb(207,135,9)" fg:x="76" fg:w="1"/><text x="90.7262%" y="447.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (1 samples, 1.19%)</title><rect x="90.4762%" y="421" width="1.1905%" height="15" fill="rgb(206,86,44)" fg:x="76" fg:w="1"/><text x="90.7262%" y="431.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 1.19%)</title><rect x="90.4762%" y="405" width="1.1905%" height="15" fill="rgb(245,177,15)" fg:x="76" fg:w="1"/><text x="90.7262%" y="415.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (1 samples, 1.19%)</title><rect x="90.4762%" y="389" width="1.1905%" height="15" fill="rgb(206,64,50)" fg:x="76" fg:w="1"/><text x="90.7262%" y="399.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h53647953b95789fdE.llvm.5338016803958221381 (1 samples, 1.19%)</title><rect x="90.4762%" y="373" width="1.1905%" height="15" fill="rgb(234,36,40)" fg:x="76" fg:w="1"/><text x="90.7262%" y="383.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17h3abe1a8118e7ff75E.llvm.10030110265137562609 (1 samples, 1.19%)</title><rect x="90.4762%" y="357" width="1.1905%" height="15" fill="rgb(213,64,8)" fg:x="76" fg:w="1"/><text x="90.7262%" y="367.50"></text></g><g><title>test::run_test::_{{closure}} (1 samples, 1.19%)</title><rect x="91.6667%" y="709" width="1.1905%" height="15" fill="rgb(210,75,36)" fg:x="77" fg:w="1"/><text x="91.9167%" y="719.50"></text></g><g><title>test::run_test_in_process (1 samples, 1.19%)</title><rect x="91.6667%" y="693" width="1.1905%" height="15" fill="rgb(229,88,21)" fg:x="77" fg:w="1"/><text x="91.9167%" y="703.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.19%)</title><rect x="91.6667%" y="677" width="1.1905%" height="15" fill="rgb(252,204,47)" fg:x="77" fg:w="1"/><text x="91.9167%" y="687.50"></text></g><g><title>std::panicking::try (1 samples, 1.19%)</title><rect x="91.6667%" y="661" width="1.1905%" height="15" fill="rgb(208,77,27)" fg:x="77" fg:w="1"/><text x="91.9167%" y="671.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.19%)</title><rect x="91.6667%" y="645" width="1.1905%" height="15" fill="rgb(221,76,26)" fg:x="77" fg:w="1"/><text x="91.9167%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 1.19%)</title><rect x="91.6667%" y="629" width="1.1905%" height="15" fill="rgb(225,139,18)" fg:x="77" fg:w="1"/><text x="91.9167%" y="639.50"></text></g><g><title>test::run_test_in_process::_{{closure}} (1 samples, 1.19%)</title><rect x="91.6667%" y="613" width="1.1905%" height="15" fill="rgb(230,137,11)" fg:x="77" fg:w="1"/><text x="91.9167%" y="623.50"></text></g><g><title>test::__rust_begin_short_backtrace (1 samples, 1.19%)</title><rect x="91.6667%" y="597" width="1.1905%" height="15" fill="rgb(212,28,1)" fg:x="77" fg:w="1"/><text x="91.9167%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="91.6667%" y="581" width="1.1905%" height="15" fill="rgb(248,164,17)" fg:x="77" fg:w="1"/><text x="91.9167%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.19%)</title><rect x="91.6667%" y="565" width="1.1905%" height="15" fill="rgb(222,171,42)" fg:x="77" fg:w="1"/><text x="91.9167%" y="575.50"></text></g><g><title>rpc::test::test_random_rpc_calls (1 samples, 1.19%)</title><rect x="91.6667%" y="549" width="1.1905%" height="15" fill="rgb(243,84,45)" fg:x="77" fg:w="1"/><text x="91.9167%" y="559.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 1.19%)</title><rect x="91.6667%" y="533" width="1.1905%" height="15" fill="rgb(252,49,23)" fg:x="77" fg:w="1"/><text x="91.9167%" y="543.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.19%)</title><rect x="91.6667%" y="517" width="1.1905%" height="15" fill="rgb(215,19,7)" fg:x="77" fg:w="1"/><text x="91.9167%" y="527.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (1 samples, 1.19%)</title><rect x="91.6667%" y="501" width="1.1905%" height="15" fill="rgb(238,81,41)" fg:x="77" fg:w="1"/><text x="91.9167%" y="511.50"></text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 1.19%)</title><rect x="91.6667%" y="485" width="1.1905%" height="15" fill="rgb(210,199,37)" fg:x="77" fg:w="1"/><text x="91.9167%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 1.19%)</title><rect x="91.6667%" y="469" width="1.1905%" height="15" fill="rgb(244,192,49)" fg:x="77" fg:w="1"/><text x="91.9167%" y="479.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (1 samples, 1.19%)</title><rect x="91.6667%" y="453" width="1.1905%" height="15" fill="rgb(226,211,11)" fg:x="77" fg:w="1"/><text x="91.9167%" y="463.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 1.19%)</title><rect x="91.6667%" y="437" width="1.1905%" height="15" fill="rgb(236,162,54)" fg:x="77" fg:w="1"/><text x="91.9167%" y="447.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (1 samples, 1.19%)</title><rect x="91.6667%" y="421" width="1.1905%" height="15" fill="rgb(220,229,9)" fg:x="77" fg:w="1"/><text x="91.9167%" y="431.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h53647953b95789fdE.llvm.5338016803958221381 (1 samples, 1.19%)</title><rect x="91.6667%" y="405" width="1.1905%" height="15" fill="rgb(250,87,22)" fg:x="77" fg:w="1"/><text x="91.9167%" y="415.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (1 samples, 1.19%)</title><rect x="91.6667%" y="389" width="1.1905%" height="15" fill="rgb(239,43,17)" fg:x="77" fg:w="1"/><text x="91.9167%" y="399.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.19%)</title><rect x="92.8571%" y="709" width="1.1905%" height="15" fill="rgb(231,177,25)" fg:x="78" fg:w="1"/><text x="93.1071%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (1 samples, 1.19%)</title><rect x="92.8571%" y="693" width="1.1905%" height="15" fill="rgb(219,179,1)" fg:x="78" fg:w="1"/><text x="93.1071%" y="703.50"></text></g><g><title>tokio::runtime::context::set_scheduler (1 samples, 1.19%)</title><rect x="92.8571%" y="677" width="1.1905%" height="15" fill="rgb(238,219,53)" fg:x="78" fg:w="1"/><text x="93.1071%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 1.19%)</title><rect x="92.8571%" y="661" width="1.1905%" height="15" fill="rgb(232,167,36)" fg:x="78" fg:w="1"/><text x="93.1071%" y="671.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$17ha43e905fd76d5098E.llvm.5348187469495131659 (1 samples, 1.19%)</title><rect x="92.8571%" y="645" width="1.1905%" height="15" fill="rgb(244,19,51)" fg:x="78" fg:w="1"/><text x="93.1071%" y="655.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 1.19%)</title><rect x="92.8571%" y="629" width="1.1905%" height="15" fill="rgb(224,6,22)" fg:x="78" fg:w="1"/><text x="93.1071%" y="639.50"></text></g><g><title>_ZN3rpc4test21test_random_rpc_calls28_$u7b$$u7b$closure$u7d$$u7d$10run_server28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h30cb1dc50792a2d4E.llvm.14245804935887090703 (1 samples, 1.19%)</title><rect x="92.8571%" y="613" width="1.1905%" height="15" fill="rgb(224,145,5)" fg:x="78" fg:w="1"/><text x="93.1071%" y="623.50"></text></g><g><title>_ZN12libp2p_swarm23Swarm$LT$TBehaviour$GT$15poll_next_event17h53647953b95789fdE.llvm.5338016803958221381 (1 samples, 1.19%)</title><rect x="92.8571%" y="597" width="1.1905%" height="15" fill="rgb(234,130,49)" fg:x="78" fg:w="1"/><text x="93.1071%" y="607.50"></text></g><g><title>&lt;rpc::test::TestBehatiour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (1 samples, 1.19%)</title><rect x="92.8571%" y="581" width="1.1905%" height="15" fill="rgb(254,6,2)" fg:x="78" fg:w="1"/><text x="93.1071%" y="591.50"></text></g><g><title>&lt;rpc::Behaviour as libp2p_swarm::behaviour::NetworkBehaviour&gt;::poll (1 samples, 1.19%)</title><rect x="92.8571%" y="565" width="1.1905%" height="15" fill="rgb(208,96,46)" fg:x="78" fg:w="1"/><text x="93.1071%" y="575.50"></text></g><g><title>&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 1.19%)</title><rect x="92.8571%" y="549" width="1.1905%" height="15" fill="rgb(239,3,39)" fg:x="78" fg:w="1"/><text x="93.1071%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 1.19%)</title><rect x="92.8571%" y="533" width="1.1905%" height="15" fill="rgb(233,210,1)" fg:x="78" fg:w="1"/><text x="93.1071%" y="543.50"></text></g><g><title>all (84 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="84"/><text x="0.2500%" y="767.50"></text></g><g><title>test::test_rand (73 samples, 86.90%)</title><rect x="13.0952%" y="741" width="86.9048%" height="15" fill="rgb(240,136,2)" fg:x="11" fg:w="73"/><text x="13.3452%" y="751.50">test::test_rand</text></g><g><title>[unknown] (41 samples, 48.81%)</title><rect x="51.1905%" y="725" width="48.8095%" height="15" fill="rgb(239,18,37)" fg:x="43" fg:w="41"/><text x="51.4405%" y="735.50">[unknown]</text></g><g><title>yamux::connection::Connection&lt;T&gt;::poll_next_inbound (5 samples, 5.95%)</title><rect x="94.0476%" y="709" width="5.9524%" height="15" fill="rgb(218,185,22)" fg:x="79" fg:w="5"/><text x="94.2976%" y="719.50">yamux::c..</text></g><g><title>&lt;yamux::frame::io::Io&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 5.95%)</title><rect x="94.0476%" y="693" width="5.9524%" height="15" fill="rgb(225,218,4)" fg:x="79" fg:w="5"/><text x="94.2976%" y="703.50">&lt;yamux::..</text></g><g><title>&lt;multistream_select::negotiated::Negotiated&lt;TInner&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (5 samples, 5.95%)</title><rect x="94.0476%" y="677" width="5.9524%" height="15" fill="rgb(230,182,32)" fg:x="79" fg:w="5"/><text x="94.2976%" y="687.50">&lt;multist..</text></g><g><title>&lt;libp2p_noise::io::Output&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (5 samples, 5.95%)</title><rect x="94.0476%" y="661" width="5.9524%" height="15" fill="rgb(242,56,43)" fg:x="79" fg:w="5"/><text x="94.2976%" y="671.50">&lt;libp2p_..</text></g><g><title>&lt;asynchronous_codec::framed_read::FramedRead2&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5 samples, 5.95%)</title><rect x="94.0476%" y="645" width="5.9524%" height="15" fill="rgb(233,99,24)" fg:x="79" fg:w="5"/><text x="94.2976%" y="655.50">&lt;asynchr..</text></g><g><title>&lt;libp2p_noise::io::framed::Codec&lt;snow::transportstate::TransportState&gt; as asynchronous_codec::decoder::Decoder&gt;::decode (5 samples, 5.95%)</title><rect x="94.0476%" y="629" width="5.9524%" height="15" fill="rgb(234,209,42)" fg:x="79" fg:w="5"/><text x="94.2976%" y="639.50">&lt;libp2p_..</text></g><g><title>snow::transportstate::TransportState::read_message (5 samples, 5.95%)</title><rect x="94.0476%" y="613" width="5.9524%" height="15" fill="rgb(227,7,12)" fg:x="79" fg:w="5"/><text x="94.2976%" y="623.50">snow::tr..</text></g><g><title>&lt;snow::resolvers::ring::CipherChaChaPoly as snow::types::Cipher&gt;::decrypt (5 samples, 5.95%)</title><rect x="94.0476%" y="597" width="5.9524%" height="15" fill="rgb(245,203,43)" fg:x="79" fg:w="5"/><text x="94.2976%" y="607.50">&lt;snow::r..</text></g><g><title>ring::aead::less_safe_key::open_within_ (5 samples, 5.95%)</title><rect x="94.0476%" y="581" width="5.9524%" height="15" fill="rgb(238,205,33)" fg:x="79" fg:w="5"/><text x="94.2976%" y="591.50">ring::ae..</text></g><g><title>ring::aead::chacha20_poly1305::chacha20_poly1305_open (5 samples, 5.95%)</title><rect x="94.0476%" y="565" width="5.9524%" height="15" fill="rgb(231,56,7)" fg:x="79" fg:w="5"/><text x="94.2976%" y="575.50">ring::ae..</text></g><g><title>chacha20_poly1305_open_avx2 (5 samples, 5.95%)</title><rect x="94.0476%" y="549" width="5.9524%" height="15" fill="rgb(244,186,29)" fg:x="79" fg:w="5"/><text x="94.2976%" y="559.50">chacha20..</text></g></svg></svg>